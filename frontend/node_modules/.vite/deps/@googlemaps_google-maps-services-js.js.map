{
  "version": 3,
  "sources": ["../../../../../node_modules/retry-axios/src/index.ts", "../../../../../node_modules/@googlemaps/google-maps-services-js/src/util.ts", "browser-external:crypto", "../../../../../node_modules/crypto-js/core.js", "../../../../../node_modules/crypto-js/enc-base64.js", "../../../../../node_modules/crypto-js/sha1.js", "../../../../../node_modules/crypto-js/hmac.js", "../../../../../node_modules/crypto-js/hmac-sha1.js", "../../../../../node_modules/@googlemaps/url-signature/src/index.ts", "../../../../../node_modules/strict-uri-encode/index.js", "../../../../../node_modules/decode-uri-component/index.js", "../../../../../node_modules/split-on-first/index.js", "../../../../../node_modules/filter-obj/index.js", "../../../../../node_modules/query-string/index.js", "../../../../../node_modules/@googlemaps/google-maps-services-js/src/serialize.ts", "../../../../../node_modules/@googlemaps/google-maps-services-js/src/directions.ts", "../../../../../node_modules/@googlemaps/google-maps-services-js/src/distance.ts", "../../../../../node_modules/@googlemaps/google-maps-services-js/src/elevation.ts", "../../../../../node_modules/@googlemaps/google-maps-services-js/src/places/findplacefromtext.ts", "../../../../../node_modules/@googlemaps/google-maps-services-js/src/geocode/geocode.ts", "../../../../../node_modules/@googlemaps/google-maps-services-js/src/roads/nearestroads.ts", "../../../../../node_modules/@googlemaps/google-maps-services-js/src/places/autocomplete.ts", "../../../../../node_modules/@googlemaps/google-maps-services-js/src/places/details.ts", "../../../../../node_modules/@googlemaps/google-maps-services-js/src/places/photo.ts", "../../../../../node_modules/@googlemaps/google-maps-services-js/src/places/queryautocomplete.ts", "../../../../../node_modules/@googlemaps/google-maps-services-js/src/places/placesnearby.ts", "../../../../../node_modules/@googlemaps/google-maps-services-js/src/geocode/reversegeocode.ts", "../../../../../node_modules/@googlemaps/google-maps-services-js/src/roads/snaptoroads.ts", "../../../../../node_modules/@googlemaps/google-maps-services-js/src/places/textsearch.ts", "../../../../../node_modules/@googlemaps/google-maps-services-js/src/timezone.ts", "../../../../../node_modules/agentkeepalive/browser.js", "../../../../../node_modules/@googlemaps/google-maps-services-js/src/common.ts", "../../../../../node_modules/@googlemaps/google-maps-services-js/src/adapter.ts", "../../../../../node_modules/@googlemaps/google-maps-services-js/package.json", "../../../../../node_modules/@googlemaps/google-maps-services-js/src/client.ts", "../../../../../node_modules/@googlemaps/google-maps-services-js/src/geolocate.ts", "../../../../../node_modules/@googlemaps/google-maps-services-js/src/index.ts"],
  "sourcesContent": ["import axios, {\n  AxiosError,\n  AxiosInstance,\n  AxiosRequestConfig,\n  AxiosResponse,\n} from 'axios';\n\n/**\n * Configuration for the Axios `request` method.\n */\nexport interface RetryConfig {\n  /**\n   * The number of times to retry the request.  Defaults to 3.\n   */\n  retry?: number;\n\n  /**\n   * The number of retries already attempted.\n   */\n  currentRetryAttempt?: number;\n\n  /**\n   * The amount of time to initially delay the retry.  Defaults to 100.\n   */\n  retryDelay?: number;\n\n  /**\n   * The instance of the axios object to which the interceptor is attached.\n   */\n  instance?: AxiosInstance;\n\n  /**\n   * The HTTP Methods that will be automatically retried.\n   * Defaults to ['GET','PUT','HEAD','OPTIONS','DELETE']\n   */\n  httpMethodsToRetry?: string[];\n\n  /**\n   * The HTTP response status codes that will automatically be retried.\n   * Defaults to: [[100, 199], [429, 429], [500, 599]]\n   */\n  statusCodesToRetry?: number[][];\n\n  /**\n   * Function to invoke when a retry attempt is made.\n   */\n  onRetryAttempt?: (err: AxiosError) => void;\n\n  /**\n   * Function to invoke which determines if you should retry\n   */\n  shouldRetry?: (err: AxiosError) => boolean;\n\n  /**\n   * When there is no response, the number of retries to attempt. Defaults to 2.\n   */\n  noResponseRetries?: number;\n\n  /**\n   * Backoff Type; 'linear', 'static' or 'exponential'.\n   */\n  backoffType?: 'linear' | 'static' | 'exponential';\n\n  /**\n   * Whether to check for 'Retry-After' header in response and use value as delay. Defaults to true.\n   */\n  checkRetryAfter?: boolean;\n\n  /**\n   * Max permitted Retry-After value (in ms) - rejects if greater. Defaults to 5 mins.\n   */\n  maxRetryAfter?: number;\n\n  /**\n   * Ceiling for calculated delay (in ms) - delay will not exceed this value.\n   */\n  maxRetryDelay?: number;\n}\n\nexport type RaxConfig = {\n  raxConfig: RetryConfig;\n} & AxiosRequestConfig;\n\n/**\n * Attach the interceptor to the Axios instance.\n * @param instance The optional Axios instance on which to attach the\n * interceptor.\n * @returns The id of the interceptor attached to the axios instance.\n */\nexport function attach(instance?: AxiosInstance) {\n  instance = instance || axios;\n  return instance.interceptors.response.use(onFulfilled, onError);\n}\n\n/**\n * Eject the Axios interceptor that is providing retry capabilities.\n * @param interceptorId The interceptorId provided in the config.\n * @param instance The axios instance using this interceptor.\n */\nexport function detach(interceptorId: number, instance?: AxiosInstance) {\n  instance = instance || axios;\n  instance.interceptors.response.eject(interceptorId);\n}\n\nfunction onFulfilled(res: AxiosResponse) {\n  return res;\n}\n\n/**\n * Some versions of axios are converting arrays into objects during retries.\n * This will attempt to convert an object with the following structure into\n * an array, where the keys correspond to the indices:\n * {\n *   0: {\n *     // some property\n *   },\n *   1: {\n *     // another\n *   }\n * }\n * @param obj The object that (may) have integers that correspond to an index\n * @returns An array with the pucked values\n */\nfunction normalizeArray<T>(obj?: T[]): T[] | undefined {\n  const arr: T[] = [];\n  if (!obj) {\n    return undefined;\n  }\n  if (Array.isArray(obj)) {\n    return obj;\n  }\n  if (typeof obj === 'object') {\n    Object.keys(obj).forEach(key => {\n      if (typeof key === 'number') {\n        arr[key] = obj[key];\n      }\n    });\n  }\n  return arr;\n}\n\n/**\n * Parse the Retry-After header.\n * https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After\n * @param header Retry-After header value\n * @returns Number of milliseconds, or undefined if invalid\n */\nfunction parseRetryAfter(header: string): number | undefined {\n  // Header value may be string containing integer seconds\n  const value = Number(header);\n  if (!Number.isNaN(value)) {\n    return value * 1000;\n  }\n  // Or HTTP date time string\n  const dateTime = Date.parse(header);\n  if (!Number.isNaN(dateTime)) {\n    return dateTime - Date.now();\n  }\n  return undefined;\n}\n\nfunction onError(err: AxiosError) {\n  if (axios.isCancel(err)) {\n    return Promise.reject(err);\n  }\n\n  const config = getConfig(err) || {};\n  config.currentRetryAttempt = config.currentRetryAttempt || 0;\n  config.retry = typeof config.retry === 'number' ? config.retry : 3;\n  config.retryDelay =\n    typeof config.retryDelay === 'number' ? config.retryDelay : 100;\n  config.instance = config.instance || axios;\n  config.backoffType = config.backoffType || 'exponential';\n  config.httpMethodsToRetry = normalizeArray(config.httpMethodsToRetry) || [\n    'GET',\n    'HEAD',\n    'PUT',\n    'OPTIONS',\n    'DELETE',\n  ];\n  config.noResponseRetries =\n    typeof config.noResponseRetries === 'number' ? config.noResponseRetries : 2;\n  config.checkRetryAfter =\n    typeof config.checkRetryAfter === 'boolean' ? config.checkRetryAfter : true;\n  config.maxRetryAfter =\n    typeof config.maxRetryAfter === 'number' ? config.maxRetryAfter : 60000 * 5;\n\n  // If this wasn't in the list of status codes where we want\n  // to automatically retry, return.\n  const retryRanges = [\n    // https://en.wikipedia.org/wiki/List_of_HTTP_status_codes\n    // 1xx - Retry (Informational, request still processing)\n    // 2xx - Do not retry (Success)\n    // 3xx - Do not retry (Redirect)\n    // 4xx - Do not retry (Client errors)\n    // 429 - Retry (\"Too Many Requests\")\n    // 5xx - Retry (Server errors)\n    [100, 199],\n    [429, 429],\n    [500, 599],\n  ];\n  config.statusCodesToRetry =\n    normalizeArray(config.statusCodesToRetry) || retryRanges;\n\n  // Put the config back into the err\n  err.config = err.config || {}; // allow for wider range of errors\n  (err.config as RaxConfig).raxConfig = {...config};\n\n  // Determine if we should retry the request\n  const shouldRetryFn = config.shouldRetry || shouldRetryRequest;\n  if (!shouldRetryFn(err)) {\n    return Promise.reject(err);\n  }\n\n  // Create a promise that invokes the retry after the backOffDelay\n  const onBackoffPromise = new Promise((resolve, reject) => {\n    let delay = 0;\n    // If enabled, check for 'Retry-After' header in response to use as delay\n    if (\n      config.checkRetryAfter &&\n      err.response &&\n      err.response.headers['retry-after']\n    ) {\n      const retryAfter = parseRetryAfter(err.response.headers['retry-after']);\n      if (retryAfter && retryAfter > 0 && retryAfter <= config.maxRetryAfter!) {\n        delay = retryAfter;\n      } else {\n        return reject(err);\n      }\n    }\n\n    // Now it's certain that a retry is supposed to happen. Incremenent the\n    // counter, critical for linear and exp backoff delay calc. Note that\n    // `config.currentRetryAttempt` is local to this function whereas\n    // `(err.config as RaxConfig).raxConfig` is state that is tranferred across\n    // retries. That is, we want to mutate `(err.config as\n    // RaxConfig).raxConfig`. Another important note is about the definition of\n    // `currentRetryAttempt`: When we are here becasue the first and actual\n    // HTTP request attempt failed then `currentRetryAttempt` is still zero. We\n    // have found that a retry is indeed required. Since that is (will be)\n    // indeed the first retry it makes sense to now increase\n    // `currentRetryAttempt` by 1. So that it is in fact 1 for the first retry\n    // (as opposed to 0 or 2); an intuitive convention to use for the math\n    // below.\n    (err.config as RaxConfig).raxConfig!.currentRetryAttempt! += 1;\n\n    // store with shorter and more expressive variable name.\n    const retrycount = (err.config as RaxConfig).raxConfig!\n      .currentRetryAttempt!;\n\n    // Calculate delay according to chosen strategy\n    // Default to exponential backoff - formula: ((2^c - 1) / 2) * 1000\n    if (delay === 0) {\n      // was not set by Retry-After logic\n      if (config.backoffType === 'linear') {\n        // The delay between the first (actual) attempt and the first retry\n        // should be non-zero. Rely on the convention that `retrycount` is\n        // equal to 1 for the first retry when we are in here (was once 0,\n        // which was a bug -- see #122).\n        delay = retrycount * 1000;\n      } else if (config.backoffType === 'static') {\n        delay = config.retryDelay!;\n      } else {\n        delay = ((Math.pow(2, retrycount) - 1) / 2) * 1000;\n      }\n      if (typeof config.maxRetryDelay === 'number') {\n        delay = Math.min(delay, config.maxRetryDelay);\n      }\n    }\n    setTimeout(resolve, delay);\n  });\n\n  // Notify the user if they added an `onRetryAttempt` handler\n  const onRetryAttemptPromise = config.onRetryAttempt\n    ? Promise.resolve(config.onRetryAttempt(err))\n    : Promise.resolve();\n\n  // Return the promise in which recalls axios to retry the request\n  return Promise.resolve()\n    .then(() => onBackoffPromise)\n    .then(() => onRetryAttemptPromise)\n    .then(() => config.instance!.request(err.config));\n}\n\n/**\n * Determine based on config if we should retry the request.\n * @param err The AxiosError passed to the interceptor.\n */\nexport function shouldRetryRequest(err: AxiosError) {\n  const config = (err.config as RaxConfig).raxConfig;\n\n  // If there's no config, or retries are disabled, return.\n  if (!config || config.retry === 0) {\n    return false;\n  }\n\n  // Check if this error has no response (ETIMEDOUT, ENOTFOUND, etc)\n  if (\n    !err.response &&\n    (config.currentRetryAttempt || 0) >= config.noResponseRetries!\n  ) {\n    return false;\n  }\n\n  // Only retry with configured HttpMethods.\n  if (\n    !err.config.method ||\n    config.httpMethodsToRetry!.indexOf(err.config.method.toUpperCase()) < 0\n  ) {\n    return false;\n  }\n\n  // If this wasn't in the list of status codes where we want\n  // to automatically retry, return.\n  if (err.response && err.response.status) {\n    let isInRange = false;\n    for (const [min, max] of config.statusCodesToRetry!) {\n      const status = err.response.status;\n      if (status >= min && status <= max) {\n        isInRange = true;\n        break;\n      }\n    }\n    if (!isInRange) {\n      return false;\n    }\n  }\n\n  // If we are out of retry attempts, return\n  config.currentRetryAttempt = config.currentRetryAttempt || 0;\n  if (config.currentRetryAttempt >= config.retry!) {\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * Acquire the raxConfig object from an AxiosError if available.\n * @param err The Axios error with a config object.\n */\nexport function getConfig(err: AxiosError) {\n  if (err && err.config) {\n    return (err.config as RaxConfig).raxConfig;\n  }\n  return;\n}\n\n// Include this so `config.raxConfig` works easily.\n// See https://github.com/JustinBeckwith/retry-axios/issues/64.\ndeclare module 'axios' {\n  export interface AxiosRequestConfig {\n    raxConfig?: RetryConfig;\n  }\n}\n", "/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LatLngLiteral } from \"./common\";\n\n/**\n * Polyline encodes an array of LatLng objects.\n *\n * See {@link https://developers.google.com/maps/documentation/utilities/polylinealgorithm}\n *\n */\nexport function encodePath(path: LatLngLiteral[]): string {\n  var result: string[] = [];\n  var start: [number, number] = [0, 0];\n  var end: [number, number];\n\n  var encodePart = function(part: number) {\n    part = part < 0 ? ~(part << 1) : part << 1;\n    while (part >= 0x20) {\n      result.push(String.fromCharCode((0x20 | (part & 0x1f)) + 63));\n      part >>= 5;\n    }\n    result.push(String.fromCharCode(part + 63));\n  };\n\n  for (let i = 0, I = path.length || 0; i < I; ++i) {\n    end = [Math.round(path[i].lat * 1e5), Math.round(path[i].lng * 1e5)];\n    encodePart(end[0] - start[0]); // lat\n    encodePart(end[1] - start[1]); // lng\n    start = end;\n  }\n\n  return result.join(\"\");\n}\n\n/**\n * Decodes a polyline encoded string.\n *\n * See {@link https://developers.google.com/maps/documentation/utilities/polylinealgorithm}\n */\nexport function decodePath(encodedPath: string): LatLngLiteral[] {\n  let len: number = encodedPath.length || 0;\n  let path = new Array(Math.floor(encodedPath.length / 2));\n  let index: number = 0;\n  let lat: number = 0;\n  let lng: number = 0;\n  let pointIndex: number;\n\n  for (pointIndex = 0; index < len; ++pointIndex) {\n    let result: number = 1;\n    let shift: number = 0;\n    let b: number;\n    do {\n      b = encodedPath.charCodeAt(index++) - 63 - 1;\n      result += b << shift;\n      shift += 5;\n    } while (b >= 0x1f);\n    lat += result & 1 ? ~(result >> 1) : result >> 1;\n\n    result = 1;\n    shift = 0;\n    do {\n      b = encodedPath.charCodeAt(index++) - 63 - 1;\n      result += b << shift;\n      shift += 5;\n    } while (b >= 0x1f);\n    lng += result & 1 ? ~(result >> 1) : result >> 1;\n\n    path[pointIndex] = { lat: lat * 1e-5, lng: lng * 1e-5 };\n  }\n  path.length = pointIndex;\n\n  return path;\n}\n", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"crypto\" has been externalized for browser compatibility. Cannot access \"crypto.${key}\" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", ";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory();\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\troot.CryptoJS = factory();\n\t}\n}(this, function () {\n\n\t/*globals window, global, require*/\n\n\t/**\n\t * CryptoJS core components.\n\t */\n\tvar CryptoJS = CryptoJS || (function (Math, undefined) {\n\n\t    var crypto;\n\n\t    // Native crypto from window (Browser)\n\t    if (typeof window !== 'undefined' && window.crypto) {\n\t        crypto = window.crypto;\n\t    }\n\n\t    // Native crypto in web worker (Browser)\n\t    if (typeof self !== 'undefined' && self.crypto) {\n\t        crypto = self.crypto;\n\t    }\n\n\t    // Native crypto from worker\n\t    if (typeof globalThis !== 'undefined' && globalThis.crypto) {\n\t        crypto = globalThis.crypto;\n\t    }\n\n\t    // Native (experimental IE 11) crypto from window (Browser)\n\t    if (!crypto && typeof window !== 'undefined' && window.msCrypto) {\n\t        crypto = window.msCrypto;\n\t    }\n\n\t    // Native crypto from global (NodeJS)\n\t    if (!crypto && typeof global !== 'undefined' && global.crypto) {\n\t        crypto = global.crypto;\n\t    }\n\n\t    // Native crypto import via require (NodeJS)\n\t    if (!crypto && typeof require === 'function') {\n\t        try {\n\t            crypto = require('crypto');\n\t        } catch (err) {}\n\t    }\n\n\t    /*\n\t     * Cryptographically secure pseudorandom number generator\n\t     *\n\t     * As Math.random() is cryptographically not safe to use\n\t     */\n\t    var cryptoSecureRandomInt = function () {\n\t        if (crypto) {\n\t            // Use getRandomValues method (Browser)\n\t            if (typeof crypto.getRandomValues === 'function') {\n\t                try {\n\t                    return crypto.getRandomValues(new Uint32Array(1))[0];\n\t                } catch (err) {}\n\t            }\n\n\t            // Use randomBytes method (NodeJS)\n\t            if (typeof crypto.randomBytes === 'function') {\n\t                try {\n\t                    return crypto.randomBytes(4).readInt32LE();\n\t                } catch (err) {}\n\t            }\n\t        }\n\n\t        throw new Error('Native crypto module could not be used to get secure random number.');\n\t    };\n\n\t    /*\n\t     * Local polyfill of Object.create\n\n\t     */\n\t    var create = Object.create || (function () {\n\t        function F() {}\n\n\t        return function (obj) {\n\t            var subtype;\n\n\t            F.prototype = obj;\n\n\t            subtype = new F();\n\n\t            F.prototype = null;\n\n\t            return subtype;\n\t        };\n\t    }());\n\n\t    /**\n\t     * CryptoJS namespace.\n\t     */\n\t    var C = {};\n\n\t    /**\n\t     * Library namespace.\n\t     */\n\t    var C_lib = C.lib = {};\n\n\t    /**\n\t     * Base object for prototypal inheritance.\n\t     */\n\t    var Base = C_lib.Base = (function () {\n\n\n\t        return {\n\t            /**\n\t             * Creates a new object that inherits from this object.\n\t             *\n\t             * @param {Object} overrides Properties to copy into the new object.\n\t             *\n\t             * @return {Object} The new object.\n\t             *\n\t             * @static\n\t             *\n\t             * @example\n\t             *\n\t             *     var MyType = CryptoJS.lib.Base.extend({\n\t             *         field: 'value',\n\t             *\n\t             *         method: function () {\n\t             *         }\n\t             *     });\n\t             */\n\t            extend: function (overrides) {\n\t                // Spawn\n\t                var subtype = create(this);\n\n\t                // Augment\n\t                if (overrides) {\n\t                    subtype.mixIn(overrides);\n\t                }\n\n\t                // Create default initializer\n\t                if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {\n\t                    subtype.init = function () {\n\t                        subtype.$super.init.apply(this, arguments);\n\t                    };\n\t                }\n\n\t                // Initializer's prototype is the subtype object\n\t                subtype.init.prototype = subtype;\n\n\t                // Reference supertype\n\t                subtype.$super = this;\n\n\t                return subtype;\n\t            },\n\n\t            /**\n\t             * Extends this object and runs the init method.\n\t             * Arguments to create() will be passed to init().\n\t             *\n\t             * @return {Object} The new object.\n\t             *\n\t             * @static\n\t             *\n\t             * @example\n\t             *\n\t             *     var instance = MyType.create();\n\t             */\n\t            create: function () {\n\t                var instance = this.extend();\n\t                instance.init.apply(instance, arguments);\n\n\t                return instance;\n\t            },\n\n\t            /**\n\t             * Initializes a newly created object.\n\t             * Override this method to add some logic when your objects are created.\n\t             *\n\t             * @example\n\t             *\n\t             *     var MyType = CryptoJS.lib.Base.extend({\n\t             *         init: function () {\n\t             *             // ...\n\t             *         }\n\t             *     });\n\t             */\n\t            init: function () {\n\t            },\n\n\t            /**\n\t             * Copies properties into this object.\n\t             *\n\t             * @param {Object} properties The properties to mix in.\n\t             *\n\t             * @example\n\t             *\n\t             *     MyType.mixIn({\n\t             *         field: 'value'\n\t             *     });\n\t             */\n\t            mixIn: function (properties) {\n\t                for (var propertyName in properties) {\n\t                    if (properties.hasOwnProperty(propertyName)) {\n\t                        this[propertyName] = properties[propertyName];\n\t                    }\n\t                }\n\n\t                // IE won't copy toString using the loop above\n\t                if (properties.hasOwnProperty('toString')) {\n\t                    this.toString = properties.toString;\n\t                }\n\t            },\n\n\t            /**\n\t             * Creates a copy of this object.\n\t             *\n\t             * @return {Object} The clone.\n\t             *\n\t             * @example\n\t             *\n\t             *     var clone = instance.clone();\n\t             */\n\t            clone: function () {\n\t                return this.init.prototype.extend(this);\n\t            }\n\t        };\n\t    }());\n\n\t    /**\n\t     * An array of 32-bit words.\n\t     *\n\t     * @property {Array} words The array of 32-bit words.\n\t     * @property {number} sigBytes The number of significant bytes in this word array.\n\t     */\n\t    var WordArray = C_lib.WordArray = Base.extend({\n\t        /**\n\t         * Initializes a newly created word array.\n\t         *\n\t         * @param {Array} words (Optional) An array of 32-bit words.\n\t         * @param {number} sigBytes (Optional) The number of significant bytes in the words.\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.lib.WordArray.create();\n\t         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);\n\t         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);\n\t         */\n\t        init: function (words, sigBytes) {\n\t            words = this.words = words || [];\n\n\t            if (sigBytes != undefined) {\n\t                this.sigBytes = sigBytes;\n\t            } else {\n\t                this.sigBytes = words.length * 4;\n\t            }\n\t        },\n\n\t        /**\n\t         * Converts this word array to a string.\n\t         *\n\t         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex\n\t         *\n\t         * @return {string} The stringified word array.\n\t         *\n\t         * @example\n\t         *\n\t         *     var string = wordArray + '';\n\t         *     var string = wordArray.toString();\n\t         *     var string = wordArray.toString(CryptoJS.enc.Utf8);\n\t         */\n\t        toString: function (encoder) {\n\t            return (encoder || Hex).stringify(this);\n\t        },\n\n\t        /**\n\t         * Concatenates a word array to this word array.\n\t         *\n\t         * @param {WordArray} wordArray The word array to append.\n\t         *\n\t         * @return {WordArray} This word array.\n\t         *\n\t         * @example\n\t         *\n\t         *     wordArray1.concat(wordArray2);\n\t         */\n\t        concat: function (wordArray) {\n\t            // Shortcuts\n\t            var thisWords = this.words;\n\t            var thatWords = wordArray.words;\n\t            var thisSigBytes = this.sigBytes;\n\t            var thatSigBytes = wordArray.sigBytes;\n\n\t            // Clamp excess bits\n\t            this.clamp();\n\n\t            // Concat\n\t            if (thisSigBytes % 4) {\n\t                // Copy one byte at a time\n\t                for (var i = 0; i < thatSigBytes; i++) {\n\t                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n\t                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);\n\t                }\n\t            } else {\n\t                // Copy one word at a time\n\t                for (var j = 0; j < thatSigBytes; j += 4) {\n\t                    thisWords[(thisSigBytes + j) >>> 2] = thatWords[j >>> 2];\n\t                }\n\t            }\n\t            this.sigBytes += thatSigBytes;\n\n\t            // Chainable\n\t            return this;\n\t        },\n\n\t        /**\n\t         * Removes insignificant bits.\n\t         *\n\t         * @example\n\t         *\n\t         *     wordArray.clamp();\n\t         */\n\t        clamp: function () {\n\t            // Shortcuts\n\t            var words = this.words;\n\t            var sigBytes = this.sigBytes;\n\n\t            // Clamp\n\t            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);\n\t            words.length = Math.ceil(sigBytes / 4);\n\t        },\n\n\t        /**\n\t         * Creates a copy of this word array.\n\t         *\n\t         * @return {WordArray} The clone.\n\t         *\n\t         * @example\n\t         *\n\t         *     var clone = wordArray.clone();\n\t         */\n\t        clone: function () {\n\t            var clone = Base.clone.call(this);\n\t            clone.words = this.words.slice(0);\n\n\t            return clone;\n\t        },\n\n\t        /**\n\t         * Creates a word array filled with random bytes.\n\t         *\n\t         * @param {number} nBytes The number of random bytes to generate.\n\t         *\n\t         * @return {WordArray} The random word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.lib.WordArray.random(16);\n\t         */\n\t        random: function (nBytes) {\n\t            var words = [];\n\n\t            for (var i = 0; i < nBytes; i += 4) {\n\t                words.push(cryptoSecureRandomInt());\n\t            }\n\n\t            return new WordArray.init(words, nBytes);\n\t        }\n\t    });\n\n\t    /**\n\t     * Encoder namespace.\n\t     */\n\t    var C_enc = C.enc = {};\n\n\t    /**\n\t     * Hex encoding strategy.\n\t     */\n\t    var Hex = C_enc.Hex = {\n\t        /**\n\t         * Converts a word array to a hex string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The hex string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\n\t            // Convert\n\t            var hexChars = [];\n\t            for (var i = 0; i < sigBytes; i++) {\n\t                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n\t                hexChars.push((bite >>> 4).toString(16));\n\t                hexChars.push((bite & 0x0f).toString(16));\n\t            }\n\n\t            return hexChars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a hex string to a word array.\n\t         *\n\t         * @param {string} hexStr The hex string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);\n\t         */\n\t        parse: function (hexStr) {\n\t            // Shortcut\n\t            var hexStrLength = hexStr.length;\n\n\t            // Convert\n\t            var words = [];\n\t            for (var i = 0; i < hexStrLength; i += 2) {\n\t                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);\n\t            }\n\n\t            return new WordArray.init(words, hexStrLength / 2);\n\t        }\n\t    };\n\n\t    /**\n\t     * Latin1 encoding strategy.\n\t     */\n\t    var Latin1 = C_enc.Latin1 = {\n\t        /**\n\t         * Converts a word array to a Latin1 string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The Latin1 string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\n\t            // Convert\n\t            var latin1Chars = [];\n\t            for (var i = 0; i < sigBytes; i++) {\n\t                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n\t                latin1Chars.push(String.fromCharCode(bite));\n\t            }\n\n\t            return latin1Chars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a Latin1 string to a word array.\n\t         *\n\t         * @param {string} latin1Str The Latin1 string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);\n\t         */\n\t        parse: function (latin1Str) {\n\t            // Shortcut\n\t            var latin1StrLength = latin1Str.length;\n\n\t            // Convert\n\t            var words = [];\n\t            for (var i = 0; i < latin1StrLength; i++) {\n\t                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);\n\t            }\n\n\t            return new WordArray.init(words, latin1StrLength);\n\t        }\n\t    };\n\n\t    /**\n\t     * UTF-8 encoding strategy.\n\t     */\n\t    var Utf8 = C_enc.Utf8 = {\n\t        /**\n\t         * Converts a word array to a UTF-8 string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The UTF-8 string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            try {\n\t                return decodeURIComponent(escape(Latin1.stringify(wordArray)));\n\t            } catch (e) {\n\t                throw new Error('Malformed UTF-8 data');\n\t            }\n\t        },\n\n\t        /**\n\t         * Converts a UTF-8 string to a word array.\n\t         *\n\t         * @param {string} utf8Str The UTF-8 string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);\n\t         */\n\t        parse: function (utf8Str) {\n\t            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));\n\t        }\n\t    };\n\n\t    /**\n\t     * Abstract buffered block algorithm template.\n\t     *\n\t     * The property blockSize must be implemented in a concrete subtype.\n\t     *\n\t     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0\n\t     */\n\t    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({\n\t        /**\n\t         * Resets this block algorithm's data buffer to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     bufferedBlockAlgorithm.reset();\n\t         */\n\t        reset: function () {\n\t            // Initial values\n\t            this._data = new WordArray.init();\n\t            this._nDataBytes = 0;\n\t        },\n\n\t        /**\n\t         * Adds new data to this block algorithm's buffer.\n\t         *\n\t         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.\n\t         *\n\t         * @example\n\t         *\n\t         *     bufferedBlockAlgorithm._append('data');\n\t         *     bufferedBlockAlgorithm._append(wordArray);\n\t         */\n\t        _append: function (data) {\n\t            // Convert string to WordArray, else assume WordArray already\n\t            if (typeof data == 'string') {\n\t                data = Utf8.parse(data);\n\t            }\n\n\t            // Append\n\t            this._data.concat(data);\n\t            this._nDataBytes += data.sigBytes;\n\t        },\n\n\t        /**\n\t         * Processes available data blocks.\n\t         *\n\t         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.\n\t         *\n\t         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.\n\t         *\n\t         * @return {WordArray} The processed data.\n\t         *\n\t         * @example\n\t         *\n\t         *     var processedData = bufferedBlockAlgorithm._process();\n\t         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');\n\t         */\n\t        _process: function (doFlush) {\n\t            var processedWords;\n\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\t            var dataSigBytes = data.sigBytes;\n\t            var blockSize = this.blockSize;\n\t            var blockSizeBytes = blockSize * 4;\n\n\t            // Count blocks ready\n\t            var nBlocksReady = dataSigBytes / blockSizeBytes;\n\t            if (doFlush) {\n\t                // Round up to include partial blocks\n\t                nBlocksReady = Math.ceil(nBlocksReady);\n\t            } else {\n\t                // Round down to include only full blocks,\n\t                // less the number of blocks that must remain in the buffer\n\t                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);\n\t            }\n\n\t            // Count words ready\n\t            var nWordsReady = nBlocksReady * blockSize;\n\n\t            // Count bytes ready\n\t            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);\n\n\t            // Process blocks\n\t            if (nWordsReady) {\n\t                for (var offset = 0; offset < nWordsReady; offset += blockSize) {\n\t                    // Perform concrete-algorithm logic\n\t                    this._doProcessBlock(dataWords, offset);\n\t                }\n\n\t                // Remove processed words\n\t                processedWords = dataWords.splice(0, nWordsReady);\n\t                data.sigBytes -= nBytesReady;\n\t            }\n\n\t            // Return processed words\n\t            return new WordArray.init(processedWords, nBytesReady);\n\t        },\n\n\t        /**\n\t         * Creates a copy of this object.\n\t         *\n\t         * @return {Object} The clone.\n\t         *\n\t         * @example\n\t         *\n\t         *     var clone = bufferedBlockAlgorithm.clone();\n\t         */\n\t        clone: function () {\n\t            var clone = Base.clone.call(this);\n\t            clone._data = this._data.clone();\n\n\t            return clone;\n\t        },\n\n\t        _minBufferSize: 0\n\t    });\n\n\t    /**\n\t     * Abstract hasher template.\n\t     *\n\t     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)\n\t     */\n\t    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({\n\t        /**\n\t         * Configuration options.\n\t         */\n\t        cfg: Base.extend(),\n\n\t        /**\n\t         * Initializes a newly created hasher.\n\t         *\n\t         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hasher = CryptoJS.algo.SHA256.create();\n\t         */\n\t        init: function (cfg) {\n\t            // Apply config defaults\n\t            this.cfg = this.cfg.extend(cfg);\n\n\t            // Set initial values\n\t            this.reset();\n\t        },\n\n\t        /**\n\t         * Resets this hasher to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     hasher.reset();\n\t         */\n\t        reset: function () {\n\t            // Reset data buffer\n\t            BufferedBlockAlgorithm.reset.call(this);\n\n\t            // Perform concrete-hasher logic\n\t            this._doReset();\n\t        },\n\n\t        /**\n\t         * Updates this hasher with a message.\n\t         *\n\t         * @param {WordArray|string} messageUpdate The message to append.\n\t         *\n\t         * @return {Hasher} This hasher.\n\t         *\n\t         * @example\n\t         *\n\t         *     hasher.update('message');\n\t         *     hasher.update(wordArray);\n\t         */\n\t        update: function (messageUpdate) {\n\t            // Append\n\t            this._append(messageUpdate);\n\n\t            // Update the hash\n\t            this._process();\n\n\t            // Chainable\n\t            return this;\n\t        },\n\n\t        /**\n\t         * Finalizes the hash computation.\n\t         * Note that the finalize operation is effectively a destructive, read-once operation.\n\t         *\n\t         * @param {WordArray|string} messageUpdate (Optional) A final message update.\n\t         *\n\t         * @return {WordArray} The hash.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hash = hasher.finalize();\n\t         *     var hash = hasher.finalize('message');\n\t         *     var hash = hasher.finalize(wordArray);\n\t         */\n\t        finalize: function (messageUpdate) {\n\t            // Final message update\n\t            if (messageUpdate) {\n\t                this._append(messageUpdate);\n\t            }\n\n\t            // Perform concrete-hasher logic\n\t            var hash = this._doFinalize();\n\n\t            return hash;\n\t        },\n\n\t        blockSize: 512/32,\n\n\t        /**\n\t         * Creates a shortcut function to a hasher's object interface.\n\t         *\n\t         * @param {Hasher} hasher The hasher to create a helper for.\n\t         *\n\t         * @return {Function} The shortcut function.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);\n\t         */\n\t        _createHelper: function (hasher) {\n\t            return function (message, cfg) {\n\t                return new hasher.init(cfg).finalize(message);\n\t            };\n\t        },\n\n\t        /**\n\t         * Creates a shortcut function to the HMAC's object interface.\n\t         *\n\t         * @param {Hasher} hasher The hasher to use in this HMAC helper.\n\t         *\n\t         * @return {Function} The shortcut function.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);\n\t         */\n\t        _createHmacHelper: function (hasher) {\n\t            return function (message, key) {\n\t                return new C_algo.HMAC.init(hasher, key).finalize(message);\n\t            };\n\t        }\n\t    });\n\n\t    /**\n\t     * Algorithm namespace.\n\t     */\n\t    var C_algo = C.algo = {};\n\n\t    return C;\n\t}(Math));\n\n\n\treturn CryptoJS;\n\n}));", ";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var C_enc = C.enc;\n\n\t    /**\n\t     * Base64 encoding strategy.\n\t     */\n\t    var Base64 = C_enc.Base64 = {\n\t        /**\n\t         * Converts a word array to a Base64 string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The Base64 string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\t            var map = this._map;\n\n\t            // Clamp excess bits\n\t            wordArray.clamp();\n\n\t            // Convert\n\t            var base64Chars = [];\n\t            for (var i = 0; i < sigBytes; i += 3) {\n\t                var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;\n\t                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;\n\t                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;\n\n\t                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;\n\n\t                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {\n\t                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));\n\t                }\n\t            }\n\n\t            // Add padding\n\t            var paddingChar = map.charAt(64);\n\t            if (paddingChar) {\n\t                while (base64Chars.length % 4) {\n\t                    base64Chars.push(paddingChar);\n\t                }\n\t            }\n\n\t            return base64Chars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a Base64 string to a word array.\n\t         *\n\t         * @param {string} base64Str The Base64 string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Base64.parse(base64String);\n\t         */\n\t        parse: function (base64Str) {\n\t            // Shortcuts\n\t            var base64StrLength = base64Str.length;\n\t            var map = this._map;\n\t            var reverseMap = this._reverseMap;\n\n\t            if (!reverseMap) {\n\t                    reverseMap = this._reverseMap = [];\n\t                    for (var j = 0; j < map.length; j++) {\n\t                        reverseMap[map.charCodeAt(j)] = j;\n\t                    }\n\t            }\n\n\t            // Ignore padding\n\t            var paddingChar = map.charAt(64);\n\t            if (paddingChar) {\n\t                var paddingIndex = base64Str.indexOf(paddingChar);\n\t                if (paddingIndex !== -1) {\n\t                    base64StrLength = paddingIndex;\n\t                }\n\t            }\n\n\t            // Convert\n\t            return parseLoop(base64Str, base64StrLength, reverseMap);\n\n\t        },\n\n\t        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='\n\t    };\n\n\t    function parseLoop(base64Str, base64StrLength, reverseMap) {\n\t      var words = [];\n\t      var nBytes = 0;\n\t      for (var i = 0; i < base64StrLength; i++) {\n\t          if (i % 4) {\n\t              var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << ((i % 4) * 2);\n\t              var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> (6 - (i % 4) * 2);\n\t              var bitsCombined = bits1 | bits2;\n\t              words[nBytes >>> 2] |= bitsCombined << (24 - (nBytes % 4) * 8);\n\t              nBytes++;\n\t          }\n\t      }\n\t      return WordArray.create(words, nBytes);\n\t    }\n\t}());\n\n\n\treturn CryptoJS.enc.Base64;\n\n}));", ";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var Hasher = C_lib.Hasher;\n\t    var C_algo = C.algo;\n\n\t    // Reusable object\n\t    var W = [];\n\n\t    /**\n\t     * SHA-1 hash algorithm.\n\t     */\n\t    var SHA1 = C_algo.SHA1 = Hasher.extend({\n\t        _doReset: function () {\n\t            this._hash = new WordArray.init([\n\t                0x67452301, 0xefcdab89,\n\t                0x98badcfe, 0x10325476,\n\t                0xc3d2e1f0\n\t            ]);\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\t            // Shortcut\n\t            var H = this._hash.words;\n\n\t            // Working variables\n\t            var a = H[0];\n\t            var b = H[1];\n\t            var c = H[2];\n\t            var d = H[3];\n\t            var e = H[4];\n\n\t            // Computation\n\t            for (var i = 0; i < 80; i++) {\n\t                if (i < 16) {\n\t                    W[i] = M[offset + i] | 0;\n\t                } else {\n\t                    var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\n\t                    W[i] = (n << 1) | (n >>> 31);\n\t                }\n\n\t                var t = ((a << 5) | (a >>> 27)) + e + W[i];\n\t                if (i < 20) {\n\t                    t += ((b & c) | (~b & d)) + 0x5a827999;\n\t                } else if (i < 40) {\n\t                    t += (b ^ c ^ d) + 0x6ed9eba1;\n\t                } else if (i < 60) {\n\t                    t += ((b & c) | (b & d) | (c & d)) - 0x70e44324;\n\t                } else /* if (i < 80) */ {\n\t                    t += (b ^ c ^ d) - 0x359d3e2a;\n\t                }\n\n\t                e = d;\n\t                d = c;\n\t                c = (b << 30) | (b >>> 2);\n\t                b = a;\n\t                a = t;\n\t            }\n\n\t            // Intermediate hash value\n\t            H[0] = (H[0] + a) | 0;\n\t            H[1] = (H[1] + b) | 0;\n\t            H[2] = (H[2] + c) | 0;\n\t            H[3] = (H[3] + d) | 0;\n\t            H[4] = (H[4] + e) | 0;\n\t        },\n\n\t        _doFinalize: function () {\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\n\t            var nBitsTotal = this._nDataBytes * 8;\n\t            var nBitsLeft = data.sigBytes * 8;\n\n\t            // Add padding\n\t            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;\n\t            data.sigBytes = dataWords.length * 4;\n\n\t            // Hash final blocks\n\t            this._process();\n\n\t            // Return final computed hash\n\t            return this._hash;\n\t        },\n\n\t        clone: function () {\n\t            var clone = Hasher.clone.call(this);\n\t            clone._hash = this._hash.clone();\n\n\t            return clone;\n\t        }\n\t    });\n\n\t    /**\n\t     * Shortcut function to the hasher's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     *\n\t     * @return {WordArray} The hash.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hash = CryptoJS.SHA1('message');\n\t     *     var hash = CryptoJS.SHA1(wordArray);\n\t     */\n\t    C.SHA1 = Hasher._createHelper(SHA1);\n\n\t    /**\n\t     * Shortcut function to the HMAC's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     * @param {WordArray|string} key The secret key.\n\t     *\n\t     * @return {WordArray} The HMAC.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hmac = CryptoJS.HmacSHA1(message, key);\n\t     */\n\t    C.HmacSHA1 = Hasher._createHmacHelper(SHA1);\n\t}());\n\n\n\treturn CryptoJS.SHA1;\n\n}));", ";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var Base = C_lib.Base;\n\t    var C_enc = C.enc;\n\t    var Utf8 = C_enc.Utf8;\n\t    var C_algo = C.algo;\n\n\t    /**\n\t     * HMAC algorithm.\n\t     */\n\t    var HMAC = C_algo.HMAC = Base.extend({\n\t        /**\n\t         * Initializes a newly created HMAC.\n\t         *\n\t         * @param {Hasher} hasher The hash algorithm to use.\n\t         * @param {WordArray|string} key The secret key.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);\n\t         */\n\t        init: function (hasher, key) {\n\t            // Init hasher\n\t            hasher = this._hasher = new hasher.init();\n\n\t            // Convert string to WordArray, else assume WordArray already\n\t            if (typeof key == 'string') {\n\t                key = Utf8.parse(key);\n\t            }\n\n\t            // Shortcuts\n\t            var hasherBlockSize = hasher.blockSize;\n\t            var hasherBlockSizeBytes = hasherBlockSize * 4;\n\n\t            // Allow arbitrary length keys\n\t            if (key.sigBytes > hasherBlockSizeBytes) {\n\t                key = hasher.finalize(key);\n\t            }\n\n\t            // Clamp excess bits\n\t            key.clamp();\n\n\t            // Clone key for inner and outer pads\n\t            var oKey = this._oKey = key.clone();\n\t            var iKey = this._iKey = key.clone();\n\n\t            // Shortcuts\n\t            var oKeyWords = oKey.words;\n\t            var iKeyWords = iKey.words;\n\n\t            // XOR keys with pad constants\n\t            for (var i = 0; i < hasherBlockSize; i++) {\n\t                oKeyWords[i] ^= 0x5c5c5c5c;\n\t                iKeyWords[i] ^= 0x36363636;\n\t            }\n\t            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;\n\n\t            // Set initial values\n\t            this.reset();\n\t        },\n\n\t        /**\n\t         * Resets this HMAC to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     hmacHasher.reset();\n\t         */\n\t        reset: function () {\n\t            // Shortcut\n\t            var hasher = this._hasher;\n\n\t            // Reset\n\t            hasher.reset();\n\t            hasher.update(this._iKey);\n\t        },\n\n\t        /**\n\t         * Updates this HMAC with a message.\n\t         *\n\t         * @param {WordArray|string} messageUpdate The message to append.\n\t         *\n\t         * @return {HMAC} This HMAC instance.\n\t         *\n\t         * @example\n\t         *\n\t         *     hmacHasher.update('message');\n\t         *     hmacHasher.update(wordArray);\n\t         */\n\t        update: function (messageUpdate) {\n\t            this._hasher.update(messageUpdate);\n\n\t            // Chainable\n\t            return this;\n\t        },\n\n\t        /**\n\t         * Finalizes the HMAC computation.\n\t         * Note that the finalize operation is effectively a destructive, read-once operation.\n\t         *\n\t         * @param {WordArray|string} messageUpdate (Optional) A final message update.\n\t         *\n\t         * @return {WordArray} The HMAC.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hmac = hmacHasher.finalize();\n\t         *     var hmac = hmacHasher.finalize('message');\n\t         *     var hmac = hmacHasher.finalize(wordArray);\n\t         */\n\t        finalize: function (messageUpdate) {\n\t            // Shortcut\n\t            var hasher = this._hasher;\n\n\t            // Compute HMAC\n\t            var innerHash = hasher.finalize(messageUpdate);\n\t            hasher.reset();\n\t            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));\n\n\t            return hmac;\n\t        }\n\t    });\n\t}());\n\n\n}));", ";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./sha1\"), require(\"./hmac\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./sha1\", \"./hmac\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\treturn CryptoJS.HmacSHA1;\n\n}));", null, "'use strict';\nmodule.exports = str => encodeURIComponent(str).replace(/[!'()*]/g, x => `%${x.charCodeAt(0).toString(16).toUpperCase()}`);\n", "'use strict';\nvar token = '%[a-f0-9]{2}';\nvar singleMatcher = new RegExp('(' + token + ')|([^%]+?)', 'gi');\nvar multiMatcher = new RegExp('(' + token + ')+', 'gi');\n\nfunction decodeComponents(components, split) {\n\ttry {\n\t\t// Try to decode the entire string first\n\t\treturn [decodeURIComponent(components.join(''))];\n\t} catch (err) {\n\t\t// Do nothing\n\t}\n\n\tif (components.length === 1) {\n\t\treturn components;\n\t}\n\n\tsplit = split || 1;\n\n\t// Split the array in 2 parts\n\tvar left = components.slice(0, split);\n\tvar right = components.slice(split);\n\n\treturn Array.prototype.concat.call([], decodeComponents(left), decodeComponents(right));\n}\n\nfunction decode(input) {\n\ttry {\n\t\treturn decodeURIComponent(input);\n\t} catch (err) {\n\t\tvar tokens = input.match(singleMatcher) || [];\n\n\t\tfor (var i = 1; i < tokens.length; i++) {\n\t\t\tinput = decodeComponents(tokens, i).join('');\n\n\t\t\ttokens = input.match(singleMatcher) || [];\n\t\t}\n\n\t\treturn input;\n\t}\n}\n\nfunction customDecodeURIComponent(input) {\n\t// Keep track of all the replacements and prefill the map with the `BOM`\n\tvar replaceMap = {\n\t\t'%FE%FF': '\\uFFFD\\uFFFD',\n\t\t'%FF%FE': '\\uFFFD\\uFFFD'\n\t};\n\n\tvar match = multiMatcher.exec(input);\n\twhile (match) {\n\t\ttry {\n\t\t\t// Decode as big chunks as possible\n\t\t\treplaceMap[match[0]] = decodeURIComponent(match[0]);\n\t\t} catch (err) {\n\t\t\tvar result = decode(match[0]);\n\n\t\t\tif (result !== match[0]) {\n\t\t\t\treplaceMap[match[0]] = result;\n\t\t\t}\n\t\t}\n\n\t\tmatch = multiMatcher.exec(input);\n\t}\n\n\t// Add `%C2` at the end of the map to make sure it does not replace the combinator before everything else\n\treplaceMap['%C2'] = '\\uFFFD';\n\n\tvar entries = Object.keys(replaceMap);\n\n\tfor (var i = 0; i < entries.length; i++) {\n\t\t// Replace all decoded components\n\t\tvar key = entries[i];\n\t\tinput = input.replace(new RegExp(key, 'g'), replaceMap[key]);\n\t}\n\n\treturn input;\n}\n\nmodule.exports = function (encodedURI) {\n\tif (typeof encodedURI !== 'string') {\n\t\tthrow new TypeError('Expected `encodedURI` to be of type `string`, got `' + typeof encodedURI + '`');\n\t}\n\n\ttry {\n\t\tencodedURI = encodedURI.replace(/\\+/g, ' ');\n\n\t\t// Try the built in decoder first\n\t\treturn decodeURIComponent(encodedURI);\n\t} catch (err) {\n\t\t// Fallback to a more advanced decoder\n\t\treturn customDecodeURIComponent(encodedURI);\n\t}\n};\n", "'use strict';\n\nmodule.exports = (string, separator) => {\n\tif (!(typeof string === 'string' && typeof separator === 'string')) {\n\t\tthrow new TypeError('Expected the arguments to be of type `string`');\n\t}\n\n\tif (separator === '') {\n\t\treturn [string];\n\t}\n\n\tconst separatorIndex = string.indexOf(separator);\n\n\tif (separatorIndex === -1) {\n\t\treturn [string];\n\t}\n\n\treturn [\n\t\tstring.slice(0, separatorIndex),\n\t\tstring.slice(separatorIndex + separator.length)\n\t];\n};\n", "'use strict';\nmodule.exports = function (obj, predicate) {\n\tvar ret = {};\n\tvar keys = Object.keys(obj);\n\tvar isArr = Array.isArray(predicate);\n\n\tfor (var i = 0; i < keys.length; i++) {\n\t\tvar key = keys[i];\n\t\tvar val = obj[key];\n\n\t\tif (isArr ? predicate.indexOf(key) !== -1 : predicate(key, val, obj)) {\n\t\t\tret[key] = val;\n\t\t}\n\t}\n\n\treturn ret;\n};\n", "'use strict';\nconst strictUriEncode = require('strict-uri-encode');\nconst decodeComponent = require('decode-uri-component');\nconst splitOnFirst = require('split-on-first');\nconst filterObject = require('filter-obj');\n\nconst isNullOrUndefined = value => value === null || value === undefined;\n\nconst encodeFragmentIdentifier = Symbol('encodeFragmentIdentifier');\n\nfunction encoderForArrayFormat(options) {\n\tswitch (options.arrayFormat) {\n\t\tcase 'index':\n\t\t\treturn key => (result, value) => {\n\t\t\t\tconst index = result.length;\n\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined ||\n\t\t\t\t\t(options.skipNull && value === null) ||\n\t\t\t\t\t(options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [...result, [encode(key, options), '[', index, ']'].join('')];\n\t\t\t\t}\n\n\t\t\t\treturn [\n\t\t\t\t\t...result,\n\t\t\t\t\t[encode(key, options), '[', encode(index, options), ']=', encode(value, options)].join('')\n\t\t\t\t];\n\t\t\t};\n\n\t\tcase 'bracket':\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined ||\n\t\t\t\t\t(options.skipNull && value === null) ||\n\t\t\t\t\t(options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [...result, [encode(key, options), '[]'].join('')];\n\t\t\t\t}\n\n\t\t\t\treturn [...result, [encode(key, options), '[]=', encode(value, options)].join('')];\n\t\t\t};\n\n\t\tcase 'colon-list-separator':\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined ||\n\t\t\t\t\t(options.skipNull && value === null) ||\n\t\t\t\t\t(options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [...result, [encode(key, options), ':list='].join('')];\n\t\t\t\t}\n\n\t\t\t\treturn [...result, [encode(key, options), ':list=', encode(value, options)].join('')];\n\t\t\t};\n\n\t\tcase 'comma':\n\t\tcase 'separator':\n\t\tcase 'bracket-separator': {\n\t\t\tconst keyValueSep = options.arrayFormat === 'bracket-separator' ?\n\t\t\t\t'[]=' :\n\t\t\t\t'=';\n\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined ||\n\t\t\t\t\t(options.skipNull && value === null) ||\n\t\t\t\t\t(options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\t// Translate null to an empty string so that it doesn't serialize as 'null'\n\t\t\t\tvalue = value === null ? '' : value;\n\n\t\t\t\tif (result.length === 0) {\n\t\t\t\t\treturn [[encode(key, options), keyValueSep, encode(value, options)].join('')];\n\t\t\t\t}\n\n\t\t\t\treturn [[result, encode(value, options)].join(options.arrayFormatSeparator)];\n\t\t\t};\n\t\t}\n\n\t\tdefault:\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined ||\n\t\t\t\t\t(options.skipNull && value === null) ||\n\t\t\t\t\t(options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [...result, encode(key, options)];\n\t\t\t\t}\n\n\t\t\t\treturn [...result, [encode(key, options), '=', encode(value, options)].join('')];\n\t\t\t};\n\t}\n}\n\nfunction parserForArrayFormat(options) {\n\tlet result;\n\n\tswitch (options.arrayFormat) {\n\t\tcase 'index':\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tresult = /\\[(\\d*)\\]$/.exec(key);\n\n\t\t\t\tkey = key.replace(/\\[\\d*\\]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = {};\n\t\t\t\t}\n\n\t\t\t\taccumulator[key][result[1]] = value;\n\t\t\t};\n\n\t\tcase 'bracket':\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tresult = /(\\[\\])$/.exec(key);\n\t\t\t\tkey = key.replace(/\\[\\]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = [value];\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\n\t\t\t};\n\n\t\tcase 'colon-list-separator':\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tresult = /(:list)$/.exec(key);\n\t\t\t\tkey = key.replace(/:list$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = [value];\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\n\t\t\t};\n\n\t\tcase 'comma':\n\t\tcase 'separator':\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tconst isArray = typeof value === 'string' && value.includes(options.arrayFormatSeparator);\n\t\t\t\tconst isEncodedArray = (typeof value === 'string' && !isArray && decode(value, options).includes(options.arrayFormatSeparator));\n\t\t\t\tvalue = isEncodedArray ? decode(value, options) : value;\n\t\t\t\tconst newValue = isArray || isEncodedArray ? value.split(options.arrayFormatSeparator).map(item => decode(item, options)) : value === null ? value : decode(value, options);\n\t\t\t\taccumulator[key] = newValue;\n\t\t\t};\n\n\t\tcase 'bracket-separator':\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tconst isArray = /(\\[\\])$/.test(key);\n\t\t\t\tkey = key.replace(/\\[\\]$/, '');\n\n\t\t\t\tif (!isArray) {\n\t\t\t\t\taccumulator[key] = value ? decode(value, options) : value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst arrayValue = value === null ?\n\t\t\t\t\t[] :\n\t\t\t\t\tvalue.split(options.arrayFormatSeparator).map(item => decode(item, options));\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = arrayValue;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], arrayValue);\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\n\t\t\t};\n\t}\n}\n\nfunction validateArrayFormatSeparator(value) {\n\tif (typeof value !== 'string' || value.length !== 1) {\n\t\tthrow new TypeError('arrayFormatSeparator must be single character string');\n\t}\n}\n\nfunction encode(value, options) {\n\tif (options.encode) {\n\t\treturn options.strict ? strictUriEncode(value) : encodeURIComponent(value);\n\t}\n\n\treturn value;\n}\n\nfunction decode(value, options) {\n\tif (options.decode) {\n\t\treturn decodeComponent(value);\n\t}\n\n\treturn value;\n}\n\nfunction keysSorter(input) {\n\tif (Array.isArray(input)) {\n\t\treturn input.sort();\n\t}\n\n\tif (typeof input === 'object') {\n\t\treturn keysSorter(Object.keys(input))\n\t\t\t.sort((a, b) => Number(a) - Number(b))\n\t\t\t.map(key => input[key]);\n\t}\n\n\treturn input;\n}\n\nfunction removeHash(input) {\n\tconst hashStart = input.indexOf('#');\n\tif (hashStart !== -1) {\n\t\tinput = input.slice(0, hashStart);\n\t}\n\n\treturn input;\n}\n\nfunction getHash(url) {\n\tlet hash = '';\n\tconst hashStart = url.indexOf('#');\n\tif (hashStart !== -1) {\n\t\thash = url.slice(hashStart);\n\t}\n\n\treturn hash;\n}\n\nfunction extract(input) {\n\tinput = removeHash(input);\n\tconst queryStart = input.indexOf('?');\n\tif (queryStart === -1) {\n\t\treturn '';\n\t}\n\n\treturn input.slice(queryStart + 1);\n}\n\nfunction parseValue(value, options) {\n\tif (options.parseNumbers && !Number.isNaN(Number(value)) && (typeof value === 'string' && value.trim() !== '')) {\n\t\tvalue = Number(value);\n\t} else if (options.parseBooleans && value !== null && (value.toLowerCase() === 'true' || value.toLowerCase() === 'false')) {\n\t\tvalue = value.toLowerCase() === 'true';\n\t}\n\n\treturn value;\n}\n\nfunction parse(query, options) {\n\toptions = Object.assign({\n\t\tdecode: true,\n\t\tsort: true,\n\t\tarrayFormat: 'none',\n\t\tarrayFormatSeparator: ',',\n\t\tparseNumbers: false,\n\t\tparseBooleans: false\n\t}, options);\n\n\tvalidateArrayFormatSeparator(options.arrayFormatSeparator);\n\n\tconst formatter = parserForArrayFormat(options);\n\n\t// Create an object with no prototype\n\tconst ret = Object.create(null);\n\n\tif (typeof query !== 'string') {\n\t\treturn ret;\n\t}\n\n\tquery = query.trim().replace(/^[?#&]/, '');\n\n\tif (!query) {\n\t\treturn ret;\n\t}\n\n\tfor (const param of query.split('&')) {\n\t\tif (param === '') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tlet [key, value] = splitOnFirst(options.decode ? param.replace(/\\+/g, ' ') : param, '=');\n\n\t\t// Missing `=` should be `null`:\n\t\t// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters\n\t\tvalue = value === undefined ? null : ['comma', 'separator', 'bracket-separator'].includes(options.arrayFormat) ? value : decode(value, options);\n\t\tformatter(decode(key, options), value, ret);\n\t}\n\n\tfor (const key of Object.keys(ret)) {\n\t\tconst value = ret[key];\n\t\tif (typeof value === 'object' && value !== null) {\n\t\t\tfor (const k of Object.keys(value)) {\n\t\t\t\tvalue[k] = parseValue(value[k], options);\n\t\t\t}\n\t\t} else {\n\t\t\tret[key] = parseValue(value, options);\n\t\t}\n\t}\n\n\tif (options.sort === false) {\n\t\treturn ret;\n\t}\n\n\treturn (options.sort === true ? Object.keys(ret).sort() : Object.keys(ret).sort(options.sort)).reduce((result, key) => {\n\t\tconst value = ret[key];\n\t\tif (Boolean(value) && typeof value === 'object' && !Array.isArray(value)) {\n\t\t\t// Sort object keys, not values\n\t\t\tresult[key] = keysSorter(value);\n\t\t} else {\n\t\t\tresult[key] = value;\n\t\t}\n\n\t\treturn result;\n\t}, Object.create(null));\n}\n\nexports.extract = extract;\nexports.parse = parse;\n\nexports.stringify = (object, options) => {\n\tif (!object) {\n\t\treturn '';\n\t}\n\n\toptions = Object.assign({\n\t\tencode: true,\n\t\tstrict: true,\n\t\tarrayFormat: 'none',\n\t\tarrayFormatSeparator: ','\n\t}, options);\n\n\tvalidateArrayFormatSeparator(options.arrayFormatSeparator);\n\n\tconst shouldFilter = key => (\n\t\t(options.skipNull && isNullOrUndefined(object[key])) ||\n\t\t(options.skipEmptyString && object[key] === '')\n\t);\n\n\tconst formatter = encoderForArrayFormat(options);\n\n\tconst objectCopy = {};\n\n\tfor (const key of Object.keys(object)) {\n\t\tif (!shouldFilter(key)) {\n\t\t\tobjectCopy[key] = object[key];\n\t\t}\n\t}\n\n\tconst keys = Object.keys(objectCopy);\n\n\tif (options.sort !== false) {\n\t\tkeys.sort(options.sort);\n\t}\n\n\treturn keys.map(key => {\n\t\tconst value = object[key];\n\n\t\tif (value === undefined) {\n\t\t\treturn '';\n\t\t}\n\n\t\tif (value === null) {\n\t\t\treturn encode(key, options);\n\t\t}\n\n\t\tif (Array.isArray(value)) {\n\t\t\tif (value.length === 0 && options.arrayFormat === 'bracket-separator') {\n\t\t\t\treturn encode(key, options) + '[]';\n\t\t\t}\n\n\t\t\treturn value\n\t\t\t\t.reduce(formatter(key), [])\n\t\t\t\t.join('&');\n\t\t}\n\n\t\treturn encode(key, options) + '=' + encode(value, options);\n\t}).filter(x => x.length > 0).join('&');\n};\n\nexports.parseUrl = (url, options) => {\n\toptions = Object.assign({\n\t\tdecode: true\n\t}, options);\n\n\tconst [url_, hash] = splitOnFirst(url, '#');\n\n\treturn Object.assign(\n\t\t{\n\t\t\turl: url_.split('?')[0] || '',\n\t\t\tquery: parse(extract(url), options)\n\t\t},\n\t\toptions && options.parseFragmentIdentifier && hash ? {fragmentIdentifier: decode(hash, options)} : {}\n\t);\n};\n\nexports.stringifyUrl = (object, options) => {\n\toptions = Object.assign({\n\t\tencode: true,\n\t\tstrict: true,\n\t\t[encodeFragmentIdentifier]: true\n\t}, options);\n\n\tconst url = removeHash(object.url).split('?')[0] || '';\n\tconst queryFromUrl = exports.extract(object.url);\n\tconst parsedQueryFromUrl = exports.parse(queryFromUrl, {sort: false});\n\n\tconst query = Object.assign(parsedQueryFromUrl, object.query);\n\tlet queryString = exports.stringify(query, options);\n\tif (queryString) {\n\t\tqueryString = `?${queryString}`;\n\t}\n\n\tlet hash = getHash(object.url);\n\tif (object.fragmentIdentifier) {\n\t\thash = `#${options[encodeFragmentIdentifier] ? encode(object.fragmentIdentifier, options) : object.fragmentIdentifier}`;\n\t}\n\n\treturn `${url}${queryString}${hash}`;\n};\n\nexports.pick = (input, filter, options) => {\n\toptions = Object.assign({\n\t\tparseFragmentIdentifier: true,\n\t\t[encodeFragmentIdentifier]: false\n\t}, options);\n\n\tconst {url, query, fragmentIdentifier} = exports.parseUrl(input, options);\n\treturn exports.stringifyUrl({\n\t\turl,\n\t\tquery: filterObject(query, filter),\n\t\tfragmentIdentifier\n\t}, options);\n};\n\nexports.exclude = (input, filter, options) => {\n\tconst exclusionFilter = Array.isArray(filter) ? key => !filter.includes(key) : (key, value) => !filter(key, value);\n\n\treturn exports.pick(input, exclusionFilter, options);\n};\n", "/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LatLng, LatLngBounds, LatLngLiteral } from \"./common\";\n\nimport { encodePath } from \"./util\";\nimport { createSignature} from \"@googlemaps/url-signature\";\nimport { stringify as qs } from \"query-string\";\n\nconst separator = \"|\";\n\nexport function latLngToString(o: LatLng) {\n  if (typeof o === \"string\") {\n    return o;\n  } else if (Array.isArray(o) && o.length === 2) {\n    // no transformation\n  } else if (\"lat\" in o && \"lng\" in o) {\n    o = [o.lat, o.lng];\n  } else if (\"latitude\" in o && \"longitude\" in o) {\n    o = [o.latitude, o.longitude];\n  } else {\n    throw new TypeError();\n  }\n\n  return o\n    .map((x) => {\n      return x.toString();\n    })\n    .join(\",\");\n}\n\nexport function objectToString(o: string | object): string {\n  if (typeof o === \"string\") {\n    return o;\n  } else {\n    let keys = Object.keys(o);\n    keys.sort();\n    return keys.map((k) => k + \":\" + o[k]).join(separator);\n  }\n}\n\nexport function latLngBoundsToString(latLngBounds: string | LatLngBounds) {\n  if (typeof latLngBounds === \"string\") {\n    return latLngBounds;\n  } else {\n    return (\n      latLngToString(latLngBounds.southwest) +\n      separator +\n      latLngToString(latLngBounds.northeast)\n    );\n  }\n}\n\nexport function toLatLngLiteral(o: LatLng): LatLngLiteral {\n  if (typeof o === \"string\") {\n    const parts = o.split(\",\").map(Number);\n    return { lat: parts[0], lng: parts[1] };\n  } else if (Array.isArray(o) && o.length === 2) {\n    const parts = o.map(Number);\n    return { lat: parts[0], lng: parts[1] };\n  } else if (\"lat\" in o && \"lng\" in o) {\n    return o;\n  } else if (\"latitude\" in o && \"longitude\" in o) {\n    return { lat: o.latitude, lng: o.longitude };\n  } else {\n    throw new TypeError();\n  }\n}\n\nexport function latLngArrayToStringMaybeEncoded(o: string | LatLng[]): string {\n  if (typeof o === \"string\") {\n    return o;\n  }\n\n  const concatenated = o.map(latLngToString).join(separator);\n  const encoded = `enc:${encodePath(o.map(toLatLngLiteral))}`;\n\n  if (encoded.length < concatenated.length) {\n    return encoded;\n  }\n\n  return concatenated;\n}\n\nexport type serializerFunction = (any) => string | number | boolean;\nexport type serializerFormat = { [key: string]: serializerFunction };\n\nexport function serializer(\n  format: serializerFormat,\n  baseUrl: string,\n  queryStringOptions: object = {\n    arrayFormat: \"separator\",\n    arrayFormatSeparator: separator,\n  }\n) {\n  return (params: { [key: string]: any }) => {\n    // avoid mutating params\n    const serializedParams = { ...params };\n\n    Object.keys(format).forEach((key: string) => {\n      if (key in serializedParams) {\n        serializedParams[key] = format[key](serializedParams[key]);\n      }\n    });\n\n    if (\"client_id\" in serializedParams && \"client_secret\" in serializedParams) {\n      // Special case to handle premium plan signature\n      return createPremiumPlanQueryString(serializedParams, queryStringOptions, baseUrl);\n    }\n\n    return qs(serializedParams, queryStringOptions);\n  };\n}\n\nexport function toTimestamp(o: \"now\" | number | Date): number | \"now\" {\n  if (o === \"now\") {\n    return o;\n  }\n  if (o instanceof Date) {\n    return Math.round(Number(o) / 1000);\n  }\n  return o;\n}\n\nexport function createPremiumPlanQueryString(\n  serializedParams: { [key: string]: string },\n  queryStringOptions: object,\n  baseUrl: string,\n): string {\n  serializedParams.client = serializedParams.client_id;\n  const clientSecret = serializedParams.client_secret;\n  delete serializedParams.client_id;\n  delete serializedParams.client_secret;\n\n  const partialQueryString = qs(serializedParams, queryStringOptions);\n  const unsignedUrl = `${baseUrl}?${partialQueryString}`;\n  const signature =  createSignature(unsignedUrl, clientSecret);\n\n  // The signature must come last\n  return `${partialQueryString}&signature=${signature}`;\n}\n", "/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AxiosInstance, AxiosRequestConfig, AxiosResponse } from \"axios\";\nimport {\n  DirectionsRoute,\n  GeocodedWaypoint,\n  Language,\n  LatLng,\n  RequestParams,\n  ResponseData,\n  TrafficModel,\n  TransitMode,\n  TransitRoutingPreference,\n  TravelMode,\n  TravelRestriction,\n  UnitSystem,\n} from \"./common\";\nimport { latLngToString, serializer, toTimestamp } from \"./serialize\";\n\nimport { defaultAxiosInstance } from \"./client\";\n\nexport interface DirectionsRequest extends Partial<AxiosRequestConfig> {\n  params: {\n    /**\n     * The address, textual latitude/longitude value, or place ID from which you wish to calculate directions.\n     *  - If you pass an address, the Directions service geocodes the string and converts it to a latitude/longitude coordinate\n     *    to calculate directions. This coordinate may be different from that returned by the Geocoding API, for example a building\n     *    entrance rather than its center.\n     *\n     *    `origin=24+Sussex+Drive+Ottawa+ON`\n     *\n     *  - If you pass coordinates, they are used unchanged to calculate directions. Ensure that no space exists between the latitude\n     *    and longitude values.\n     *\n     *    `origin=41.43206,-81.38992`\n     *\n     *  - Place IDs must be prefixed with `place_id:`. The place ID may only be specified if the request includes an API key or a\n     *    Google Maps APIs Premium Plan client ID. You can retrieve place IDs from the Geocoding API and the Places SDK\n     *    (including Place Autocomplete). For an example using place IDs from Place Autocomplete, see [Place Autocomplete and\n     *    Directions](https://developers.google.com/maps/documentation/javascript/examples/places-autocomplete-directions).\n     *\n     *    `origin=place_id:ChIJ3S-JXmauEmsRUcIaWtf4MzE`\n     */\n    origin: LatLng;\n    /**\n     * The address, textual latitude/longitude value, or place ID to which you wish to calculate directions.\n     * The options for the `destination` parameter are the same as for the `origin` parameter, described above\n     */\n    destination: LatLng;\n    /**\n     * Specifies the mode of transport to use when calculating directions\n     *\n     * @default TravelMode.driving\n     */\n    mode?: TravelMode;\n    /**\n     * Specifies an array of waypoints.\n     * Waypoints alter a route by routing it through the specified location(s).\n     * A waypoint is specified as a latitude/longitude coordinate, an encoded polyline, a place ID, or an address which will be geocoded.\n     * Encoded polylines must be prefixed with `enc:` and followed by a colon (`:`). Place IDs must be prefixed with `place_id:`.\n     * The place ID may only be specified if the request includes an API key or a Google Maps APIs Premium Plan client ID.\n     * Waypoints are only supported for driving, walking and bicycling directions.\n     */\n    waypoints?: (string | LatLng)[];\n    /**\n     * If set to `true`, specifies that the Directions service may provide more than one route alternative in the response.\n     * Note that providing route alternatives may increase the response time from the server.\n     */\n    alternatives?: boolean;\n    /** Indicates that the calculated route(s) should avoid the indicated features. */\n    avoid?: TravelRestriction[];\n    /**\n     * The language in which to return results.\n     *\n     *  - If `language` is not supplied, the API attempts to use the preferred language as specified in the `Accept-Language` header,\n     *    or the native language of the domain from which the request is sent.\n     *  - The API does its best to provide a street address that is readable for both the user and locals. To achieve that goal,\n     *    it returns street addresses in the local language, transliterated to a script readable by the user if necessary,\n     *    observing the preferred language. All other addresses are returned in the preferred language.\n     *    Address components are all returned in the same language, which is chosen from the first component.\n     *  - If a name is not available in the preferred language, the API uses the closest match.\n     *  - The preferred language has a small influence on the set of results that the API chooses to return,\n     *    and the order in which they are returned. The geocoder interprets abbreviations differently depending on language,\n     *    such as the abbreviations for street types, or synonyms that may be valid in one language but not in another.\n     *    For example, utca and tér are synonyms for street in Hungarian.\n     */\n    language?: Language;\n    /** Specifies the unit system to use when displaying results. */\n    units?: UnitSystem;\n    /** Specifies the region code, specified as a ccTLD (\"top-level domain\") two-character value. */\n    region?: string;\n    /**\n     * Specifies the desired time of arrival for transit directions, in seconds since midnight, January 1, 1970 UTC.\n     * You can specify either `departure_time` or `arrival_time`, but not both.\n     * Note that `arrival_time` must be specified as an integer.\n     */\n    arrival_time?: Date | number;\n    /**\n     * Specifies the desired time of departure. You can specify the time as an integer in seconds since midnight, January 1, 1970 UTC.\n     * Alternatively, you can specify a value of `now`, which sets the departure time to the current time (correct to the nearest second).\n     *\n     * The departure time may be specified in two cases:\n     *  - For requests where the travel mode is transit: You can optionally specify one of `departure_time` or `arrival_time`.\n     *    If neither time is specified, the `departure_time` defaults to now (that is, the departure time defaults to the current time).\n     *  - For requests where the travel mode is driving: You can specify the `departure_time` to receive a route and trip duration\n     *    (response field: `duration_in_traffic`) that take traffic conditions into account.\n     *    This option is only available if the request contains a valid API key, or a valid Google Maps APIs Premium Plan client ID\n     *    and signature. The `departure_time` must be set to the current time or some time in the future. It cannot be in the past.\n     */\n    departure_time?: Date | number | \"now\";\n    /**\n     * Specifies the assumptions to use when calculating time in traffic.\n     * This setting affects the value returned in the `duration_in_traffic` field in the response, which contains the predicted time\n     * in traffic based on historical averages. The `traffic_model` parameter may only be specified for driving directions\n     * where the request includes a `departure_time`, and only if the request includes an API key or a Google Maps APIs Premium Plan client ID.\n     *\n     * The default value of `best_guess` will give the most useful predictions for the vast majority of use cases.\n     * It is possible the `best_guess` travel time prediction may be *shorter* than `optimistic`, or alternatively,\n     * *longer* than `pessimistic`, due to the way the `best_guess` prediction model integrates live traffic information.\n     *\n     * @default TrafficModel.best_guess\n     */\n    traffic_model?: TrafficModel;\n    /**\n     * Specifies one or more preferred modes of transit.\n     * This parameter may only be specified for transit directions, and only if the request includes an API key or\n     * a Google Maps APIs Premium Plan client ID.\n     */\n    transit_mode?: TransitMode[];\n    /**\n     * Specifies preferences for transit routes.\n     * Using this parameter, you can bias the options returned, rather than accepting the default best route chosen by the API.\n     * This parameter may only be specified for transit directions, and only if the request includes an API key or\n     * a Google Maps APIs Premium Plan client ID.\n     */\n    transit_routing_preference?: TransitRoutingPreference;\n    /** Wherever to optimize the provided route by rearranging the waypoints in a more efficient order. */\n    optimize?: boolean;\n  } & RequestParams;\n}\nexport interface DirectionsResponseData extends ResponseData {\n  /**\n   * contains an array with details about the geocoding of origin, destination and waypoints.\n   *\n   * These details will not be present for waypoints specified as textual latitude/longitude values if the service returns no results.\n   * This is because such waypoints are only reverse geocoded to obtain their representative address after a route has been found.\n   * An empty JSON object will occupy the corresponding places in the `geocoded_waypoints` array.\n   */\n  geocoded_waypoints: GeocodedWaypoint[];\n  /**\n   * contains an array of routes from the origin to the destination.\n   *\n   * When the Directions API returns results, it places them within a (JSON) `routes` array. Even if the service returns no results\n   * (such as if the origin and/or destination doesn't exist) it still returns an empty `routes` array.\n   * (XML responses consist of zero or more `<route>` elements.)\n   *\n   * Each element of the `routes` array contains a single result from the specified origin and destination.\n   * This route may consist of one or more `legs` depending on whether any waypoints were specified.\n   * As well, the route also contains copyright and warning information which must be displayed to the user in addition to the\n   * routing information.\n   */\n  routes: DirectionsRoute[];\n  /**\n   * contains an array of available travel modes. This field is returned when a request specifies a travel `mode` and gets no results.\n   * The array contains the available travel modes in the countries of the given set of waypoints.\n   * This field is not returned if one or more of the waypoints are `via:` waypoints.\n   */\n  available_travel_modes: string[];\n}\n\nexport interface DirectionsResponse extends AxiosResponse {\n  data: DirectionsResponseData;\n}\n\nexport const defaultUrl =\n  \"https://maps.googleapis.com/maps/api/directions/json\";\n\nexport const defaultParamsSerializer = serializer({\n  origin: latLngToString,\n  destination: latLngToString,\n  waypoints: (o) => o.map(latLngToString),\n  arrival_time: toTimestamp,\n  departure_time: toTimestamp,\n}, defaultUrl);\n\nexport function directions(\n  {\n    params,\n    method = \"get\",\n    url = defaultUrl,\n    paramsSerializer = defaultParamsSerializer,\n    ...config\n  }: DirectionsRequest,\n  axiosInstance: AxiosInstance = defaultAxiosInstance\n): Promise<DirectionsResponse> {\n  const { optimize } = params;\n\n  // optimize is passed as the first of the waypoint pipe array\n  // &waypoints=optimize:true|Barossa+Valley,SA|Clare,SA|Connawarra,SA|McLaren+Vale,SA\n  if (optimize) {\n    params.waypoints = [\"optimize:true\", ...params.waypoints];\n  }\n\n  delete params.optimize;\n\n  return axiosInstance({\n    params,\n    method,\n    url,\n    paramsSerializer,\n    ...config,\n  }) as Promise<DirectionsResponse>;\n}\n", "/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AxiosInstance, AxiosRequestConfig, AxiosResponse } from \"axios\";\nimport {\n  DistanceMatrixRow,\n  LatLng,\n  RequestParams,\n  ResponseData,\n  TrafficModel,\n  TransitMode,\n  TransitRoutingPreference,\n  TravelMode,\n  TravelRestriction,\n  UnitSystem\n} from \"./common\";\nimport { latLngToString, serializer, toTimestamp } from \"./serialize\";\n\nimport { defaultAxiosInstance } from \"./client\";\n\nexport interface DistanceMatrixRequest extends Partial<AxiosRequestConfig> {\n  params: {\n    /**\n     * The starting point for calculating travel distance and time.\n     * You can supply one or more locations separated by the pipe character (`|`), in the form of an address, latitude/longitude coordinates,\n     * or a place ID:\n     *  - If you pass an address, the service geocodes the string and converts it to a latitude/longitude coordinate to calculate distance.\n     *    This coordinate may be different from that returned by the Geocoding API, for example a building entrance rather than its center.\n     *\n     *    `origins=Bobcaygeon+ON|24+Sussex+Drive+Ottawa+ON`\n     *\n     *  - If you pass latitude/longitude coordinates, they are used unchanged to calculate distance.\n     *    Ensure that no space exists between the latitude and longitude values.\n     *\n     *    `origins=41.43206,-81.38992|-33.86748,151.20699`\n     *\n     *  - If you supply a place ID, you must prefix it with `place_id:`.\n     *    You can only specify a place ID if the request includes an API key or a Google Maps APIs Premium Plan client ID.\n     *    You can retrieve place IDs from the Geocoding API and the Places SDK (including Place Autocomplete).\n     *\n     *    `origins=place_id:ChIJ3S-JXmauEmsRUcIaWtf4MzE`\n     *\n     *  - Alternatively, you can supply an encoded set of coordinates using the\n     *    [Encoded Polyline Algorithm](https://developers.google.com/maps/documentation/utilities/polylinealgorithm).\n     *    This is particularly useful if you have a large number of origin points, because the URL is significantly shorter when using\n     *    an encoded polyline.\n     *\n     *     - Encoded polylines must be prefixed with `enc:` and followed by a colon (`:`). For example: `origins=enc:gfo}EtohhU:`\n     *     - You can also include multiple encoded polylines, separated by the pipe character (`|`).\n     *       For example: `origins=enc:wc~oAwquwMdlTxiKtqLyiK:|enc:c~vnAamswMvlTor@tjGi}L:|enc:udymA{~bxM:`\n     */\n    origins: LatLng[];\n    /**\n     * One or more locations to use as the finishing point for calculating travel distance and time.\n     * The options for the destinations parameter are the same as for the origins parameter, described above.\n     */\n    destinations: LatLng[];\n    /**\n     * Specifies the mode of transport to use when calculating distance.\n     * Valid values and other request details are specified in the Travel Modes section of this document.\n     *\n     * @default TravelMode.driving\n     */\n    mode?: TravelMode;\n    /**\n     * The language in which to return results.\n     *  - If `language` is not supplied, the API attempts to use the preferred language as specified in the `Accept-Language` header,\n     *    or the native language of the domain from which the request is sent.\n     *  - The API does its best to provide a street address that is readable for both the user and locals. To achieve that goal,\n     *    it returns street addresses in the local language, transliterated to a script readable by the user if necessary,\n     *    observing the preferred language. All other addresses are returned in the preferred language.\n     *    Address components are all returned in the same language, which is chosen from the first component.\n     *  - If a name is not available in the preferred language, the API uses the closest match.\n     *  - The preferred language has a small influence on the set of results that the API chooses to return,\n     *    and the order in which they are returned. The geocoder interprets abbreviations differently depending on language,\n     *    such as the abbreviations for street types, or synonyms that may be valid in one language but not in another.\n     *    For example, utca and tér are synonyms for street in Hungarian.\n     */\n    language?: string;\n    /**\n     * The region code, specified as a [ccTLD](https://en.wikipedia.org/wiki/CcTLD) (country code top-level domain) two-character value.\n     * Most ccTLD codes are identical to ISO 3166-1 codes, with some exceptions.\n     * This parameter will only influence, not fully restrict, results from the geocoder.\n     * If more relevant results exist outside of the specified region, they may be included.\n     */\n    region?: string;\n    /**\n     * Introduces restrictions to the route. Valid values are specified in the Restrictions section of this document.\n     * Only one restriction can be specified.\n     */\n    avoid?: TravelRestriction[];\n    /** Specifies the unit system to use when expressing distance as text. */\n    units?: UnitSystem;\n    /**\n     * Specifies the desired time of arrival for transit requests, in seconds since midnight, January 1, 1970 UTC.\n     * You can specify either `departure_time` or `arrival_time`, but not both.\n     * Note that `arrival_time` must be specified as an integer.\n     */\n    arrival_time?: Date | number;\n    /**\n     * The desired time of departure. You can specify the time as an integer in seconds since midnight, January 1, 1970 UTC.\n     * Alternatively, you can specify a value of now, which sets the departure time to the current time (correct to the nearest second).\n     *\n     * The departure time may be specified in two cases:\n     *\n     *  - For requests where the travel mode is transit: You can optionally specify one of `departure_time` or `arrival_time`.\n     *    If neither time is specified, the `departure_time` defaults to now (that is, the departure time defaults to the current time).\n     *\n     *  - For requests where the travel mode is driving: You can specify the `departure_time` to receive a route and trip duration\n     *    (response field: `duration_in_traffic`) that take traffic conditions into account.\n     *    This option is only available if the request contains a valid API key, or a valid\n     *    Google Maps APIs Premium Plan client ID and signature.\n     *    The `departure_time` must be set to the current time or some time in the future. It cannot be in the past.\n     *\n     *    **Note:** Distance Matrix requests specifying `departure_time` when `mode=driving` are limited\n     *    to a maximum of 100 elements per request. The number of origins times the number of destinations defines the number of elements.\n     */\n    departure_time?: Date | number;\n    /**\n     * Specifies the assumptions to use when calculating time in traffic.\n     * This setting affects the value returned in the `duration_in_traffic` field in the response,\n     * which contains the predicted time in traffic based on historical averages.\n     * The `traffic_model` parameter may only be specified for requests where the travel mode is `driving`,\n     * and where the request includes a `departure_time`, and only if the request includes an API key or\n     * a Google Maps APIs Premium Plan client ID.\n     *\n     * @default TrafficModel.best_guess\n     */\n    traffic_model?: TrafficModel;\n    /** Specifies one or more preferred modes of transit. This parameter may only be specified for requests where the `mode` is `transit`. */\n    transit_mode?: TransitMode[];\n    /**\n     * Specifies preferences for transit requests. Using this parameter, you can bias the options returned,\n     * rather than accepting the default best route chosen by the API.\n     * This parameter may only be specified for requests where the `mode` is `transit`.\n     */\n    transit_routing_preference?: TransitRoutingPreference;\n  } & RequestParams;\n}\n\nexport interface DistanceMatrixResponseData extends ResponseData {\n  origin_addresses: string[];\n  /**\n   * contains an array of addresses as returned by the API from your original request.\n   * As with origin_addresses, these are localized if appropriate.\n   */\n  destination_addresses: string[];\n  /** contains an array of elements, which in turn each contain a status, duration, and distance element. */\n  rows: DistanceMatrixRow[];\n}\n\nexport interface DistanceMatrixResponse extends AxiosResponse {\n  data: DistanceMatrixResponseData;\n}\n\nexport const defaultUrl =\n  \"https://maps.googleapis.com/maps/api/distancematrix/json\";\n\nexport const defaultParamsSerializer = serializer({\n  origins: o => o.map(latLngToString),\n  destinations: o => o.map(latLngToString),\n  arrival_time: toTimestamp,\n  departure_time: toTimestamp\n}, defaultUrl);\n\nexport function distancematrix(\n  {\n    params,\n    method = \"get\",\n    url = defaultUrl,\n    paramsSerializer = defaultParamsSerializer,\n    ...config\n  }: DistanceMatrixRequest,\n  axiosInstance: AxiosInstance = defaultAxiosInstance\n): Promise<DistanceMatrixResponse> {\n  return axiosInstance({\n    params,\n    method,\n    url,\n    paramsSerializer,\n    ...config\n  }) as Promise<DistanceMatrixResponse>;\n}\n", "/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LatLng, LatLngLiteral, ResponseData, RequestParams } from \"./common\";\nimport { AxiosInstance, AxiosRequestConfig, AxiosResponse } from \"axios\";\nimport { defaultAxiosInstance } from \"./client\";\nimport { serializer, latLngToString } from \"./serialize\";\n\nexport interface PositionalElevationParams {\n  /**\n   * defines the location(s) on the earth from which to return elevation data.\n   * This parameter takes either a single location as a comma-separated {latitude,longitude} pair (e.g. \"40.714728,-73.998672\")\n   * or multiple latitude/longitude pairs passed as an array or as an encoded polyline.\n   */\n  locations: LatLng[];\n}\n\nexport interface SampledPathElevationParams {\n  /**\n   * defines a path on the earth for which to return elevation data. This parameter defines a\n   * set of two or more ordered pairs defining a path along the surface of the earth. This\n   * parameter must be used in conjunction with the samples parameter described below.\n   */\n  path: LatLng[];\n  /**\n   * specifies the number of sample points along a path for which to return elevation data.\n   * The samples parameter divides the given path into an ordered set of equidistant points\n   * along the path.\n   */\n  samples: number;\n}\n\nexport interface ElevationRequest extends Partial<AxiosRequestConfig> {\n  params: (PositionalElevationParams | SampledPathElevationParams) & RequestParams;\n}\nexport interface ElevationResponseData extends ResponseData {\n  results: {\n    /**\n     * A `location` element (containing `lat` and `lng` elements) of the position for which elevation data is being computed.\n     * Note that for path requests, the set of `location` elements will contain the sampled points along the path.\n     */\n    location: LatLngLiteral;\n    /** An `elevation` element indicating the elevation of the location in meters. */\n    elevation: number;\n    /**\n     * A `resolution` value, indicating the maximum distance between data points from which the elevation was interpolated, in meters.\n     * This property will be missing if the resolution is not known.\n     * Note that elevation data becomes more coarse (larger `resolution` values) when multiple points are passed.\n     * To obtain the most accurate elevation value for a point, it should be queried independently.\n     */\n    resolution: number;\n  }[];\n}\n\nexport interface ElevationResponse extends AxiosResponse {\n  data: ElevationResponseData;\n}\n\nexport const defaultUrl = \"https://maps.googleapis.com/maps/api/elevation/json\";\n\nexport const defaultParamsSerializer = serializer({\n  locations: o => o.map(latLngToString),\n  path: o => o.map(latLngToString)\n}, defaultUrl);\n\nexport function elevation(\n  {\n    params,\n    method = \"get\",\n    url = defaultUrl,\n    paramsSerializer = defaultParamsSerializer,\n    ...config\n  }: ElevationRequest,\n  axiosInstance: AxiosInstance = defaultAxiosInstance\n): Promise<ElevationResponse> {\n  return axiosInstance({\n    params,\n    method,\n    url,\n    paramsSerializer,\n    ...config\n  }) as Promise<ElevationResponse>;\n}\n", "/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Language, ResponseData, Place, PlaceInputType, RequestParams } from \"../common\";\nimport { AxiosInstance, AxiosRequestConfig, AxiosResponse } from \"axios\";\nimport { defaultAxiosInstance } from \"../client\";\nimport { serializer } from \"../serialize\";\n\nexport interface FindPlaceFromTextRequest extends Partial<AxiosRequestConfig> {\n  params: {\n    /** The text input specifying which place to search for (for example, a name, address, or phone number). */\n    input: string;\n    /** The type of input. This can be one of either `textQuery` or `phoneNumber`. */\n    inputtype: PlaceInputType;\n    /**\n     * The language code, indicating in which language the results should be returned, if possible.\n     * Searches are also biased to the selected language; results in the selected language may be given a higher ranking\n     */\n    language?: Language;\n    /**\n     * The fields specifying the types of place data to return.\n     *\n     * **Note:** If you omit the fields parameter from a Find Place request, only the place_id for the result will be returned.\n     */\n    fields?: string[];\n    /**\n     * Prefer results in a specified area, by specifying either a radius plus lat/lng, or two lat/lng pairs representing\n     * the points of a rectangle. If this parameter is not specified, the API uses IP address biasing by default.\n     */\n    locationbias?: string;\n    } & RequestParams;\n}\n\nexport interface FindPlaceFromTextResponseData extends ResponseData {\n  candidates: Place[];\n}\n\nexport interface FindPlaceFromTextResponse extends AxiosResponse {\n  data: FindPlaceFromTextResponseData;\n}\n\nexport const defaultUrl =\n  \"https://maps.googleapis.com/maps/api/place/findplacefromtext/json\";\n\nexport const defaultParamsSerializer = serializer({}, defaultUrl, {arrayFormat: \"comma\"});\n\nexport function findPlaceFromText(\n  {\n    params,\n    method = \"get\",\n    url = defaultUrl,\n    paramsSerializer = defaultParamsSerializer,\n    ...config\n  }: FindPlaceFromTextRequest,\n  axiosInstance: AxiosInstance = defaultAxiosInstance\n): Promise<FindPlaceFromTextResponse> {\n  return axiosInstance({\n    params,\n    method,\n    url,\n    paramsSerializer,\n    ...config\n  }) as Promise<FindPlaceFromTextResponse>;\n}\n", "/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LatLngBounds, GeocodeResult, ResponseData, RequestParams } from \"../common\";\nimport { AxiosInstance, AxiosRequestConfig, AxiosResponse } from \"axios\";\nimport { defaultAxiosInstance } from \"../client\";\nimport { serializer, latLngBoundsToString, objectToString } from \"../serialize\";\n\nexport const defaultUrl = \"https://maps.googleapis.com/maps/api/geocode/json\";\n\nexport interface GeocodeComponents {\n  /** matches `postal_code` and `postal_code_prefix`. */\n  postal_code?: string;\n  /**\n   * matches a country name or a two letter [ISO 3166-1](https://en.wikipedia.org/wiki/ISO_3166-1) country code.\n   * **Note:** The API follows the ISO standard for defining countries, and the filtering works best when using\n   * the corresponding ISO code of the country\n   */\n  country?: string;\n  /** matches the long or short name of a route. */\n  route?: string;\n  /** matches against `locality` and `sublocality` types. */\n  locality?: string;\n  /** matches all the administrative_area levels. */\n  administrative_area?: string;\n}\n\nexport interface GeocodeRequest extends Partial<AxiosRequestConfig> {\n  params: {\n    /**\n     * The place_id that you want to geocode. You can retrieve this information from Places API for example.\n     */\n    place_id?: string;\n    /**\n     * The street address that you want to geocode, in the format used by the national postal service of the country concerned.\n     * Additional address elements such as business names and unit, suite or floor numbers should be avoided.\n     */\n    address?: string;\n    /**\n     * The bounding box of the viewport within which to bias geocode results more prominently.\n     * This parameter will only influence, not fully restrict, results from the geocoder.\n     */\n    bounds?: string | LatLngBounds;\n    /**\n     * The language in which to return results.\n     *  - If `language` is not supplied, the geocoder attempts to use the preferred language as specified in the `Accept-Language` header,\n     *    or the native language of the domain from which the request is sent.\n     *  - The geocoder does its best to provide a street address that is readable for both the user and locals.\n     *    To achieve that goal, it returns street addresses in the local language, transliterated to a script readable\n     *    by the user if necessary, observing the preferred language. All other addresses are returned in the preferred language.\n     *    Address components are all returned in the same language, which is chosen from the first component.\n     *  - If a name is not available in the preferred language, the geocoder uses the closest match.\n     *  - The preferred language has a small influence on the set of results that the API chooses to return,\n     *    and the order in which they are returned. The geocoder interprets abbreviations differently depending on language,\n     *    such as the abbreviations for street types, or synonyms that may be valid in one language but not in another.\n     *    For example, utca and tér are synonyms for street in Hungarian.\n     */\n    language?: string;\n    /**\n     * The region code, specified as a ccTLD (\"top-level domain\") two-character value.\n     * This parameter will only influence, not fully restrict, results from the geocoder.\n     */\n    region?: string;\n    /**\n     * A components filter with elements separated by a pipe (`|`).\n     * The components filter is *required* if the request doesn't include an `address`.\n     * Each element in the components filter consists of a `component:value` pair, and fully restricts the results from the geocoder.\n     */\n    components?: string | GeocodeComponents;\n    } & RequestParams;\n}\n\nexport interface GeocodeResponseData extends ResponseData {\n  /**\n   * contains an array of geocoded address information and geometry information.\n   *\n   * Generally, only one entry in the `\"results\"` array is returned for address lookups,though the geocoder may return several results\n   * when address queries are ambiguous.\n   */\n  results: GeocodeResult[];\n}\n\nexport interface GeocodeResponse extends AxiosResponse {\n  data: GeocodeResponseData;\n}\n\nexport const defaultParamsSerializer = serializer({\n  bounds: latLngBoundsToString,\n  components: objectToString\n}, defaultUrl);\n\nexport function geocode(\n  {\n    params,\n    method = \"get\",\n    url = defaultUrl,\n    paramsSerializer = defaultParamsSerializer,\n    ...config\n  }: GeocodeRequest,\n  axiosInstance: AxiosInstance = defaultAxiosInstance\n): Promise<GeocodeResponse> {\n  return axiosInstance({\n    params,\n    method,\n    url,\n    paramsSerializer,\n    ...config\n  }) as Promise<GeocodeResponse>;\n}\n", "/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LatLng, SnappedPoint, RequestParams } from \"../common\";\nimport { AxiosInstance, AxiosRequestConfig, AxiosResponse } from \"axios\";\nimport { defaultAxiosInstance } from \"../client\";\nimport { serializer, latLngToString } from \"../serialize\";\n\nexport interface NearestRoadsRequest extends Partial<AxiosRequestConfig> {\n  params: {\n    /**\n     * A list of latitude/longitude pairs. Latitude and longitude values should be separated by commas.\n     * Coordinates should be separated by the pipe character: \"|\".\n     * For example: `points=60.170880,24.942795|60.170879,24.942796|60.170877,24.942796`.\n     */\n    points: LatLng[];\n    } & RequestParams;\n}\n\nexport interface NearestRoadsResponse extends AxiosResponse {\n  data: {\n    /** An array of snapped points. */\n    snappedPoints: SnappedPoint[];\n  };\n}\n\nexport const defaultUrl = \"https://roads.googleapis.com/v1/nearestRoads\";\nexport const defaultParamsSerializer = serializer({\n  points: o => o.map(latLng => latLngToString(latLng))\n}, defaultUrl);\n\nexport function nearestRoads(\n  {\n    params,\n    method = \"get\",\n    url = defaultUrl,\n    paramsSerializer = defaultParamsSerializer,\n    ...config\n  }: NearestRoadsRequest,\n  axiosInstance: AxiosInstance = defaultAxiosInstance\n): Promise<NearestRoadsResponse> {\n  return axiosInstance({\n    params,\n    method,\n    url,\n    paramsSerializer,\n    ...config\n  }) as Promise<NearestRoadsResponse>;\n}\n", "/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AddressType,\n  LatLng,\n  PredictionSubstring,\n  PredictionTerm,\n  RequestParams,\n  ResponseData,\n  StructuredFormatting\n} from \"../common\";\nimport { AxiosInstance, AxiosRequestConfig, AxiosResponse } from \"axios\";\nimport { latLngToString, serializer } from \"../serialize\";\n\nimport { defaultAxiosInstance } from \"../client\";\n\nexport enum PlaceAutocompleteType {\n  /**\n   * instructs the Place Autocomplete service to return only geocoding results, rather than business results.\n   * Generally, you use this request to disambiguate results where the location specified may be indeterminate.\n   */\n  geocode = \"geocode\",\n  /**\n   * instructs the Place Autocomplete service to return only geocoding results with a precise address.\n   * Generally, you use this request when you know the user will be looking for a fully specified address.\n   */\n  address = \"address\",\n  /** instructs the Place Autocomplete service to return only business results. */\n  establishment = \"establishment\",\n  /**\n   * the `(regions)` type collection instructs the Places service to return any result matching the following types:\n   *  - `locality`\n   *  - `sublocality`\n   *  - `postal_code`\n   *  - `country`\n   *  - `administrative_area_level_1`\n   *  - `administrative_area_level_2`\n   */\n  regions = \"(regions)\",\n  /** the (cities) type collection instructs the Places service to return results that match `locality` or `administrative_area_level_3`. */\n  cities = \"(cities)\",\n}\n\nexport interface PlaceAutocompleteRequest extends Partial<AxiosRequestConfig> {\n  params: {\n    /**\n     * The text string on which to search. The Place Autocomplete service will return candidate matches\n     * based on this string and order results based on their perceived relevance.\n     */\n    input: string;\n    /**\n     * A random string which identifies an autocomplete\n     * [session](https://developers.google.com/places/web-service/autocomplete#session_tokens) for billing purposes.\n     * If this parameter is omitted from an autocomplete request, the request is billed independently\n     */\n    sessiontoken?: string;\n    /**\n     * The position, in the input term, of the last character that the service uses to match predictions.\n     * For example, if the input is 'Google' and the `offset` is 3, the service will match on 'Goo'.\n     * The string determined by the `offset` is matched against the first word in the input term only.\n     * For example, if the input term is 'Google abc' and the offset is 3, the service will attempt to match against 'Goo abc'.\n     * If no `offset` is supplied, the service will use the whole term.\n     * The `offset` should generally be set to the position of the text caret.\n     */\n    offset?: number;\n    /**\n     * The origin point from which to calculate straight-line distance to the destination (returned as distance_meters).\n     * If this value is omitted, straight-line distance will not be returned.\n     */\n    origin?: LatLng;\n    /** The point around which you wish to retrieve place information. */\n    location?: LatLng;\n    /**\n     * The distance (in meters) within which to return place results. Note that setting a radius biases results to the indicated area,\n     * but may not fully restrict results to the specified area.\n     */\n    radius?: number;\n    /**\n     * The language code, indicating in which language the results should be returned, if possible.\n     * Searches are also biased to the selected language; results in the selected language may be given a higher ranking.\n     * See the list of supported languages and their codes.\n     * Note that we often update supported languages so this list may not be exhaustive.\n     * If language is not supplied, the Place Autocomplete service will attempt to use the native language\n     * of the domain from which the request is sent.\n     */\n    language?: string;\n    /** The types of place results to return. */\n    types?: PlaceAutocompleteType;\n    /**\n     * A grouping of places to which you would like to restrict your results.\n     * Currently, you can use `components` to filter by up to 5 countries.\n     * Countries must be passed as a two character, ISO 3166-1 Alpha-2 compatible country code.\n     * For example: `components=country:fr` would restrict your results to places within France.\n     * Multiple countries must be passed as multiple `country:XX` filters, with the pipe character (`|`) as a separator.\n     * For example: `components=country:us|country:pr|country:vi|country:gu|country:mp` would restrict your results\n     * to places within the United States and its unincorporated organized territories.\n     */\n    components?: string[];\n    /**\n     * Returns only those places that are strictly within the region defined by `location` and `radius`.\n     * This is a restriction, rather than a bias, meaning that results outside this region\n     * will not be returned even if they match the user input.\n     */\n    strictbounds?: boolean;\n    } & RequestParams;\n}\n\nexport interface PlaceAutocompleteResult {\n  /**\n   * contains the human-readable name for the returned result.\n   * For `establishment` results, this is usually the business name.\n   */\n  description: string;\n  /**\n   * contains an integer indicating the straight-line distance between the predicted place, and the specified origin point, in meters.\n   * This field is only returned when the origin point is specified in the request.\n   * This field is not returned in predictions of type route.\n   */\n  distance_meters?: number;\n  /**\n   * is a textual identifier that uniquely identifies a place.\n   * To retrieve information about the place, pass this identifier in the `placeId` field of a Places API request.\n   */\n  place_id: string;\n  /**\n   * contains an array of terms identifying each section of the returned description\n   * (a section of the description is generally terminated with a comma).\n   */\n  terms: PredictionTerm[];\n  /**\n   * contains an array of types that apply to this place.\n   * For example: `[ \"political\", \"locality\" ]` or `[ \"establishment\", \"geocode\" ]`.\n   */\n  types: AddressType[];\n  /**\n   * contains an array with `offset` value and `length`. These describe the location of\n   * the entered term in the prediction result text, so that the term can be highlighted if desired.\n   */\n  matched_substrings: PredictionSubstring[];\n  /** contains details on the prediction. */\n  structured_formatting: StructuredFormatting;\n}\n\nexport interface PlaceAutocompleteResponseData extends ResponseData {\n  /**\n   * contains an array of places, with information about the place.\n   * See [Place Autocomplete Results](https://developers.google.com/places/web-service/autocomplete#place_autocomplete_results)\n   * for information about these results. The Places API returns up to 5 results.\n   */\n  predictions: PlaceAutocompleteResult[];\n}\n\nexport interface PlaceAutocompleteResponse extends AxiosResponse {\n  data: PlaceAutocompleteResponseData;\n}\n\nexport const defaultUrl =\n  \"https://maps.googleapis.com/maps/api/place/autocomplete/json\";\n\nexport const defaultParamsSerializer = serializer({\n  location: latLngToString,\n  origin: latLngToString\n}, defaultUrl);\n\nexport function placeAutocomplete(\n  {\n    params,\n    method = \"get\",\n    url = defaultUrl,\n    paramsSerializer = defaultParamsSerializer,\n    ...config\n  }: PlaceAutocompleteRequest,\n  axiosInstance: AxiosInstance = defaultAxiosInstance\n): Promise<PlaceAutocompleteResponse> {\n  return axiosInstance({\n    params,\n    method,\n    url,\n    paramsSerializer,\n    ...config\n  }) as Promise<PlaceAutocompleteResponse>;\n}\n", "/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AxiosInstance, AxiosRequestConfig, AxiosResponse } from \"axios\";\nimport { Language, Place, RequestParams, ResponseData } from \"../common\";\n\nimport { defaultAxiosInstance } from \"../client\";\nimport { serializer } from \"../serialize\";\n\nexport interface PlaceDetailsRequest extends Partial<AxiosRequestConfig> {\n  params: {\n    /** A textual identifier that uniquely identifies a place, returned from a Place Search. */\n    place_id: string;\n    /**\n     * The language code, indicating in which language the results should be returned, if possible.\n     * Note that some fields may not be available in the requested language.\n     * Note that we often update supported languages so this list may not be exhaustive.\n     */\n    language?: Language;\n    /**\n     * The region code, specified as a ccTLD (country code top-level domain) two-character value.\n     * Most ccTLD codes are identical to ISO 3166-1 codes, with some exceptions.\n     * This parameter will only influence, not fully restrict, results.\n     * If more relevant results exist outside of the specified region, they may be included.\n     * When this parameter is used, the country name is omitted from the resulting `formatted_address`\n     * for results in the specified region.\n     */\n    region?: string;\n    /**\n     * A random string which identifies an autocomplete session for billing purposes.\n     * Use this for Place Details requests that are called following an autocomplete request in the same user session\n     */\n    sessiontoken?: string;\n    /**\n     * One or more fields, specifying the types of place data to return, separated by a comma.\n     *\n     * **Warning: If you do not specify at least one field with a request, or if you omit the **fields**\n     * parameter from a request, ALL possible fields will be returned, and you will be billed accordingly.\n     * This applies only to Place Details requests.\n     */\n    fields?: string[];\n    } & RequestParams;\n}\nexport interface PlaceDetailsResponseData extends ResponseData {\n  result: Place;\n  /** contains a set of attributions about this listing which must be displayed to the user. */\n  html_attributions: string[];\n}\n\nexport interface PlaceDetailsResponse extends AxiosResponse {\n  data: PlaceDetailsResponseData;\n}\n\nexport const defaultUrl =\n  \"https://maps.googleapis.com/maps/api/place/details/json\";\n\nexport const defaultParamsSerializer = serializer({}, defaultUrl, {arrayFormat: \"comma\"});\n\nexport function placeDetails(\n  {\n    params,\n    method = \"get\",\n    url = defaultUrl,\n    paramsSerializer = defaultParamsSerializer,\n    ...config\n  }: PlaceDetailsRequest,\n  axiosInstance: AxiosInstance = defaultAxiosInstance\n): Promise<PlaceDetailsResponse> {\n  return axiosInstance({\n    params,\n    method,\n    url,\n    paramsSerializer,\n    ...config\n  }) as Promise<PlaceDetailsResponse>;\n}\n", "/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AxiosInstance, AxiosRequestConfig, AxiosResponse } from \"axios\";\nimport { RequestParams } from \"../common\";\nimport { defaultAxiosInstance } from \"../client\";\n\nexport interface PlacePhotoRequest extends Partial<AxiosRequestConfig> {\n  params: {\n    /**\n     * string identifier that uniquely identifies a photo.\n     * Photo references are returned from either a Place Search or Place Details request.\n     */\n    photoreference: string;\n    /**\n     * Specifies the maximum desired height or width, in pixels, of the image returned by the Place Photos service.\n     * If the image is smaller than the values specified, the original image will be returned.\n     * If the image is larger in either dimension, it will be scaled to match the smaller of the two dimensions,\n     * restricted to its original aspect ratio. Both the `maxheight` and `maxwidth` properties accept an integer between 1 and 1600.\n     */\n    maxwidth?: number;\n    /**\n     * Specifies the maximum desired height or width, in pixels, of the image returned by the Place Photos service.\n     * If the image is smaller than the values specified, the original image will be returned.\n     * If the image is larger in either dimension, it will be scaled to match the smaller of the two dimensions,\n     * restricted to its original aspect ratio. Both the `maxheight` and `maxwidth` properties accept an integer between 1 and 1600.\n     */\n    maxheight?: number;\n    } & RequestParams;\n  responseType: 'arraybuffer' | 'blob' | 'stream';\n}\n\n/**\n * The response of a successful Place Photo request will be an image.\n * The type of the image will depend upon the type of the originally submitted photo.\n *\n * If your request exceeds your available quota, the server will return an HTTP 403 status to indicate that the quota has been exceeded.\n *\n * If the server is unable to understand your request, it will return HTTP 400 status, which indicates an invalid request.\n *\n * The most common reasons why you might see an invalid request include:\n *  - The submitted photo reference was incorrectly specified.\n *  - Your request did not include either a `maxwidth` or `maxheight` parameter.\n */\nexport interface PlacePhotoResponse extends AxiosResponse {}\n\nexport const defaultUrl = \"https://maps.googleapis.com/maps/api/place/photo\";\n\nexport function placePhoto(\n  { params, method = \"get\", url = defaultUrl, responseType, ...config }: PlacePhotoRequest,\n  axiosInstance: AxiosInstance = defaultAxiosInstance\n): Promise<PlacePhotoResponse> {\n  if (!responseType) {\n    responseType = 'arraybuffer'\n  }\n\n  return axiosInstance({\n    params,\n    method,\n    url,\n    responseType,\n    ...config\n  }) as Promise<PlacePhotoResponse>;\n}\n", "/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  LatLng,\n  Language,\n  Place,\n  ResponseData,\n  RequestParams,\n  PredictionTerm,\n  PredictionSubstring,\n  StructuredFormatting\n} from \"../common\";\nimport { AxiosInstance, AxiosRequestConfig, AxiosResponse } from \"axios\";\nimport { defaultAxiosInstance } from \"../client\";\nimport { serializer, latLngToString } from \"../serialize\";\n\nexport interface PlaceQueryAutocompleteRequest\n  extends Partial<AxiosRequestConfig> {\n  params: {\n    /**\n     * The text string on which to search.\n     * The Places service will return candidate matches based on this string and order results based on their perceived relevance.\n     */\n    input: string;\n    /**\n     * The character position in the input term at which the service uses text for predictions.\n     * For example, if the input is 'Googl' and the completion point is 3, the service will match on 'Goo'.\n     * The offset should generally be set to the position of the text caret.\n     * If no offset is supplied, the service will use the entire term.\n     */\n    offset?: number;\n    /** The point around which you wish to retrieve place information. Must be specified as latitude,longitude. */\n    location?: LatLng;\n    /**\n     * The distance (in meters) within which to return place results.\n     * Note that setting a radius biases results to the indicated area, but may not fully restrict results to the specified area.\n     */\n    radius?: number;\n    /**\n     * The language code, indicating in which language the results should be returned, if possible.\n     * Searches are also biased to the selected language; results in the selected language may be given a higher ranking.\n     * If language is not supplied, the Places service will attempt to use the native language of the domain from which the request is sent.\n     */\n    language?: Language;\n  } & RequestParams;\n}\n\nexport interface PlaceQueryAutocompletePrediction {\n  /** contains the human-readable name for the returned result. For establishment results, this is usually the business name. */\n  description: string;\n  /**\n   * contains an array of terms identifying each section of the returned description\n   * (a section of the description is generally terminated with a comma).\n   */\n  terms: PredictionTerm[];\n  /**\n   * contains an `offset` value and a `length`.\n   * These describe the location of the entered term in the prediction result text, so that the term can be highlighted if desired.\n   */\n  matched_substrings: PredictionSubstring[];\n  structured_formatting?: StructuredFormatting[];\n  place_id?: string;\n  types?: string[];\n}\n\nexport interface PlaceQueryAutocompleteResponseData extends ResponseData {\n  /**\n   * contains an array of places, with information about the place.\n   * See [Place Autocomplete Results](https://developers.google.com/places/web-service/autocomplete#place_autocomplete_results)\n   * for information about these results. The Places API returns up to 5 results.\n   */\n  predictions: PlaceQueryAutocompletePrediction[];\n}\n\nexport interface PlaceQueryAutocompleteResponse extends AxiosResponse {\n  data: PlaceQueryAutocompleteResponseData;\n}\n\nexport const defaultUrl =\n  \"https://maps.googleapis.com/maps/api/place/queryautocomplete/json\";\n\nexport const defaultParamsSerializer = serializer({ location: latLngToString }, defaultUrl);\n\nexport function placeQueryAutocomplete(\n  {\n    params,\n    method = \"get\",\n    url = defaultUrl,\n    paramsSerializer = defaultParamsSerializer,\n    ...config\n  }: PlaceQueryAutocompleteRequest,\n  axiosInstance: AxiosInstance = defaultAxiosInstance\n): Promise<PlaceQueryAutocompleteResponse> {\n  return axiosInstance({\n    params,\n    method,\n    url,\n    paramsSerializer,\n    ...config\n  }) as Promise<PlaceQueryAutocompleteResponse>;\n}\n", "/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AxiosInstance, AxiosRequestConfig, AxiosResponse } from \"axios\";\nimport {\n  Language,\n  LatLng,\n  Place,\n  RequestParams,\n  ResponseData,\n} from \"../common\";\nimport { latLngToString, serializer } from \"../serialize\";\n\nimport { defaultAxiosInstance } from \"../client\";\n\nexport enum PlacesNearbyRanking {\n  /**\n   * This option sorts results based on their importance. Ranking will favor prominent places within the specified area.\n   * Prominence can be affected by a place's ranking in Google's index, global popularity, and other factors.\n   */\n  prominence = \"prominence\",\n  /**\n   * This option biases search results in ascending order by their distance from the specified `location`.\n   * When distance is specified, one or more of `keyword`, `name`, or `type` is required.\n   */\n  distance = \"distance\",\n}\n\nexport interface PlacesNearbyRequest extends Partial<AxiosRequestConfig> {\n  params: {\n    /** The latitude/longitude around which to retrieve place information. This must be specified as latitude,longitude. */\n    location: LatLng;\n    /**\n     * Defines the distance (in meters) within which to return place results.\n     * The maximum allowed radius is 50 000 meters.\n     * Note that `radius` must not be included if `rankby=distance` is specified.\n     */\n    radius?: number;\n    /**\n     * A term to be matched against all content that Google has indexed for this place, including but not limited to\n     * name, type, and address, as well as customer reviews and other third-party content.\n     */\n    keyword?: string;\n    /**\n     * The language code, indicating in which language the results should be returned, if possible.\n     * Note that we often update supported languages so this list may not be exhaustive.\n     */\n    language?: Language;\n    /**\n     * Restricts results to only those places within the specified range.\n     * Valid values range between 0 (most affordable) to 4 (most expensive), inclusive.\n     * The exact amount indicated by a specific value will vary from region to region.\n     */\n    minprice?: number;\n    /**\n     * Restricts results to only those places within the specified range.\n     * Valid values range between 0 (most affordable) to 4 (most expensive), inclusive.\n     * The exact amount indicated by a specific value will vary from region to region.\n     */\n    maxprice?: number;\n    /**\n     * A term to be matched against all content that Google has indexed for this place.\n     * Equivalent to `keyword`. The `name` field is no longer restricted to place names.\n     * Values in this field are combined with values in the `keyword` field and passed as part of the same search string.\n     * We recommend using only the `keyword` parameter for all search terms.\n     */\n    name?: string;\n    /**\n     * Returns only those places that are open for business at the time the query is sent.\n     * Places that do not specify opening hours in the Google Places database will not be returned if you include this parameter in your query.\n     */\n    opennow?: boolean;\n    /**\n     * Specifies the order in which results are listed.\n     * Note that `rankby` must not be included if `radius` is specified.\n     *\n     * @default PlacesNearbyRanking.prominence\n     */\n    rankby?: PlacesNearbyRanking;\n    /**\n     * Restricts the results to places matching the specified type.\n     * Only one type may be specified (if more than one type is provided, all types following the first entry are ignored).\n     */\n    type?: string;\n    /**\n     * Returns the next 20 results from a previously run search.\n     * Setting a pagetoken parameter will execute a search with the same parameters used previously —\n     * all parameters other than pagetoken will be ignored.\n     */\n    pagetoken?: string;\n  } & RequestParams;\n}\n\nexport interface PlacesNearbyResponseData extends ResponseData {\n  results: Place[];\n}\n\nexport interface PlacesNearbyResponse extends AxiosResponse {\n  data: PlacesNearbyResponseData;\n}\n\nexport const defaultUrl =\n  \"https://maps.googleapis.com/maps/api/place/nearbysearch/json\";\n\nexport const defaultParamsSerializer = serializer({ location: latLngToString }, defaultUrl);\n\nexport function placesNearby(\n  {\n    params,\n    method = \"get\",\n    url = defaultUrl,\n    paramsSerializer = defaultParamsSerializer,\n    ...config\n  }: PlacesNearbyRequest,\n  axiosInstance: AxiosInstance = defaultAxiosInstance\n): Promise<PlacesNearbyResponse> {\n  return axiosInstance({\n    params,\n    method,\n    url,\n    paramsSerializer,\n    ...config,\n  }) as Promise<PlacesNearbyResponse>;\n}\n", "/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AddressType, Language, LatLng, RequestParams } from \"../common\";\nimport { AxiosInstance, AxiosRequestConfig, AxiosResponse } from \"axios\";\nimport { GeocodeResult, ResponseData } from \"../common\";\nimport { latLngToString, serializer } from \"../serialize\";\n\nimport { defaultAxiosInstance } from \"../client\";\n\n/**\n * If both `result_type` and `location_type` filters are present then the API returns only those results that match both the\n * `result_type` and the `location_type` values. If none of the filter values are acceptable, the API returns `ZERO_RESULTS`.\n */\nexport enum ReverseGeocodingLocationType {\n  /** returns only the addresses for which Google has location information accurate down to street address precision. */\n  ROOFTOP = \"ROOFTOP\",\n  /**\n   * returns only the addresses that reflect an approximation (usually on a road) interpolated between two precise points\n   * (such as intersections). An interpolated range generally indicates that rooftop geocodes are unavailable for a street address.\n   */\n  RANGE_INTERPOLATED = \"RANGE_INTERPOLATED\",\n  /** returns only geometric centers of a location such as a polyline (for example, a street) or polygon (region). */\n  GEOMETRIC_CENTER = \"GEOMETRIC_CENTER\",\n  /** returns only the addresses that are characterized as approximate. */\n  APPROXIMATE = \"APPROXIMATE\",\n}\n\nexport interface ReverseGeocodeRequest extends Partial<AxiosRequestConfig> {\n  params: {\n    /** The latitude and longitude values specifying the location for which you wish to obtain the closest, human-readable address. */\n    latlng?: LatLng;\n    /**\n     * The place ID of the place for which you wish to obtain the human-readable address.\n     * The place ID is a unique identifier that can be used with other Google APIs.\n     * For example, you can use the `placeID` returned by the Roads API to get the address for a snapped point.\n     * The place ID may only be specified if the request includes an API key or a Google Maps APIs Premium Plan client ID.\n     */\n    place_id?: string;\n    /**\n     * The language in which to return results.\n     *  - Google often updates the supported languages, so this list may not be exhaustive.\n     *  - If `language` is not supplied, the geocoder attempts to use the preferred language as specified in the\n     *    `Accept-Language` header, or the native language of the domain from which the request is sent.\n     *  - The geocoder does its best to provide a street address that is readable for both the user and locals.\n     *    To achieve that goal, it returns street addresses in the local language, transliterated to a script readable by the user\n     *    if necessary, observing the preferred language. All other addresses are returned in the preferred language.\n     *    Address components are all returned in the same language, which is chosen from the first component.\n     *  - If a name is not available in the preferred language, the geocoder uses the closest match.\n     */\n    language?: Language;\n    /**\n     * A filter of one or more address types, separated by a pipe (`|`).\n     * If the parameter contains multiple address types, the API returns all addresses that match any of the types.\n     * A note about processing: The `result_type` parameter does not restrict the search to the specified address type(s).\n     * Rather, the `result_type` acts as a post-search filter: the API fetches all results for the specified `latlng`,\n     * then discards those results that do not match the specified address type(s).\n     * Note: This parameter is available only for requests that include an API key or a client ID.\n     */\n    result_type?: AddressType[];\n    /**\n     * A filter of one or more location types, separated by a pipe (`|`).\n     * If the parameter contains multiple location types, the API returns all addresses that match any of the types.\n     * A note about processing: The `location_type` parameter does not restrict the search to the specified location type(s).\n     * Rather, the `location_type` acts as a post-search filter: the API fetches all results for the specified `latlng`,\n     * then discards those results that do not match the specified location type(s).\n     * Note: This parameter is available only for requests that include an API key or a client ID.\n     */\n    location_type?: ReverseGeocodingLocationType[];\n    } & RequestParams;\n}\n\nexport interface ReverseGeocodeResponseData extends ResponseData {\n  /**\n   * contains an array of geocoded address information and geometry information.\n   *\n   * Generally, only one entry in the `\"results\"` array is returned for address lookups,though the geocoder may return several results\n   * when address queries are ambiguous.\n   */\n  results: GeocodeResult[];\n}\n\nexport interface ReverseGeocodeResponse extends AxiosResponse {\n  data: ReverseGeocodeResponseData;\n}\n\nexport const defaultUrl = \"https://maps.googleapis.com/maps/api/geocode/json\";\n\nexport const defaultParamsSerializer = serializer({\n  latlng: latLngToString\n}, defaultUrl);\n\nexport function reverseGeocode(\n  {\n    params,\n    method = \"get\",\n    url = defaultUrl,\n    paramsSerializer = defaultParamsSerializer,\n    ...config\n  }: ReverseGeocodeRequest,\n  axiosInstance: AxiosInstance = defaultAxiosInstance\n): Promise<ReverseGeocodeResponse> {\n  return axiosInstance({\n    params,\n    method,\n    url,\n    paramsSerializer,\n    ...config\n  }) as Promise<ReverseGeocodeResponse>;\n}\n", "/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LatLng, SnappedPoint, RequestParams } from \"../common\";\nimport { AxiosInstance, AxiosRequestConfig, AxiosResponse } from \"axios\";\nimport { defaultAxiosInstance } from \"../client\";\nimport { serializer, latLngToString } from \"../serialize\";\n\nexport interface SnapToRoadsRequest extends Partial<AxiosRequestConfig> {\n  params: {\n    /**\n     * The path to be snapped. The `path` parameter accepts a list of latitude/longitude pairs.\n     * Latitude and longitude values should be separated by commas. Coordinates should be separated by the pipe character: `\"|\"`.\n     * For example: `path=60.170880,24.942795|60.170879,24.942796|60.170877,24.942796`.\n     *\n     * **Note:** The snapping algorithm works best for points that are not too far apart.\n     * If you observe odd snapping behavior, try creating paths that have points closer together.\n     * To ensure the best snap-to-road quality, you should aim to provide paths on which consecutive pairs\n     *  of points are within 300m of each other. This will also help in handling any isolated, long jumps between\n     * consecutive points caused by GPS signal loss, or noise.\n     */\n    path: LatLng[];\n    /**\n     * Whether to interpolate a path to include all points forming the full road-geometry.\n     * When true, additional interpolated points will also be returned, resulting in a path that smoothly follows\n     * the geometry of the road, even around corners and through tunnels.\n     * Interpolated paths will most likely contain more points than the original path.\n     *\n     * @default false\n     */\n    interpolate?: boolean;\n    } & RequestParams;\n}\n\nexport interface SnapToRoadsResponse extends AxiosResponse {\n  data: {\n    /** An array of snapped points. */\n    snappedPoints: SnappedPoint[];\n  };\n}\nexport const defaultUrl = \"https://roads.googleapis.com/v1/snapToRoads\";\nexport const defaultParamsSerializer = serializer({\n  path: o => o.map(latLngToString)\n}, defaultUrl);\n\nexport function snapToRoads(\n  {\n    params,\n    method = \"get\",\n    url = defaultUrl,\n    paramsSerializer = defaultParamsSerializer,\n    ...config\n  }: SnapToRoadsRequest,\n  axiosInstance: AxiosInstance = defaultAxiosInstance\n): Promise<SnapToRoadsResponse> {\n  return axiosInstance({\n    params,\n    method,\n    url,\n    paramsSerializer,\n    ...config\n  }) as Promise<SnapToRoadsResponse>;\n}\n", "/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ResponseData, LatLng, Language, PlaceType1, Place, RequestParams } from \"../common\";\nimport { AxiosInstance, AxiosRequestConfig, AxiosResponse } from \"axios\";\nimport { defaultAxiosInstance } from \"../client\";\nimport { serializer, latLngToString } from \"../serialize\";\n\nexport interface TextSearchRequest extends Partial<AxiosRequestConfig> {\n  params: {\n    /**\n     * The text string on which to search, for example: \"restaurant\" or \"123 Main Street\".\n     * The Google Places service will return candidate matches based on this string and order the results\n     * based on their perceived relevance. This parameter becomes optional if the `type` parameter\n     * is also used in the search request.\n     */\n    query: string;\n    /**\n     * The region code, specified as a ccTLD (country code top-level domain) two-character value.\n     * Most ccTLD codes are identical to ISO 3166-1 codes, with some exceptions.\n     * This parameter will only influence, not fully restrict, search results.\n     * If more relevant results exist outside of the specified region, they may be included.\n     * When this parameter is used, the country name is omitted from the resulting `formatted_address`\n     * for results in the specified region.\n     */\n    region?: string;\n    /**\n     * The latitude/longitude around which to retrieve place information.\n     * This must be specified as latitude,longitude. If you specify a location parameter,\n     * you must also specify a radius parameter.\n     */\n    location?: LatLng;\n    /**\n     * Defines the distance (in meters) within which to bias place results.\n     * The maximum allowed radius is 50 000 meters.\n     * Results inside of this region will be ranked higher than results outside of the search circle;\n     * however, prominent results from outside of the search radius may be included.\n     */\n    radius?: number;\n    /**\n     * The language code, indicating in which language the results should be returned, if possible.\n     * Note that we often update supported languages so this list may not be exhaustive\n     */\n    language?: Language;\n    /**\n     * Restricts results to only those places within the specified price level.\n     * Valid values are in the range from 0 (most affordable) to 4 (most expensive), inclusive.\n     * The exact amount indicated by a specific value will vary from region to region.\n     */\n    minprice?: number;\n    /**\n     * Restricts results to only those places within the specified price level.\n     * Valid values are in the range from 0 (most affordable) to 4 (most expensive), inclusive.\n     * The exact amount indicated by a specific value will vary from region to region.\n     */\n    maxprice?: number;\n    /**\n     * Returns only those places that are open for business at the time the query is sent.\n     * Places that do not specify opening hours in the Google Places database will not be returned\n     * if you include this parameter in your query.\n     */\n    opennow?: boolean;\n    /**\n     * Returns the next 20 results from a previously run search.\n     * Setting a `pagetoken` parameter will execute a search with the same parameters used previously —\n     * all parameters other than `pagetoken` will be ignored.\n     */\n    pagetoken?: string;\n    /**\n     * Restricts the results to places matching the specified type.\n     * Only one type may be specified (if more than one type is provided, all types following the first entry are ignored).\n     */\n    type?: PlaceType1;\n    } & RequestParams;\n}\n\nexport interface TextSearchResponseData extends ResponseData {\n  results: Place[];\n}\n\nexport interface TextSearchResponse extends AxiosResponse {\n  data: TextSearchResponseData;\n}\n\nexport const defaultUrl =\n  \"https://maps.googleapis.com/maps/api/place/textsearch/json\";\n\nexport const defaultParamsSerializer = serializer({ location: latLngToString }, defaultUrl);\n\nexport function textSearch(\n  {\n    params,\n    method = \"get\",\n    url = defaultUrl,\n    paramsSerializer = defaultParamsSerializer,\n    ...config\n  }: TextSearchRequest,\n  axiosInstance: AxiosInstance = defaultAxiosInstance\n): Promise<TextSearchResponse> {\n  return axiosInstance({\n    params,\n    method,\n    url,\n    paramsSerializer,\n    ...config\n  }) as Promise<TextSearchResponse>;\n}\n", "/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AxiosInstance, AxiosRequestConfig, AxiosResponse } from \"axios\";\nimport { Language, LatLng, RequestParams, ResponseData } from \"./common\";\nimport { latLngToString, serializer, toTimestamp } from \"./serialize\";\n\nimport { defaultAxiosInstance } from \"./client\";\n\nexport interface TimeZoneRequest extends Partial<AxiosRequestConfig> {\n  params: {\n    /** a comma-separated `lat,lng` tuple (eg. `location=-33.86,151.20`), representing the location to look up. */\n    location: LatLng;\n    /**\n     * specifies the desired time as seconds since midnight, January 1, 1970 UTC.\n     * The Time Zone API uses the timestamp to determine whether or not Daylight Savings should be applied,\n     * based on the time zone of the location. Note that the API does not take historical time zones into account.\n     * That is, if you specify a past timestamp, the API does not take into account the possibility that\n     * the location was previously in a different time zone.\n     */\n    timestamp: Date | number;\n    /**\n     * The language in which to return results.\n     * Note that we often update supported languages so this list may not be exhaustive.\n     *\n     * @default Language.English\n     */\n    language?: Language;\n  } & RequestParams;\n}\n\nexport interface TimeZoneResponseData extends ResponseData {\n  /**\n   * the offset for daylight-savings time in seconds.\n   * This will be zero if the time zone is not in Daylight Savings Time during the specified `timestamp`.\n   */\n  dstOffset: number;\n  /** the offset from UTC (in seconds) for the given location. This does not take into effect daylight savings. */\n  rawOffset: number;\n  /**\n   * a string containing the ID of the time zone, such as \"America/Los_Angeles\" or \"Australia/Sydney\".\n   * These IDs are defined by [Unicode Common Locale Data Repository (CLDR) project](http://cldr.unicode.org/),\n   * and currently available in file [timezone.xml](http://unicode.org/repos/cldr/trunk/common/bcp47/timezone.xml).\n   * When a timezone has several IDs, the canonical one is returned. In timezone.xml, this is the first alias of each timezone.\n   * For example, \"Asia/Calcutta\" is returned, not \"Asia/Kolkata\".\n   */\n  timeZoneId: string;\n  /**\n   * a string containing the long form name of the time zone.\n   * This field will be localized if the `language` parameter is set.\n   * eg. \"Pacific Daylight Time\" or \"Australian Eastern Daylight Time\"\n   */\n  timeZoneName: string;\n}\n\nexport interface TimeZoneResponse extends AxiosResponse {\n  data: TimeZoneResponseData;\n}\n\nexport const defaultUrl = \"https://maps.googleapis.com/maps/api/timezone/json\";\nexport const defaultParamsSerializer = serializer({\n  timestamp: toTimestamp,\n  location: latLngToString\n}, defaultUrl);\nexport function timezone(\n  {\n    params,\n    method = \"get\",\n    url = defaultUrl,\n    paramsSerializer = defaultParamsSerializer,\n    ...config\n  }: TimeZoneRequest,\n  axiosInstance: AxiosInstance = defaultAxiosInstance\n): Promise<TimeZoneResponse> {\n  return axiosInstance({\n    params,\n    method,\n    url,\n    paramsSerializer,\n    ...config\n  }) as Promise<TimeZoneResponse>;\n}\n", "module.exports = noop;\nmodule.exports.HttpsAgent = noop;\n\n// Noop function for browser since native api's don't use agents.\nfunction noop () {}\n", "/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport type RequestParams = ApiKeyParams | PremiumPlanParams;\n\nexport interface ApiKeyParams {\n/**\n   * You must include an API key with every API request. We strongly recommend that you restrict your API key.\n   * Restrictions provide added security and help ensure only authorized requests are made with your API key.\n   *\n   * There are two restrictions. You should set both:\n   *\n   * Application restriction:  Limits usage of the API key to either websites (HTTP referrers),\n   * web servers (IP addresses), or mobile apps (Android apps or iOS apps). You can select only one\n   * restriction from this category, based on the platform of the API or SDK (see GMP APIs by Platform).\n   *\n   * API restriction: Limits usage of the API key to one or more APIs or SDKs. Requests to an API or SDK\n   * associated with the API key will be processed. Requests to an API or SDK not associated with the API\n   * key will fail.\n   */\n  key: string;\n}\n\n/**\n * The Google Maps Platform Premium Plan is no longer available for sign up or new customers. This option is\n * only provided for maintaining existing legacy applications that use client IDs. For new applications,\n * please use API keys.\n * @deprecated\n */\nexport interface PremiumPlanParams {\n  /** project client ID */\n  client_id: string;\n  /** project URL signing secret. Used to create the request signature */\n  client_secret: string;\n}\n\nexport interface ResponseData {\n  /** contains metadata on the request. See Status Codes below. */\n  status: Status;\n  /**\n   * When the top-level status code is other than `OK`, this field contains more detailed information\n   * about the reasons behind the given status code.\n   */\n  error_message: string;\n  /** may contain a set of attributions about this listing which must be displayed to the user (some listings may not have attribution). */\n  html_attributions?: string[];\n  /**\n   * contains a token that can be used to return up to 20 additional results.\n   * A `next_page_token` will not be returned if there are no additional results to display.\n   * The maximum number of results that can be returned is 60.\n   * There is a short delay between when a `next_page_token` is issued, and when it will become valid.\n   */\n  next_page_token?: string;\n}\n\nexport enum Status {\n  /** indicates the response contains a valid result. */\n  OK = \"OK\",\n  /** indicates that the provided request was invalid. */\n  INVALID_REQUEST = \"INVALID_REQUEST\",\n  /**\n   * indicates that too many `waypoints` were provided in the request. For applications using the Directions API as a web service,\n   * or the [directions service in the Maps JavaScript API](https://developers.google.com/maps/documentation/javascript/directions),\n   * the maximum allowed number of `waypoints` is 23, plus the origin and destination.\n   */\n  MAX_WAYPOINTS_EXCEEDED = \"MAX_WAYPOINTS_EXCEEDED\",\n  /**\n   * indicates the requested route is too long and cannot be processed.\n   * This error occurs when more complex directions are returned.\n   * Try reducing the number of waypoints, turns, or instructions.\n   */\n  MAX_ROUTE_LENGTH_EXCEEDED = \"MAX_ROUTE_LENGTH_EXCEEDED\",\n  /**\n   * indicates any of the following:\n   *  - The API key is missing or invalid.\n   *  - Billing has not been enabled on your account.\n   *  - A self-imposed usage cap has been exceeded.\n   *  - The provided method of payment is no longer valid (for example, a credit card has expired).\n   * See the [Maps FAQ](https://developers.google.com/maps/faq#over-limit-key-error) to learn how to fix this.\n   */\n  OVER_DAILY_LIMIT = \"OVER_DAILY_LIMIT\",\n  /** indicates the service has received too many requests from your application within the allowed time period. */\n  OVER_QUERY_LIMIT = \"OVER_QUERY_LIMIT\",\n  /** indicates that the service denied use of the Distance Matrix service by your application. */\n  REQUEST_DENIED = \"REQUEST_DENIED\",\n  /** indicates a Distance Matrix request could not be processed due to a server error. The request may succeed if you try again. */\n  UNKNOWN_ERROR = \"UNKNOWN_ERROR\",\n  /** indicates that the request was successful but returned no results. */\n  ZERO_RESULTS = \"ZERO_RESULTS\",\n  /** indicates that the referenced location (place_id) was not found in the Places database. */\n  NOT_FOUND = \"NOT_FOUND\",\n}\n\nexport interface PlacePhoto {\n  /** a string used to identify the photo when you perform a Photo request. */\n  photo_reference: string;\n  /** the maximum height of the image. */\n  height: number;\n  /** the maximum width of the image. */\n  width: number;\n  /** contains any required attributions. This field will always be present, but may be empty. */\n  html_attributions: string[];\n}\n\nexport enum PlaceIdScope {\n  /**\n   * The place ID is recognised by your application only.\n   * This is because your application added the place, and the place has not yet passed the moderation process.\n   */\n  APP = \"APP\",\n  /** The place ID is available to other applications and on Google Maps. */\n  GOOGLE = \"GOOGLE\",\n}\n\nexport interface AlternativePlaceId {\n  /**\n   * The most likely reason for a place to have an alternative place ID is if your application adds a place and receives\n   * an application-scoped place ID, then later receives a Google-scoped place ID after passing the moderation process.\n   */\n  place_id: string;\n  /**\n   * The scope of an alternative place ID will always be `APP`,\n   * indicating that the alternative place ID is recognised by your application only.\n   */\n  scope: \"APP\";\n}\n\nexport enum PlaceInputType {\n  textQuery = \"textquery\",\n  phoneNumber = \"phonenumber\",\n}\n\n/**\n * Table 1: Types supported in place search and addition\n *\n * You can use the following values in the types filter for place searches and when adding a place.\n *\n * @see https://developers.google.com/places/web-service/supported_types#table1\n */\nexport enum PlaceType1 {\n  accounting = \"accounting\",\n  /** indicates an airport. */\n  airport = \"airport\",\n  amusement_park = \"amusement_park\",\n  aquarium = \"aquarium\",\n  art_gallery = \"art_gallery\",\n  atm = \"atm\",\n  bakery = \"bakery\",\n  bank = \"bank\",\n  bar = \"bar\",\n  beauty_salon = \"beauty_salon\",\n  bicycle_store = \"bicycle_store\",\n  book_store = \"book_store\",\n  bowling_alley = \"bowling_alley\",\n  bus_station = \"bus_station\",\n  cafe = \"cafe\",\n  campground = \"campground\",\n  car_dealer = \"car_dealer\",\n  car_rental = \"car_rental\",\n  car_repair = \"car_repair\",\n  car_wash = \"car_wash\",\n  casino = \"casino\",\n  cemetery = \"cemetery\",\n  church = \"church\",\n  city_hall = \"city_hall\",\n  clothing_store = \"clothing_store\",\n  convenience_store = \"convenience_store\",\n  courthouse = \"courthouse\",\n  dentist = \"dentist\",\n  department_store = \"department_store\",\n  doctor = \"doctor\",\n  drugstore = \"drugstore\",\n  electrician = \"electrician\",\n  electronics_store = \"electronics_store\",\n  embassy = \"embassy\",\n  fire_station = \"fire_station\",\n  florist = \"florist\",\n  funeral_home = \"funeral_home\",\n  furniture_store = \"furniture_store\",\n  gas_station = \"gas_station\",\n  gym = \"gym\",\n  hair_care = \"hair_care\",\n  hardware_store = \"hardware_store\",\n  hindu_temple = \"hindu_temple\",\n  home_goods_store = \"home_goods_store\",\n  hospital = \"hospital\",\n  insurance_agency = \"insurance_agency\",\n  jewelry_store = \"jewelry_store\",\n  laundry = \"laundry\",\n  lawyer = \"lawyer\",\n  library = \"library\",\n  light_rail_station = \"light_rail_station\",\n  liquor_store = \"liquor_store\",\n  local_government_office = \"local_government_office\",\n  locksmith = \"locksmith\",\n  lodging = \"lodging\",\n  meal_delivery = \"meal_delivery\",\n  meal_takeaway = \"meal_takeaway\",\n  mosque = \"mosque\",\n  movie_rental = \"movie_rental\",\n  movie_theater = \"movie_theater\",\n  moving_company = \"moving_company\",\n  museum = \"museum\",\n  night_club = \"night_club\",\n  painter = \"painter\",\n  /** indicates a named park. */\n  park = \"park\",\n  parking = \"parking\",\n  pet_store = \"pet_store\",\n  pharmacy = \"pharmacy\",\n  physiotherapist = \"physiotherapist\",\n  plumber = \"plumber\",\n  police = \"police\",\n  post_office = \"post_office\",\n  real_estate_agency = \"real_estate_agency\",\n  restaurant = \"restaurant\",\n  roofing_contractor = \"roofing_contractor\",\n  rv_park = \"rv_park\",\n  school = \"school\",\n  secondary_school = \"secondary_school\",\n  shoe_store = \"shoe_store\",\n  shopping_mall = \"shopping_mall\",\n  spa = \"spa\",\n  stadium = \"stadium\",\n  storage = \"storage\",\n  store = \"store\",\n  subway_station = \"subway_station\",\n  supermarket = \"supermarket\",\n  synagogue = \"synagogue\",\n  taxi_stand = \"taxi_stand\",\n  tourist_attraction = \"tourist_attraction\",\n  train_station = \"train_station\",\n  transit_station = \"transit_station\",\n  travel_agency = \"travel_agency\",\n  university = \"university\",\n  veterinary_care = \"veterinary_care\",\n  zoo = \"zoo\",\n}\n\n/**\n * Table 2: Additional types returned by the Places service\n *\n * The following types may be returned in the results of a place search, in addition to the types in table 1 above.\n * For more details on these types, refer to [Address Types](https://developers.google.com/maps/documentation/geocoding/intro#Types)\n * in Geocoding Responses.\n *\n * @see https://developers.google.com/places/web-service/supported_types#table2\n */\nexport enum PlaceType2 {\n  /**\n   * indicates a first-order civil entity below the country level. Within the United States, these administrative levels are states.\n   * Not all nations exhibit these administrative levels. In most cases, `administrative_area_level_1` short names will closely match\n   * ISO 3166-2 subdivisions and other widely circulated lists; however this is not guaranteed as our geocoding results are based\n   * on a variety of signals and location data.\n   */\n  administrative_area_level_1 = \"administrative_area_level_1\",\n  /**\n   * indicates a second-order civil entity below the country level. Within the United States, these administrative levels are counties.\n   * Not all nations exhibit these administrative levels.\n   */\n  administrative_area_level_2 = \"administrative_area_level_2\",\n  /**\n   * indicates a third-order civil entity below the country level. This type indicates a minor civil division.\n   * Not all nations exhibit these administrative levels.\n   */\n  administrative_area_level_3 = \"administrative_area_level_3\",\n  /**\n   * indicates a fourth-order civil entity below the country level. This type indicates a minor civil division.\n   * Not all nations exhibit these administrative levels.\n   */\n  administrative_area_level_4 = \"administrative_area_level_4\",\n  /**\n   * indicates a fifth-order civil entity below the country level. This type indicates a minor civil division.\n   * Not all nations exhibit these administrative levels.\n   */\n  administrative_area_level_5 = \"administrative_area_level_5\",\n  archipelago = \"archipelago\",\n  /** indicates a commonly-used alternative name for the entity. */\n  colloquial_area = \"colloquial_area\",\n  continent = \"continent\",\n  /** indicates the national political entity, and is typically the highest order type returned by the Geocoder. */\n  country = \"country\",\n  establishment = \"establishment\",\n  finance = \"finance\",\n  floor = \"floor\",\n  food = \"food\",\n  general_contractor = \"general_contractor\",\n  geocode = \"geocode\",\n  health = \"health\",\n  /** indicates a major intersection, usually of two major roads. */\n  intersection = \"intersection\",\n  landmark = \"landmark\",\n  /** indicates an incorporated city or town political entity. */\n  locality = \"locality\",\n  /** indicates a prominent natural feature. */\n  natural_feature = \"natural_feature\",\n  /** indicates a named neighborhood */\n  neighborhood = \"neighborhood\",\n  place_of_worship = \"place_of_worship\",\n  plus_code = \"plus_code\",\n  point_of_interest = \"point_of_interest\",\n  /** indicates a political entity. Usually, this type indicates a polygon of some civil administration. */\n  political = \"political\",\n  post_box = \"post_box\",\n  /** indicates a postal code as used to address postal mail within the country. */\n  postal_code = \"postal_code\",\n  postal_code_prefix = \"postal_code_prefix\",\n  postal_code_suffix = \"postal_code_suffix\",\n  postal_town = \"postal_town\",\n  /** indicates a named location, usually a building or collection of buildings with a common name */\n  premise = \"premise\",\n  room = \"room\",\n  /** indicates a named route (such as \"US 101\"). */\n  route = \"route\",\n  street_address = \"street_address\",\n  street_number = \"street_number\",\n  /**\n   * indicates a first-order civil entity below a locality. For some locations may receive one of the additional types:\n   * `sublocality_level_1` to `sublocality_level_5`. Each sublocality level is a civil entity. Larger numbers indicate a smaller\n   * geographic area.\n   */\n  sublocality = \"sublocality\",\n  sublocality_level_1 = \"sublocality_level_1\",\n  sublocality_level_2 = \"sublocality_level_2\",\n  sublocality_level_3 = \"sublocality_level_3\",\n  sublocality_level_4 = \"sublocality_level_4\",\n  sublocality_level_5 = \"sublocality_level_5\",\n  /**\n   * indicates a first-order entity below a named location, usually a singular building within a collection of buildings with a\n   * common name.\n   */\n  subpremise = \"subpremise\",\n  town_square = \"town_square\",\n}\n\nexport interface PlaceReview {\n  /**\n   * contains a collection of `AspectRating` objects, each of which provides a rating of a single attribute of the establishment.\n   * The first object in the collection is considered the primary aspect.\n   */\n  aspects: AspectRating[];\n  /** the name of the user who submitted the review. Anonymous reviews are attributed to \"A Google user\". */\n  author_name: string;\n  /** the URL to the user's Google Maps Local Guides profile, if available. */\n  author_url?: string;\n  /**\n   * an IETF language code indicating the language used in the user's review.\n   * This field contains the main language tag only, and not the secondary tag indicating country or region.\n   * For example, all the English reviews are tagged as 'en', and not 'en-AU' or 'en-UK' and so on.\n   */\n  language: string;\n  /** the URL to the user's profile photo, if available. */\n  profile_photo_url: string;\n  /** the user's overall rating for this place. This is a whole number, ranging from 1 to 5. */\n  rating: number;\n  /* The time since review in relative terms, for example '7 months ago' */\n  relative_time_description: string;\n  /**\n   * the user's review. When reviewing a location with Google Places, text reviews are considered optional.\n   * Therefore, this field may by empty. Note that this field may include simple HTML markup.\n   * For example, the entity reference `&amp;` may represent an ampersand character.\n   */\n  text: string;\n  /** the time that the review was submitted, measured in the number of seconds since since midnight, January 1, 1970 UTC. */\n  time: string;\n}\n\nexport interface AspectRating {\n  /** the name of the aspect that is being rated. */\n  type: AspectRatingType;\n  /** the user's rating for this particular aspect, from 0 to 3. */\n  rating: number;\n}\n\nexport enum AspectRatingType {\n  appeal = \"appeal\",\n  atmosphere = \"atmosphere\",\n  decor = \"decor\",\n  facilities = \"facilities\",\n  food = \"food\",\n  overall = \"overall\",\n  quality = \"quality\",\n  service = \"service\",\n}\n\nexport type Place = Partial<PlaceData>;\n\nexport interface PlaceData {\n  /**\n   * is an array containing the separate components applicable to this address.\n   *\n   * Note the following facts about the `address_components[]` array:\n   *  - The array of address components may contain more components than the `formatted_address`.\n   *  - The array does not necessarily include all the political entities that contain an address,\n   *    apart from those included in the `formatted_address`. To retrieve all the political entities\n   *    that contain a specific address, you should use reverse geocoding, passing the latitude/longitude\n   *    of the address as a parameter to the request.\n   *  - The format of the response is not guaranteed to remain the same between requests.\n   *    In particular, the number of `address_components` varies based on the address requested\n   *    and can change over time for the same address. A component can change position in the array.\n   *    The type of the component can change. A particular component may be missing in a later response.\n   */\n  address_components: AddressComponent[];\n  /**\n   * is a string containing the human-readable address of this place.\n   *\n   * Often this address is equivalent to the postal address. Note that some countries, such as the United Kingdom,\n   * do not allow distribution of true postal addresses due to licensing restrictions.\n   *\n   * The formatted address is logically composed of one or more address components.\n   * For example, the address \"111 8th Avenue, New York, NY\" consists of the following components: \"111\"\n   * (the street number), \"8th Avenue\" (the route), \"New York\" (the city) and \"NY\" (the US state).\n   *\n   * Do not parse the formatted address programmatically. Instead you should use the individual address components,\n   * which the API response includes in addition to the formatted address field.\n   */\n  formatted_address: string;\n  /**\n   * contains the place's phone number in its local format.\n   * For example, the `formatted_phone_number` for Google's Sydney, Australia office is `(02) 9374 4000`.\n   */\n  formatted_phone_number: string;\n  /** is a representation of the place's address in the [adr microformat](http://microformats.org/wiki/adr). */\n  adr_address: string;\n  /**\n   * contains the following information:\n   *  - `location`: contains the geocoded latitude,longitude value for this place.\n   *  - `viewport`: contains the preferred viewport when displaying this place on a map as a `LatLngBounds` if it is known.\n   */\n  geometry: AddressGeometry;\n  /**\n   * is an encoded location reference, derived from latitude and longitude coordinates, that represents an area:\n   * 1/8000th of a degree by 1/8000th of a degree (about 14m x 14m at the equator) or smaller.\n   * Plus codes can be used as a replacement for street addresses in places where they do not exist\n   * (where buildings are not numbered or streets are not named).\n   *\n   * The plus code is formatted as a global code and a compound code:\n   *  - `global_code` is a 4 character area code and 6 character or longer local code (849VCWC8+R9).\n   *  - `compound_code` is a 6 character or longer local code with an explicit location (CWC8+R9, Mountain View, CA, USA).\n   *\n   * Typically, both the global code and compound code are returned.\n   * However, if the result is in a remote location (for example, an ocean or desert) only the global code may be returned.\n   *\n   * @see [Open Location Code](https://en.wikipedia.org/wiki/Open_Location_Code)\n   * @see [plus codes](https://plus.codes/)\n   */\n  plus_code: PlusCode;\n  /** contains the URL of a suggested icon which may be displayed to the user when indicating this result on a map. */\n  icon: string;\n  /** \n   * The default HEX color code for the place's category. \n   * @see https://developers.google.com/maps/documentation/places/web-service/icons\n   */\n  icon_background_color: string;\n  /** \n   * The base URL for a non-colored icon, minus the file type extension (append `.svg` or `.png`).\n   * @see https://developers.google.com/maps/documentation/places/web-service/icons\n   */\n  icon_mask_base_uri: string;\n  /**\n   * contains the place's phone number in international format.\n   * International format includes the country code, and is prefixed with the plus (+) sign.\n   * For example, the `international_phone_number` for Google's Sydney, Australia office is `+61 2 9374 4000`.\n   */\n  \n  international_phone_number: string;\n  /**\n   * contains the human-readable name for the returned result.\n   * For establishment results, this is usually the canonicalized business name.\n   */\n  name: string;\n  /** place opening hours. */\n  opening_hours: OpeningHours;\n  /**\n   * is a boolean flag indicating whether the place has permanently shut down (value `true`).\n   * If the place is not permanently closed, the flag is absent from the response. This field is deprecated in favor of `business_status`.\n   */\n  permanently_closed: boolean;\n  /**\n   * is a string indicating the operational status of the place, if it is a business.\n   */\n  business_status: string;\n  /**\n   * an array of photo objects, each containing a reference to an image.\n   * A Place Details request may return up to ten photos.\n   * More information about place photos and how you can use the images in your application can be found in the Place Photos documentation.\n   */\n  photos: PlacePhoto[];\n  /**\n   * A textual identifier that uniquely identifies a place.\n   * To retrieve information about the place, pass this identifier in the `placeId` field of a Places API request.\n   */\n  place_id: string;\n  /**\n   * The price level of the place, on a scale of 0 to 4.\n   * The exact amount indicated by a specific value will vary from region to region.\n   *\n   * Price levels are interpreted as follows:\n   *  - `0`: Free\n   *  - `1`: Inexpensive\n   *  - `2`: Moderate\n   *  - `3`: Expensive\n   *  - `4`: Very Expensive\n   */\n  price_level: number;\n  /** contains the place's rating, from 1.0 to 5.0, based on aggregated user reviews. */\n  rating: number;\n  /** The total number of ratings from users */\n  user_ratings_total: number;\n  /**\n   * a JSON array of up to five reviews. If a `language` parameter was specified in the Place Details request,\n   * the Places Service will bias the results to prefer reviews written in that language.\n   */\n  reviews: PlaceReview[];\n  /**\n   * contains an array of feature types describing the given result.\n   * XML responses include multiple `<type>` elements if more than one type is assigned to the result.\n   */\n  types: AddressType[];\n  /**\n   * contains the URL of the official Google page for this place.\n   * This will be the Google-owned page that contains the best available information about the place.\n   * Applications must link to or embed this page on any screen that shows detailed results about the place to the user.\n   */\n  url: string;\n  /**\n   * contains the number of minutes this place’s current timezone is offset from UTC.\n   * For example, for places in Sydney, Australia during daylight saving time this would be 660 (+11 hours from UTC),\n   * and for places in California outside of daylight saving time this would be -480 (-8 hours from UTC).\n   */\n  utc_offset: number;\n  /**\n   * lists a simplified address for the place, including the street name, street number, and locality,\n   * but not the province/state, postal code, or country. For example, Google's Sydney, Australia office\n   * has a `vicinity` value of `48 Pirrama Road, Pyrmont`.\n   */\n  vicinity: string;\n  /** lists the authoritative website for this place, such as a business' homepage. */\n  website: string;\n}\n\nexport type LatLngArray = [number, number];\n\nexport type LatLngString = string;\n\nexport interface LatLngLiteral {\n  lat: number;\n  lng: number;\n}\n\nexport interface LatLngLiteralVerbose {\n  latitude: number;\n  longitude: number;\n}\n\n/**\n * A latitude, longitude pair. The API methods accept either:\n *  - a two-item array of [latitude, longitude];\n *  - a comma-separated string;\n *  - an object with 'lat', 'lng' properties; or\n *  - an object with 'latitude', 'longitude' properties.\n */\nexport type LatLng =\n  | LatLngArray\n  | LatLngString\n  | LatLngLiteral\n  | LatLngLiteralVerbose;\n\n/** The bounds parameter defines the latitude/longitude coordinates of the southwest and northeast corners of this bounding box. */\nexport interface LatLngBounds {\n  northeast: LatLngLiteral;\n  southwest: LatLngLiteral;\n}\n\n/**\n * By default the API will attempt to load the most appropriate language based on the users location or browser settings.\n * Some APIs allow you to explicitly set a language when you make a request\n *\n * @see https://developers.google.com/maps/faq#languagesupport\n */\nexport enum Language {\n  /** Arabic */\n  ar = \"ar\",\n  /** Belarusian */\n  be = \"be\",\n  /** Bulgarian */\n  bg = \"bg\",\n  /** Bengali */\n  bn = \"bn\",\n  /** Catalan */\n  ca = \"ca\",\n  /** Czech */\n  cs = \"cs\",\n  /** Danish */\n  da = \"da\",\n  /** German */\n  de = \"de\",\n  /** Greek */\n  el = \"el\",\n  /** English */\n  en = \"en\",\n  /** English (Australian) */\n  en_Au = \"en-Au\",\n  /** English (Great Britain) */\n  en_GB = \"en-GB\",\n  /** Spanish */\n  es = \"es\",\n  /** Basque */\n  eu = \"eu\",\n  /** Farsi */\n  fa = \"fa\",\n  /** Finnish */\n  fi = \"fi\",\n  /** Filipino */\n  fil = \"fil\",\n  /** French */\n  fr = \"fr\",\n  /** Galician */\n  gl = \"gl\",\n  /** Gujarati */\n  gu = \"gu\",\n  /** Hindi */\n  hi = \"hi\",\n  /** Croatian */\n  hr = \"hr\",\n  /** Hungarian */\n  hu = \"hu\",\n  /** Indonesian */\n  id = \"id\",\n  /** Italian */\n  it = \"it\",\n  /** Hebrew */\n  iw = \"iw\",\n  /** Japanese */\n  ja = \"ja\",\n  /** Kazakh */\n  kk = \"kk\",\n  /** Kannada */\n  kn = \"kn\",\n  /** Korean */\n  ko = \"ko\",\n  /** Kyrgyz */\n  ky = \"ky\",\n  /** Lithuanian */\n  lt = \"lt\",\n  /** Latvian */\n  lv = \"lv\",\n  /** Macedonian */\n  mk = \"mk\",\n  /** Malayalam */\n  ml = \"ml\",\n  /** Marathi */\n  mr = \"mr\",\n  /** Burmese */\n  my = \"my\",\n  /** Dutch */\n  nl = \"nl\",\n  /** Norwegian */\n  no = \"no\",\n  /** Punjabi */\n  pa = \"pa\",\n  /** Polish */\n  pl = \"pl\",\n  /** Portuguese */\n  pt = \"pt\",\n  /** Portuguese (Brazil) */\n  pt_BR = \"pt-BR\",\n  /** Portuguese (Portugal) */\n  pt_PT = \"pt-PT\",\n  /** Romanian */\n  ro = \"ro\",\n  /** Russian */\n  ru = \"ru\",\n  /** Slovak */\n  sk = \"sk\",\n  /** Slovenian */\n  sl = \"sl\",\n  /** Albanian */\n  sq = \"sq\",\n  /** Serbian */\n  sr = \"sr\",\n  /** Swedish */\n  sv = \"sv\",\n  /** Tamil */\n  ta = \"ta\",\n  /** Telugu */\n  te = \"te\",\n  /** Thai */\n  th = \"th\",\n  /** Tagalog */\n  tl = \"tl\",\n  /** Turkish */\n  tr = \"tr\",\n  /** Ukrainian */\n  uk = \"uk\",\n  /** Uzbek */\n  uz = \"uz\",\n  /** Vietnamese */\n  vi = \"vi\",\n  /** Chinese (Simlified) */\n  zh_CN = \"zh-CN\",\n  /** Chinese (Traditional) */\n  zh_TW = \"zh-TW\",\n}\n\n/**\n * When you calculate directions, you may specify the transportation mode to use.\n * By default, directions are calculated as `driving` directions.\n *\n * **Note:** Both walking and bicycling directions may sometimes not include clear pedestrian or bicycling paths,\n * so these directions will return warnings in the returned result which you must display to the user.\n */\nexport enum TravelMode {\n  /** (default) indicates standard driving directions using the road network. */\n  driving = \"driving\",\n  /** requests walking directions via pedestrian paths & sidewalks (where available). */\n  walking = \"walking\",\n  /** requests bicycling directions via bicycle paths & preferred streets (where available). */\n  bicycling = \"bicycling\",\n  /**\n   * requests directions via public transit routes (where available).\n   * If you set the mode to transit, you can optionally specify either a departure_time or an arrival_time.\n   * If neither time is specified, the departure_time defaults to now (that is, the departure time defaults to the current time).\n   * You can also optionally include a transit_mode and/or a transit_routing_preference.\n   */\n  transit = \"transit\",\n}\n\nexport enum TravelRestriction {\n  /** indicates that the calculated route should avoid toll roads/bridges. */\n  tolls = \"tolls\",\n  /** indicates that the calculated route should avoid highways. */\n  highways = \"highways\",\n  /** indicates that the calculated route should avoid ferries. */\n  ferries = \"ferries\",\n  /**\n   * indicates that the calculated route should avoid indoor steps for walking and transit directions.\n   * Only requests that include an API key or a Google Maps APIs Premium Plan client ID will receive indoor steps by default.\n   */\n  indoor = \"indoor\",\n}\n\n/**\n * Directions results contain text within distance fields that may be displayed to the user to indicate the distance of\n * a particular \"step\" of the route. By default, this text uses the unit system of the origin's country or region.\n */\nexport enum UnitSystem {\n  /** specifies usage of the metric system. Textual distances are returned using kilometers and meters. */\n  metric = \"metric\",\n  /** specifies usage of the Imperial (English) system. Textual distances are returned using miles and feet. */\n  imperial = \"imperial\",\n}\n\nexport enum TrafficModel {\n  /**\n   * indicates that the returned `duration_in_traffic` should be the best estimate of travel time given what is known about\n   * both historical traffic conditions and live traffic. Live traffic becomes more important the closer the `departure_time` is to now.\n   */\n  best_guess = \"best_guess\",\n  /**\n   * indicates that the returned `duration_in_traffic` should be longer than the actual travel time on most days,\n   * though occasional days with particularly bad traffic conditions may exceed this value.\n   */\n  pessimistic = \"pessimistic\",\n  /**\n   * indicates that the returned `duration_in_traffic` should be shorter than the actual travel time on most days,\n   * though occasional days with particularly good traffic conditions may be faster than this value.\n   */\n  optimistic = \"optimistic\",\n}\nexport enum TransitMode {\n  /** indicates that the calculated route should prefer travel by bus. */\n  bus = \"bus\",\n  /** indicates that the calculated route should prefer travel by subway. */\n  subway = \"subway\",\n  /** indicates that the calculated route should prefer travel by train. */\n  train = \"train\",\n  /** indicates that the calculated route should prefer travel by tram and light rail. */\n  tram = \"tram\",\n  /**\n   * indicates that the calculated route should prefer travel by train, tram, light rail, and subway.\n   * This is equivalent to `transit_mode=train|tram|subway`\n   */\n  rail = \"rail\",\n}\n\nexport enum TransitRoutingPreference {\n  /** indicates that the calculated route should prefer limited amounts of walking. */\n  less_walking = \"less_walking\",\n  /** indicates that the calculated route should prefer a limited number of transfers. */\n  fewer_transfers = \"fewer_transfers\",\n}\n\n/**\n * The `status` field within the Directions response object contains the status of the request, and may contain debugging information\n * to help you track down why the Directions service failed.\n */\nexport enum DirectionsResponseStatus {\n  /** indicates the response contains a valid `result`. */\n  OK = \"OK\",\n  /** indicates at least one of the locations specified in the request's origin, destination, or waypoints could not be geocoded. */\n  NOT_FOUND = \"NOT_FOUND\",\n  /** indicates no route could be found between the origin and destination. */\n  ZERO_RESULTS = \"ZERO_RESULTS\",\n  /**\n   * indicates that too many `waypoints` were provided in the request. For applications using the Directions API as a web service,\n   * or the [directions service in the Maps JavaScript API](https://developers.google.com/maps/documentation/javascript/directions),\n   * the maximum allowed number of `waypoints` is 23, plus the origin and destination.\n   */\n  MAX_WAYPOINTS_EXCEEDED = \"MAX_WAYPOINTS_EXCEEDED\",\n  /**\n   * indicates the requested route is too long and cannot be processed.\n   * This error occurs when more complex directions are returned.\n   * Try reducing the number of waypoints, turns, or instructions.\n   */\n  MAX_ROUTE_LENGTH_EXCEEDED = \"MAX_ROUTE_LENGTH_EXCEEDED\",\n  /** indicates that the provided request was invalid. Common causes of this status include an invalid parameter or parameter value. */\n  INVALID_REQUEST = \"INVALID_REQUEST\",\n  /**\n   * indicates any of the following:\n   *  - The API key is missing or invalid.\n   *  - Billing has not been enabled on your account.\n   *  - A self-imposed usage cap has been exceeded.\n   *  - The provided method of payment is no longer valid (for example, a credit card has expired).\n   * See the [Maps FAQ](https://developers.google.com/maps/faq#over-limit-key-error) to learn how to fix this.\n   */\n  OVER_DAILY_LIMIT = \"OVER_DAILY_LIMIT\",\n  /** indicates the service has received too many requests from your application within the allowed time period. */\n  OVER_QUERY_LIMIT = \"OVER_QUERY_LIMIT\",\n  /** indicates that the service denied use of the directions service by your application. */\n  REQUEST_DENIED = \"REQUEST_DENIED\",\n  /** indicates a directions request could not be processed due to a server error. The request may succeed if you try again. */\n  UNKNOWN_ERROR = \"UNKNOWN_ERROR\",\n}\n\n/**\n * The `status` field within the Directions response object contains the status of the request, and may contain debugging information\n * to help you track down why the Directions service failed.\n * @deprecated\n */\nexport enum DirectionsReponseStatus {\n  /** indicates the response contains a valid `result`. */\n  OK = \"OK\",\n  /** indicates at least one of the locations specified in the request's origin, destination, or waypoints could not be geocoded. */\n  NOT_FOUND = \"NOT_FOUND\",\n  /** indicates no route could be found between the origin and destination. */\n  ZERO_RESULTS = \"ZERO_RESULTS\",\n  /**\n   * indicates that too many `waypoints` were provided in the request. For applications using the Directions API as a web service,\n   * or the [directions service in the Maps JavaScript API](https://developers.google.com/maps/documentation/javascript/directions),\n   * the maximum allowed number of `waypoints` is 23, plus the origin and destination.\n   */\n  MAX_WAYPOINTS_EXCEEDED = \"MAX_WAYPOINTS_EXCEEDED\",\n  /**\n   * indicates the requested route is too long and cannot be processed.\n   * This error occurs when more complex directions are returned.\n   * Try reducing the number of waypoints, turns, or instructions.\n   */\n  MAX_ROUTE_LENGTH_EXCEEDED = \"MAX_ROUTE_LENGTH_EXCEEDED\",\n  /** indicates that the provided request was invalid. Common causes of this status include an invalid parameter or parameter value. */\n  INVALID_REQUEST = \"INVALID_REQUEST\",\n  /**\n   * indicates any of the following:\n   *  - The API key is missing or invalid.\n   *  - Billing has not been enabled on your account.\n   *  - A self-imposed usage cap has been exceeded.\n   *  - The provided method of payment is no longer valid (for example, a credit card has expired).\n   * See the [Maps FAQ](https://developers.google.com/maps/faq#over-limit-key-error) to learn how to fix this.\n   */\n  OVER_DAILY_LIMIT = \"OVER_DAILY_LIMIT\",\n  /** indicates the service has received too many requests from your application within the allowed time period. */\n  OVER_QUERY_LIMIT = \"OVER_QUERY_LIMIT\",\n  /** indicates that the service denied use of the directions service by your application. */\n  REQUEST_DENIED = \"REQUEST_DENIED\",\n  /** indicates a directions request could not be processed due to a server error. The request may succeed if you try again. */\n  UNKNOWN_ERROR = \"UNKNOWN_ERROR\",\n}\n\n/**\n * Elements in the `geocoded_waypoints` array correspond, by their zero-based position, to the origin,\n * the waypoints in the order they are specified, and the destination.\n */\nexport interface GeocodedWaypoint {\n  /** indicates the status code resulting from the geocoding operation. */\n  geocoder_status: GeocodedWaypointStatus;\n  /**\n   * indicates that the geocoder did not return an exact match for the original request, though it was able to match part of the\n   * requested address. You may wish to examine the original request for misspellings and/or an incomplete address.\n   *\n   * Partial matches most often occur for street addresses that do not exist within the locality you pass in the request.\n   * Partial matches may also be returned when a request matches two or more locations in the same locality.\n   * For example, \"21 Henr St, Bristol, UK\" will return a partial match for both Henry Street and Henrietta Street.\n   * Note that if a request includes a misspelled address component, the geocoding service may suggest an alternative address.\n   * Suggestions triggered in this way will also be marked as a partial match.\n   */\n  partial_match: boolean;\n  /** unique identifier that can be used with other Google APIs. */\n  place_id: string;\n  /**\n   * indicates the *address type* of the geocoding result used for calculating directions.\n   *\n   * An empty list of types indicates there are no known types for the particular address component, for example, Lieu-dit in France.\n   */\n  types: AddressType[];\n}\n\nexport enum GeocodedWaypointStatus {\n  /** indicates that no errors occurred; the address was successfully parsed and at least one geocode was returned. */\n  OK = \"OK\",\n  /**\n   * indicates that the geocode was successful but returned no results.\n   * This may occur if the geocoder was passed a non-existent `address`.\n   */\n  ZERO_RESULTS = \"ZERO_RESULTS\",\n}\n\nexport const AddressType = Object.assign({}, PlaceType1, PlaceType2);\nexport type AddressType = PlaceType1 | PlaceType2;\n\n/**\n * This route may consist of one or more `legs` depending on whether any waypoints were specified. As well, the route also contains\n * copyright and warning information which must be displayed to the user in addition to the routing information.\n */\nexport interface DirectionsRoute {\n  /** contains a short textual description for the route, suitable for naming and disambiguating the route from alternatives. */\n  summary: string;\n  /**\n   * contains an array which contains information about a leg of the route, between two locations within the given route.\n   * A separate leg will be present for each waypoint or destination specified.\n   * (A route with no waypoints will contain exactly one leg within the `legs` array.)\n   * Each leg consists of a series of `steps`.\n   */\n  legs: RouteLeg[];\n  /**\n   * contains an array indicating the order of any waypoints in the calculated route.\n   * This waypoints may be reordered if the request was passed `optimize:true` within its `waypoints` parameter.\n   */\n  waypoint_order: number[];\n  /**\n   * contains a single `points` object that holds an encoded polyline representation of the route.\n   * This polyline is an approximate (smoothed) path of the resulting directions.\n   */\n  overview_polyline: {\n    points: string;\n  };\n  /** contains the viewport bounding box of the `overview_polyline`. */\n  bounds: LatLngBounds;\n  /** contains the copyrights text to be displayed for this route. You must handle and display this information yourself. */\n  copyrights: string;\n  /** contains an array of warnings to be displayed when showing these directions. You must handle and display these warnings yourself. */\n  warnings: string[];\n  /**\n   * If present, contains the total fare (that is, the total ticket costs) on this route.\n   * This property is only returned for transit requests and only for routes where fare information is available for all transit legs.\n   *\n   * **Note:** The Directions API only returns fare information for requests that contain either an API key or a client ID\n   * and digital signature.\n   */\n  fare: TransitFare;\n  /**\n   * An array of LatLngs representing the entire course of this route. The path is simplified in order to make\n   * it suitable in contexts where a small number of vertices is required (such as Static Maps API URLs).\n   */\n  overview_path: LatLngLiteral[];\n}\n\nexport interface TransitFare {\n  /** An [ISO 4217 currency code](https://en.wikipedia.org/wiki/ISO_4217) indicating the currency that the amount is expressed in. */\n  currency: string;\n  /** The total fare amount, in the currency specified above. */\n  value: number;\n  /** The total fare amount, formatted in the requested language. */\n  text: string;\n}\n\n/**\n * A single leg of the journey from the origin to the destination in the calculated route.\n * For routes that contain no waypoints, the route will consist of a single \"leg,\" but for routes that define one or more waypoints,\n * the route will consist of one or more legs, corresponding to the specific legs of the journey.\n */\nexport interface RouteLeg {\n  /** contains an array of steps denoting information about each separate step of the leg of the journey. */\n  steps: DirectionsStep[];\n  /**\n   * indicates the total distance covered by this leg, as a field with the following elements.\n   *\n   * This field may be absent if the distance is unknown.\n   */\n  distance: Distance;\n  /**\n   * indicates the total duration of this leg.\n   *\n   * This field may be absent if the duration is unknown.\n   */\n  duration: Duration;\n  /**\n   * indicates the total duration of this leg.\n   * This value is an estimate of the time in traffic based on current and historical traffic conditions.\n   * See the `traffic_model` request parameter for the options you can use to request that the returned value is optimistic, pessimistic,\n   * or a best-guess estimate. The duration in traffic is returned only if all of the following are true:\n   *\n   *  - The request includes a valid API key, or a valid Google Maps APIs Premium Plan client ID and signature.\n   *  - The request does not include stopover waypoints. If the request includes waypoints, they must be prefixed with `via:`\n   *    to avoid stopovers.\n   *  - The request is specifically for driving directions—the `mode` parameter is set to `driving`.\n   *  - The request includes a `departure_time` parameter.\n   *  - Traffic conditions are available for the requested route.\n   */\n  duration_in_traffic?: Duration;\n  /** contains the estimated time of arrival for this leg. This property is only returned for transit directions. */\n  arrival_time: Time;\n  /**\n   * contains the estimated time of departure for this leg, specified as a `Time` object.\n   * The `departure_time` is only available for transit directions.\n   */\n  departure_time: Time;\n  /**\n   * contains the latitude/longitude coordinates of the origin of this leg.\n   * Because the Directions API calculates directions between locations by using the nearest transportation option (usually a road)\n   * at the start and end points, `start_location` may be different than the provided origin of this leg if, for example,\n   * a road is not near the origin.\n   */\n  start_location: LatLngLiteral;\n  /**\n   * contains the latitude/longitude coordinates of the given destination of this leg.\n   * Because the Directions API calculates directions between locations by using the nearest transportation option (usually a road)\n   * at the start and end points, `end_location` may be different than the provided destination of this leg if, for example,\n   * a road is not near the destination.\n   */\n  end_location: LatLngLiteral;\n  /** contains the human-readable address (typically a street address) resulting from reverse geocoding the `start_location` of this leg. */\n  start_address: string;\n  /** contains the human-readable address (typically a street address) from reverse geocoding the `end_location` of this leg. */\n  end_address: string;\n}\n\n/**\n * A step is the most atomic unit of a direction's route, containing a single step describing a specific, single instruction on the journey.\n * E.g. \"Turn left at W. 4th St.\" The step not only describes the instruction but also contains distance and duration information relating to\n * how this step relates to the following step. For example, a step denoted as \"Merge onto I-80 West\" may contain a duration of\n * \"37 miles\" and \"40 minutes,\" indicating that the next step is 37 miles/40 minutes from this step.\n *\n * When using the Directions API to search for transit directions, the steps array will include additional transit details in the form of\n * a `transit_details` array. If the directions include multiple modes of transportation, detailed directions will be provided for walking or\n * driving steps in an inner `steps` array. For example, a walking step will include directions from the start and end locations:\n * \"Walk to Innes Ave & Fitch St\". That step will include detailed walking directions for that route in the inner `steps` array, such as:\n * \"Head north-west\", \"Turn left onto Arelious Walker\", and \"Turn left onto Innes Ave\".\n */\nexport interface DirectionsStep {\n  /** contains formatted instructions for this step, presented as an HTML text string. */\n  html_instructions: string;\n  /**\n   * contains the distance covered by this step until the next step. (See the discussion of this field in Directions Legs)\n   *\n   * This field may be undefined if the distance is unknown.\n   */\n  distance: Distance;\n  /**\n   * contains the typical time required to perform the step, until the next step. (See the description in Directions Legs)\n   *\n   * This field may be undefined if the duration is unknown\n   */\n  duration: Duration;\n  /** contains the location of the starting point of this step, as a single set of `lat` and `lng` fields. */\n  start_location: LatLngLiteral;\n  /** contains the location of the last point of this step, as a single set of `lat` and `lng` fields. */\n  end_location: LatLngLiteral;\n  /**\n   * contains the action to take for the current step (turn left, merge, straight, etc.).\n   * This field is used to determine which icon to display.\n   */\n  maneuver: Maneuver;\n  /**\n   * contains a single points object that holds an encoded polyline representation of the step.\n   * This polyline is an approximate (smoothed) path of the step.\n   */\n  polyline: {\n    points: string;\n  };\n  /**\n   * contains detailed directions for walking or driving steps in transit directions.\n   * Substeps are only available when `travel_mode` is set to \"transit\".\n   * The inner `steps` array is of the same type as `steps`.\n   */\n  steps: DirectionsStep;\n  /** contains transit specific information. This field is only returned with travel_mode is set to \"transit\". */\n  transit_details: TransitDetails;\n  /** contains the type of travel mode used. */\n  travel_mode: TravelMode;\n}\n\nexport interface Distance {\n  /** indicates the distance in meters. */\n  value: number;\n  /**\n   * contains a human-readable representation of the distance, displayed in units as used at the origin\n   * (or as overridden within the `units` parameter in the request).\n   * (For example, miles and feet will be used for any origin within the United States.)\n   */\n  text: string;\n}\n\nexport interface Duration {\n  /** indicates the duration in seconds. */\n  value: number;\n  /** contains a human-readable representation of the duration. */\n  text: string;\n}\n\nexport interface Time {\n  /** the time specified as a JavaScript `Date` object. */\n  value: Date;\n  /** the time specified as a string. The time is displayed in the time zone of the transit stop. */\n  text: string;\n  /**\n   * contains the time zone of this station. The value is the name of the time zone as defined in the\n   * [IANA Time Zone Database](http://www.iana.org/time-zones), e.g. \"America/New_York\".\n   */\n  time_zone: string;\n}\n\nexport enum Maneuver {\n  turn_slight_left = \"turn-slight-left\",\n  turn_sharp_left = \"turn-sharp-left\",\n  uturn_left = \"uturn-left\",\n  turn_left = \"turn-left\",\n  turn_slight_right = \"turn-slight-right\",\n  turn_sharp_right = \"turn-sharp-right\",\n  uturn_right = \"uturn-right\",\n  turn_right = \"turn-right\",\n  straight = \"straight\",\n  ramp_left = \"ramp-left\",\n  ramp_right = \"ramp-right\",\n  merge = \"merge\",\n  fork_left = \"fork-left\",\n  fork_right = \"fork-right\",\n  ferry = \"ferry\",\n  ferry_train = \"ferry-train\",\n  roundabout_left = \"roundabout-left\",\n  roundabout_right = \"roundabout-right\",\n}\n\n/**\n * Transit directions return additional information that is not relevant for other modes of transportation.\n * These additional properties are exposed through the `transit_details` object, returned as a field of an element in the `steps[]` array.\n * From the `TransitDetails` object you can access additional information about the transit stop, transit line and transit agency\n */\nexport interface TransitDetails {\n  /** contains information about the stop for this part of the trip. */\n  arrival_stop: TransitStop;\n  /** contains information about the station for this part of the trip. */\n  departure_stop: TransitStop;\n  /** contain the arrival time for this leg of the journey. */\n  arrival_time: Time;\n  /** contain the departure time for this leg of the journey. */\n  departure_time: Time;\n  /**\n   * specifies the direction in which to travel on this line, as it is marked on the vehicle or at the departure stop.\n   * This will often be the terminus station.\n   */\n  headsign: string;\n  /**\n   * specifies the expected number of seconds between departures from the same stop at this time.\n   * For example, with a `headway` value of 600, you would expect a ten minute wait if you should miss your bus.\n   */\n  headway: number;\n  /**\n   * contains the number of stops in this step, counting the arrival stop, but not the departure stop.\n   * For example, if your directions involve leaving from Stop A, passing through stops B and C, and arriving at stop D,\n   * `num_stops` will return 3.\n   */\n  num_stops: number;\n  /** contains information about the transit line used in this step. */\n  line: TransitLine;\n}\n\nexport interface TransitStop {\n  /** the name of the transit station/stop. eg. \"Union Square\". */\n  name: string;\n  /** the location of the transit station/stop, represented as a `lat` and `lng` field. */\n  location: LatLngLiteral;\n}\n\nexport interface TransitLine {\n  /** contains the full name of this transit line. eg. \"7 Avenue Express\". */\n  name: string;\n  /** contains the short name of this transit line. This will normally be a line number, such as \"M7\" or \"355\". */\n  short_name: string;\n  /** contains the color commonly used in signage for this transit line. The color will be specified as a hex string such as: #FF0033. */\n  color: string;\n  /**\n   * is an array containing a single `TransitAgency` object.\n   * The `TransitAgency` object provides information about the operator of the line\n   */\n  agencies: TransitAgency[];\n  /** contains the URL for this transit line as provided by the transit agency. */\n  url: string;\n  /** contains the URL for the icon associated with this line. */\n  icon: string;\n  /** contains the color of text commonly used for signage of this line. The color will be specified as a hex string. */\n  text_color: string;\n  /** contains the type of vehicle used on this line. */\n  vehicle: TransitVehicle;\n}\n\n/** You must display the names and URLs of the transit agencies servicing the trip results. */\nexport interface TransitAgency {\n  /** contains the name of the transit agency. */\n  name: string;\n  /** contains the phone number of the transit agency. */\n  phone: string;\n  /** contains the URL for the transit agency. */\n  url: string;\n}\n\nexport interface TransitVehicle {\n  /** contains the name of the vehicle on this line. eg. \"Subway.\". */\n  name: string;\n  /** contains the type of vehicle that runs on this line. */\n  type: VehicleType;\n  /** contains the URL for an icon associated with this vehicle type. */\n  icon: string;\n  /** contains the URL for the icon associated with this vehicle type, based on the local transport signage. */\n  local_icon: string;\n}\n\n/** @see https://developers.google.com/maps/documentation/directions/intro#VehicleType. */\nexport enum VehicleType {\n  /** Rail. */\n  RAIL = \"RAIL\",\n  /** Light rail transit. */\n  METRO_RAIL = \"METRO_RAIL\",\n  /** Underground light rail. */\n  SUBWAY = \"SUBWAY\",\n  /** Above ground light rail. */\n  TRAM = \"TRAM\",\n  /** Monorail. */\n  MONORAIL = \"MONORAIL\",\n  /** Heavy rail. */\n  HEAVY_RAIL = \"HEAVY_RAIL\",\n  /** Commuter rail. */\n  COMMUTER_TRAIN = \"COMMUTER_TRAIN\",\n  /** High speed train. */\n  HIGH_SPEED_TRAIN = \"HIGH_SPEED_TRAIN\",\n  /** Bus. */\n  BUS = \"BUS\",\n  /** Intercity bus. */\n  INTERCITY_BUS = \"INTERCITY_BUS\",\n  /** Trolleybus. */\n  TROLLEYBUS = \"TROLLEYBUS\",\n  /** Share taxi is a kind of bus with the ability to drop off and pick up passengers anywhere on its route. */\n  SHARE_TAXI = \"SHARE_TAXI\",\n  /** Ferry. */\n  FERRY = \"FERRY\",\n  /** A vehicle that operates on a cable, usually on the ground. Aerial cable cars may be of the type `GONDOLA_LIFT`. */\n  CABLE_CAR = \"CABLE_CAR\",\n  /** An aerial cable car. */\n  GONDOLA_LIFT = \"GONDOLA_LIFT\",\n  /**\n   * A vehicle that is pulled up a steep incline by a cable.\n   * A Funicular typically consists of two cars, with each car acting as a counterweight for the other.\n   */\n  FUNICULAR = \"FUNICULAR\",\n  /** All other vehicles will return this type. */\n  OTHER = \"OTHER\",\n}\n\n/**\n * When the Distance Matrix API returns results, it places them within a JSON `rows` array.\n * Even if no results are returned (such as when the origins and/or destinations don't exist), it still returns an empty array.\n * XML responses consist of zero or more `<row>` elements.\n *\n * Rows are ordered according to the values in the `origin` parameter of the request.\n * Each row corresponds to an origin, and each `element` within that row corresponds to a pairing of the origin with a `destination` value.\n *\n * Each `row` array contains one or more `element` entries, which in turn contain the information about a single origin-destination pairing.\n */\nexport interface DistanceMatrixRow {\n  elements: DistanceMatrixRowElement[];\n}\n\n/** The information about each origin-destination pairing is returned in an `element` entry. */\nexport interface DistanceMatrixRowElement {\n  /** possible status codes  */\n  status: Status;\n  /**\n   * The length of time it takes to travel this route, expressed in seconds (the `value` field) and as `text`.\n   * The textual representation is localized according to the query's `language` parameter.\n   */\n  duration: Duration;\n  /**\n   * The length of time it takes to travel this route, based on current and historical traffic conditions.\n   * See the `traffic_model` request parameter for the options you can use to request that the returned value is\n   * `optimistic`, `pessimistic`, or a `best-guess` estimate. The duration is expressed in seconds (the `value` field) and as `text`.\n   * The textual representation is localized according to the query's `language` parameter.\n   * The duration in traffic is returned only if all of the following are true:\n   *  - The request includes a `departure_time` parameter.\n   *  - The request includes a valid API key, or a valid Google Maps APIs Premium Plan client ID and signature.\n   *  - Traffic conditions are available for the requested route.\n   *  - The `mode` parameter is set to `driving`.\n   */\n  duration_in_traffic: Duration;\n  /**\n   * The total distance of this route, expressed in meters (`value`) and as `text`.\n   * The textual value uses the `unit` system specified with the unit parameter of the original request, or the origin's region.\n   */\n  distance: Distance;\n  /**\n   * If present, contains the total fare (that is, the total ticket costs) on this route.\n   * This property is only returned for transit requests and only for transit providers where fare information is available.\n   */\n  fare: TransitFare;\n}\n\nexport interface OpeningHours {\n  /** is a boolean value indicating if the place is open at the current time. */\n  open_now: boolean;\n  /** is an array of opening periods covering seven days, starting from Sunday, in chronological order. */\n  periods: OpeningPeriod[];\n  /**\n   * is an array of seven strings representing the formatted opening hours for each day of the week.\n   * If a `language` parameter was specified in the Place Details request, the Places Service will format\n   * and localize the opening hours appropriately for that language. The ordering of the elements in this array\n   * depends on the `language` parameter. Some languages start the week on Monday while others start on Sunday.\n   */\n  weekday_text: string[];\n}\n\nexport interface OpeningPeriod {\n  /** contains a pair of day and time objects describing when the place opens. */\n  open: OpeningHoursTime;\n  /**\n   * may contain a pair of day and time objects describing when the place closes.\n   * **Note:** If a place is **always open**, the `close` section will be missing from the response.\n   * Clients can rely on always-open being represented as an `open` period containing `day` with value 0\n   * and `time` with value 0000, and no `close`.\n   */\n  close?: OpeningHoursTime;\n}\n\nexport interface OpeningHoursTime {\n  /** a number from 0–6, corresponding to the days of the week, starting on Sunday. For example, 2 means Tuesday. */\n  day: number;\n  /**\n   *  may contain a time of day in 24-hour hhmm format. Values are in the range 0000–2359. The `time`\n   * will be reported in the place's time zone.\n   */\n  time?: string;\n}\n\nexport interface GeocodeResult {\n  /**\n   * array indicates the type of the returned result.\n   * This array contains a set of zero or more tags identifying the type of feature returned in the result.\n   * For example, a geocode of \"Chicago\" returns \"locality\" which indicates that \"Chicago\" is a city,\n   * and also returns \"political\" which indicates it is a political entity.\n   */\n  types: AddressType[];\n  /**\n   * is a string containing the human-readable address of this location.\n   *\n   * Often this address is equivalent to the postal address. Note that some countries, such as the United Kingdom,\n   * do not allow distribution of true postal addresses due to licensing restrictions.\n   *\n   * The formatted address is logically composed of one or more address components.\n   * For example, the address \"111 8th Avenue, New York, NY\" consists of the following components: \"111\" (the street number),\n   * \"8th Avenue\" (the route), \"New York\" (the city) and \"NY\" (the US state).\n   *\n   * Do not parse the formatted address programmatically. Instead you should use the individual address components,\n   * which the API response includes in addition to the formatted address field.\n   */\n  formatted_address: string;\n  /**\n   * is an array containing the separate components applicable to this address.\n   *\n   * Note the following facts about the `address_components[]` array:\n   *  - The array of address components may contain more components than the `formatted_address`.\n   *  - The array does not necessarily include all the political entities that contain an address,\n   *    apart from those included in the `formatted_address`. To retrieve all the political entities that contain a specific address,\n   *    you should use reverse geocoding, passing the latitude/longitude of the address as a parameter to the request.\n   *  - The format of the response is not guaranteed to remain the same between requests.\n   *    In particular, the number of `address_components` varies based on the address requested and can change\n   *    over time for the same address. A component can change position in the array.\n   *    The type of the component can change. A particular component may be missing in a later response.\n   */\n  address_components: AddressComponent[];\n  /**\n   * is an array denoting all the localities contained in a postal code.\n   * This is only present when the result is a postal code that contains multiple localities.\n   */\n  postcode_localities: string[];\n  /** address geometry. */\n  geometry: AddressGeometry;\n  /**\n   * is an encoded location reference, derived from latitude and longitude coordinates,\n   * that represents an area: 1/8000th of a degree by 1/8000th of a degree (about 14m x 14m at the equator) or smaller.\n   * Plus codes can be used as a replacement for street addresses in places where they do not exist\n   * (where buildings are not numbered or streets are not named).\n   *\n   * The plus code is formatted as a global code and a compound code:\n   *  - `global_code` is a 4 character area code and 6 character or longer local code (849VCWC8+R9).\n   *  - `compound_code` is a 6 character or longer local code with an explicit location (CWC8+R9, Mountain View, CA, USA).\n   * Typically, both the global code and compound code are returned. However, if the result is in a remote location\n   * (for example, an ocean or desert) only the global code may be returned.\n   *\n   * @see [Open Location Code](https://en.wikipedia.org/wiki/Open_Location_Code)\n   * @see [plus codes](https://plus.codes/)\n   */\n  plus_code: PlusCode;\n  /**\n   * indicates that the geocoder did not return an exact match for the original request,\n   * though it was able to match part of the requested address.\n   * You may wish to examine the original request for misspellings and/or an incomplete address.\n   *\n   * Partial matches most often occur for street addresses that do not exist within the locality you pass in the request.\n   * Partial matches may also be returned when a request matches two or more locations in the same locality.\n   * For example, \"21 Henr St, Bristol, UK\" will return a partial match for both Henry Street and Henrietta Street.\n   * Note that if a request includes a misspelled address component, the geocoding service may suggest an alternative address.\n   * Suggestions triggered in this way will also be marked as a partial match.\n   */\n  partial_match: boolean;\n  /** is a unique identifier that can be used with other Google APIs. */\n  place_id: string;\n}\n\nexport enum GeocodingAddressComponentType {\n  /** indicates the floor of a building address. */\n  floor = \"floor\",\n  /** typically indicates a place that has not yet been categorized. */\n  establishment = \"establishment\",\n  /** indicates a named point of interest. */\n  point_of_interest = \"point_of_interest\",\n  /** indicates a parking lot or parking structure. */\n  parking = \"parking\",\n  /** indicates a specific postal box. */\n  post_box = \"post_box\",\n  /** indicates a grouping of geographic areas, such as locality and sublocality, used for mailing addresses in some countries. */\n  postal_town = \"postal_town\",\n  /** indicates the room of a building address. */\n  room = \"room\",\n  /** indicates the precise street number. */\n  street_number = \"street_number\",\n  /**  indicate the location of a bus. */\n  bus_station = \"bus_station\",\n  /**  indicate the location of a train. */\n  train_station = \"train_station\",\n  /**  indicate the location of a public transit stop. */\n  transit_station = \"transit_station\",\n}\n\nexport interface AddressComponent {\n  /** is an array indicating the *type* of the address component. */\n  types: Array<AddressType | GeocodingAddressComponentType>;\n  /** is the full text description or name of the address component as returned by the Geocoder. */\n  long_name: string;\n  /**\n   * is an abbreviated textual name for the address component, if available.\n   * For example, an address component for the state of Alaska may have a `long_name` of \"Alaska\" and a `short_name` of \"AK\"\n   * using the 2-letter postal abbreviation.\n   */\n  short_name: string;\n}\n\nexport interface AddressGeometry {\n  /** contains the geocoded latitude, longitude value. For normal address lookups, this field is typically the most important. */\n  location: LatLngLiteral;\n  /** stores additional data about the specified location. */\n  location_type?: LocationType;\n  /**\n   * contains the recommended viewport for displaying the returned result, specified as two latitude, longitude values\n   * defining the `southwest` and `northeast` corner of the viewport bounding box.\n   * Generally the viewport is used to frame a result when displaying it to a user.\n   */\n  viewport: LatLngBounds;\n  /**\n   * (optionally returned) stores the bounding box which can fully contain the returned result.\n   * Note that these bounds may not match the recommended viewport.\n   * (For example, San Francisco includes the [Farallon islands](https://en.wikipedia.org/wiki/Farallon_Islands),\n   * which are technically part of the city, but probably should not be returned in the viewport.)\n   */\n  bounds?: LatLngBounds;\n}\n\nexport enum LocationType {\n  /**\n   * indicates that the returned result is a precise geocode for which we have location information\n   * accurate down to street address precision\n   */\n  ROOFTOP = \"ROOFTOP\",\n  /**\n   * indicates that the returned result reflects an approximation (usually on a road) interpolated between two precise points\n   * (such as intersections). Interpolated results are generally returned when rooftop geocodes are unavailable for a street address.\n   */\n  RANGE_INTERPOLATED = \"RANGE_INTERPOLATED\",\n  /**\n   * indicates that the returned result is the geometric center of a result such as a polyline\n   * (for example, a street) or polygon (region).\n   */\n  GEOMETRIC_CENTER = \"GEOMETRIC_CENTER\",\n  /** indicates that the returned result is approximate. */\n  APPROXIMATE = \"APPROXIMATE\",\n}\n\nexport interface PlusCode {\n  /** is a 4 character area code and 6 character or longer local code (849VCWC8+R9). */\n  global_code: string;\n  /** is a 6 character or longer local code with an explicit location (CWC8+R9, Mountain View, CA, USA). */\n  compound_code: string;\n}\n\nexport enum RadioType {\n  lte = \"lte\",\n  gsm = \"gsm\",\n  cdma = \"cdma\",\n  wcdma = \"wcdma\",\n}\n\nexport interface CellTower {\n  /**\n   * Unique identifier of the cell.\n   * On GSM, this is the Cell ID (CID);\n   * CDMA networks use the Base Station ID (BID).\n   * WCDMA networks use the UTRAN/GERAN Cell Identity (UC-Id), which is a 32-bit value concatenating the Radio Network Controller (RNC)\n   * and Cell ID. Specifying only the 16-bit Cell ID value in WCDMA networks may return inaccurate results.\n   */\n  cellId: number;\n  /** The Location Area Code (LAC) for GSM and WCDMA networks. The Network ID (NID) for CDMA networks. */\n  locationAreaCode: number;\n  /** The cell tower's Mobile Country Code (MCC). */\n  mobileCountryCode: number;\n  /** The cell tower's Mobile Network Code. This is the MNC for GSM and WCDMA; CDMA uses the System ID (SID). */\n  mobileNetworkCode: number;\n  /** The number of milliseconds since this cell was primary. If age is 0, the `cellId` represents a current measurement. */\n  age?: number;\n  /** Radio signal strength measured in dBm. */\n  signalStrength?: number;\n  /** The [timing advance](https://en.wikipedia.org/wiki/Timing_advance) value. */\n  timingAdvance?: number;\n}\n\nexport interface WifiAccessPoint {\n  /** The MAC address of the WiFi node. It's typically called a BSS, BSSID or MAC address. Separators must be `:` (colon). */\n  macAddress: string;\n  /** The current signal strength measured in dBm. */\n  signalStrength?: number;\n  /** The number of milliseconds since this access point was detected. */\n  age?: number;\n  /** The channel over which the client is communicating with the acces. */\n  channel?: number;\n  /** The current signal to noise ratio measured in dB. */\n  signalToNoiseRatio?: number;\n}\n\nexport interface PredictionTerm {\n  /** containing the text of the term. */\n  value: string;\n  /** start position of this term in the description, measured in Unicode characters. */\n  offset: number;\n}\n\nexport interface PredictionSubstring {\n  /** location of the entered term. */\n  offset: number;\n  /** length of the entered term. */\n  length: number;\n}\n\nexport interface StructuredFormatting {\n  /** contains the main text of a prediction, usually the name of the place. */\n  main_text: string;\n  /**\n   * contains an array with `offset` value and `length`. These describe the location of\n   * the entered term in the prediction result text, so that the term can be highlighted if desired.\n   */\n  main_text_matched_substrings: PredictionSubstring[];\n  /** contains the secondary text of a prediction, usually the location of the place. */\n  secondary_text: string;\n  /**\n   * contains an array with `offset` value and `length`. These describe the location of\n   * the entered term in the prediction result secondary text, so that the term can be highlighted if desired.\n   */\n  secondary_text_matched_substrings: PredictionSubstring[];\n}\n\nexport interface SnappedPoint {\n  /** Contains a `latitude` and `longitude` value. */\n  location: LatLngLiteralVerbose;\n  /**\n   * An integer that indicates the corresponding value in the original request.\n   * Each point in the request maps to at most two segmentsin the response:\n   *  - If there are no nearby roads, no segment is returned.\n   *  - If the nearest road is one-way, one segment is returned.\n   *  - If the nearest road is bidirectional, two segments are returned.\n   */\n  originalIndex: number;\n  /**\n   * A unique identifier for a place. All place IDs returned by the Roads API correspond to road segments.\n   * Place IDs can be used with other Google APIs, including the Places SDK and the Maps JavaScript API.\n   * For example, if you need to get road names for the snapped points returned by the Roads API,\n   * you can pass the `placeId` to the Places SDK or the Geocoding API. Within the Roads API,\n   * you can pass the `placeId` in a speed limits request to determine the speed limit along that road segment.\n   */\n  placeId: string;\n}\n", "/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as settle from \"axios/lib/core/settle\";\nimport * as defaults from \"axios/lib/defaults\";\nimport * as transformData from \"axios/lib/core/transformData\";\nimport { Status } from \"./common\";\nimport { AxiosRequestConfig, AxiosResponse, AxiosPromise } from \"axios\";\n\nexport function statusToCode(status: Status): number {\n  switch (status) {\n    case Status.OK:\n    case Status.ZERO_RESULTS: {\n      return 200;\n    }\n    case Status.INVALID_REQUEST:\n    case Status.MAX_ROUTE_LENGTH_EXCEEDED:\n    case Status.MAX_WAYPOINTS_EXCEEDED: {\n      return 400;\n    }\n    case Status.REQUEST_DENIED: {\n      return 403;\n    }\n    case Status.NOT_FOUND: {\n      return 404;\n    }\n    case Status.OVER_DAILY_LIMIT:\n    case Status.OVER_QUERY_LIMIT: {\n      return 429;\n    }\n    case Status.UNKNOWN_ERROR: {\n      return 500;\n    }\n    default: {\n      return 200;\n    }\n  }\n}\n\nexport const customAdapter = (config: AxiosRequestConfig): AxiosPromise<any> =>\n  new Promise((resolve, reject) => {\n    defaults\n      .adapter(config)\n      .then((r: AxiosResponse) => {\n        // unfortunately data is transformed after the adapter\n        r.data = transformData(r.data, r.headers, config.transformResponse);\n        if (r.status === 200 && r.data.status) {\n          r.status = statusToCode(r.data.status);\n        }\n        settle(resolve, reject, r);\n      })\n      .catch(reject);\n  });\n", "{\n  \"name\": \"@googlemaps/google-maps-services-js\",\n  \"version\": \"3.3.29\",\n  \"description\": \"Node.js client library for Google Maps API Web Services\",\n  \"keywords\": [\n    \"google\",\n    \"maps\",\n    \"googlemaps\",\n    \"geo\",\n    \"geocode\",\n    \"timezone\",\n    \"api\",\n    \"client\",\n    \"roads\",\n    \"directions\",\n    \"navigation\"\n  ],\n  \"homepage\": \"https://github.com/googlemaps/google-maps-services-js\",\n  \"bugs\": {\n    \"url\": \"https://github.com/googlemaps/google-maps-services-js/issues\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/googlemaps/google-maps-services-js.git\"\n  },\n  \"license\": \"Apache-2.0\",\n  \"author\": \"Google Inc.\",\n  \"contributors\": [\n    {\n      \"name\": \"Justin Poehnelt\",\n      \"email\": \"jpoehnelt@google.com\"\n    }\n  ],\n  \"main\": \"./dist/index.js\",\n  \"files\": [\n    \"dist\",\n    \"src\"\n  ],\n  \"scripts\": {\n    \"docs\": \"rm -rf docs/ && typedoc src/index.ts\",\n    \"prepare\": \"tsc\",\n    \"test\": \"jest src\",\n    \"test:e2e\": \"jest e2e\",\n    \"test:all\": \"jest\"\n  },\n  \"dependencies\": {\n    \"@googlemaps/url-signature\": \"^1.0.4\",\n    \"agentkeepalive\": \"^4.1.0\",\n    \"axios\": \"^0.27.2\",\n    \"query-string\": \"^7.1.3\",\n    \"retry-axios\": \"^2.6.0\"\n  },\n  \"devDependencies\": {\n    \"@types/jest\": \"^27.0.0\",\n    \"@types/node\": \"^18.0.0\",\n    \"jest\": \"^27.0.0\",\n    \"nock\": \"^13.0.4\",\n    \"prettier\": \"^2.0.5\",\n    \"ts-jest\": \"^27.0.5\",\n    \"typedoc\": \"^0.24.1\",\n    \"typescript\": \"^4.0.0\"\n  },\n  \"publishConfig\": {\n    \"registry\": \"https://wombat-dressing-room.appspot.com\",\n    \"access\": \"public\"\n  }\n}\n", "/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as rax from \"retry-axios\";\n\nimport {\n  DirectionsRequest,\n  DirectionsResponse,\n  directions,\n} from \"./directions\";\nimport {\n  DistanceMatrixRequest,\n  DistanceMatrixResponse,\n  distancematrix,\n} from \"./distance\";\nimport { ElevationRequest, ElevationResponse, elevation } from \"./elevation\";\nimport {\n  FindPlaceFromTextRequest,\n  FindPlaceFromTextResponse,\n  findPlaceFromText,\n} from \"./places/findplacefromtext\";\nimport { GeocodeRequest, GeocodeResponse, geocode } from \"./geocode/geocode\";\nimport { GeolocateRequest, GeolocateResponse, geolocate } from \"./geolocate\";\nimport {\n  NearestRoadsRequest,\n  NearestRoadsResponse,\n  nearestRoads,\n} from \"./roads/nearestroads\";\nimport {\n  PlaceAutocompleteRequest,\n  PlaceAutocompleteResponse,\n  placeAutocomplete,\n} from \"./places/autocomplete\";\nimport {\n  PlaceDetailsRequest,\n  PlaceDetailsResponse,\n  placeDetails,\n} from \"./places/details\";\nimport {\n  PlacePhotoRequest,\n  PlacePhotoResponse,\n  placePhoto,\n} from \"./places/photo\";\nimport {\n  PlaceQueryAutocompleteRequest,\n  PlaceQueryAutocompleteResponse,\n  placeQueryAutocomplete,\n} from \"./places/queryautocomplete\";\nimport {\n  PlacesNearbyRequest,\n  PlacesNearbyResponse,\n  placesNearby,\n} from \"./places/placesnearby\";\nimport {\n  ReverseGeocodeRequest,\n  ReverseGeocodeResponse,\n  reverseGeocode,\n} from \"./geocode/reversegeocode\";\nimport {\n  SnapToRoadsRequest,\n  SnapToRoadsResponse,\n  snapToRoads,\n} from \"./roads/snaptoroads\";\nimport {\n  TextSearchRequest,\n  TextSearchResponse,\n  textSearch,\n} from \"./places/textsearch\";\nimport { TimeZoneRequest, TimeZoneResponse, timezone } from \"./timezone\";\nimport axios, { AxiosInstance, AxiosRequestConfig } from \"axios\";\n\nimport { HttpsAgent } from \"agentkeepalive\";\nimport { customAdapter } from \"./adapter\";\n\n// Cannot be `import` as it's not under TS root dir\nexport const version = require(\"../package.json\").version;\nexport const defaultHttpsAgent = new HttpsAgent({ keepAlive: true });\nexport const defaultTimeout = 10000;\nexport const userAgent = `google-maps-services-node-${version}`;\nexport const acceptEncoding = \"gzip\";\nexport const X_GOOG_MAPS_EXPERIENCE_ID = \"X-GOOG-MAPS-EXPERIENCE-ID\";\n\nconst defaultConfig: AxiosRequestConfig = {\n  timeout: defaultTimeout,\n  httpsAgent: defaultHttpsAgent,\n  adapter: customAdapter,\n  headers: {\n    \"User-Agent\": userAgent,\n    \"Accept-Encoding\": acceptEncoding,\n  },\n};\n\nexport const defaultAxiosInstance = axios.create(defaultConfig);\nrax.attach(defaultAxiosInstance);\n\nexport type Config = {\n  raxConfig?: rax.RetryConfig;\n} & AxiosRequestConfig;\n\nexport interface ClientOptions {\n  /** AxiosInstance to be used by client. Provide one of axiosInstance or config. */\n  axiosInstance?: AxiosInstance;\n  /** Config used to create AxiosInstance. Provide one of axiosInstance or config. */\n  config?: Config;\n  experienceId?: string[];\n}\n/**\n * Client is a light wrapper around API methods providing shared configuration for Axios\n * settings such as retry logic using the default retry-axios settings and gzip encoding.\n *\n * ### Instantiate with defaults\n * ```\n * const client = Client()\n * ```\n *\n * ### Instantiate with config\n * ```\n * const client = Client({config})\n * ```\n *\n * ### Instantiate with axiosInstance **Advanced**\n * ```\n * const axiosInstance = axios.create(config)\n * const client = Client({axiosInstance})\n * ```\n */\nexport class Client {\n  private axiosInstance: AxiosInstance;\n  private experienceId: string[];\n\n  constructor({ axiosInstance, config, experienceId }: ClientOptions = {}) {\n    if (axiosInstance && config) {\n      throw new Error(\"Provide one of axiosInstance or config.\");\n    }\n\n    if (axiosInstance) {\n      this.axiosInstance = axiosInstance;\n      this.axiosInstance.defaults.headers = {\n        ...defaultConfig.headers,\n        ...this.axiosInstance.defaults.headers,\n      };\n    } else if (config) {\n      config = { ...defaultConfig, ...config };\n      config.headers = { ...defaultConfig.headers, ...(config.headers || {}) };\n      this.axiosInstance = axios.create(config);\n      rax.attach(this.axiosInstance);\n    } else {\n      this.axiosInstance = defaultAxiosInstance;\n    }\n\n    if (experienceId) {\n      this.setExperienceId(...experienceId);\n    }\n  }\n\n  setExperienceId(...ids: string[]) {\n    this.experienceId = ids;\n    this.axiosInstance.defaults.headers[X_GOOG_MAPS_EXPERIENCE_ID] = ids.join(\n      \",\"\n    );\n  }\n\n  clearExperienceId() {\n    this.experienceId = null;\n    this.clearExperienceIdHeader();\n  }\n\n  private clearExperienceIdHeader() {\n    delete this.axiosInstance.defaults.headers[X_GOOG_MAPS_EXPERIENCE_ID];\n  }\n\n  getExperienceId(): string[] {\n    return this.experienceId;\n  }\n\n  directions(request: DirectionsRequest): Promise<DirectionsResponse> {\n    return directions(request, this.axiosInstance);\n  }\n\n  distancematrix(\n    request: DistanceMatrixRequest\n  ): Promise<DistanceMatrixResponse> {\n    return distancematrix(request, this.axiosInstance);\n  }\n\n  elevation(request: ElevationRequest): Promise<ElevationResponse> {\n    return elevation(request, this.axiosInstance);\n  }\n\n  timezone(request: TimeZoneRequest): Promise<TimeZoneResponse> {\n    return timezone(request, this.axiosInstance);\n  }\n  geolocate(request: GeolocateRequest): Promise<GeolocateResponse> {\n    return geolocate(request, this.axiosInstance);\n  }\n  /**\n   * An example use of this function.\n   *\n   * ```javascript\n   * import { Client } from '@googlemaps/google-maps-services-js';\n   * \n   * const args = {\n   *   params: {\n   *     key: '<your-api-key>',\n   *     address: 'Perth 4WD & Commercial Centre',\n   *   }\n   * };\n   * const client = new Client();\n   * client.geocode(args).then(gcResponse => {\n   *   const str = JSON.stringify(gcResponse.data.results[0]);\n   *   console.log(`First result is: ${str}`);)\n   * });\n   * ```\n   */\n  geocode(request: GeocodeRequest): Promise<GeocodeResponse> {\n    return geocode(request, this.axiosInstance);\n  }\n\n  reverseGeocode(\n    request: ReverseGeocodeRequest\n  ): Promise<ReverseGeocodeResponse> {\n    return reverseGeocode(request, this.axiosInstance);\n  }\n\n  placeAutocomplete(\n    request: PlaceAutocompleteRequest\n  ): Promise<PlaceAutocompleteResponse> {\n    return placeAutocomplete(request, this.axiosInstance);\n  }\n\n  placeDetails(request: PlaceDetailsRequest): Promise<PlaceDetailsResponse> {\n    return placeDetails(request, this.axiosInstance);\n  }\n\n  findPlaceFromText(\n    request: FindPlaceFromTextRequest\n  ): Promise<FindPlaceFromTextResponse> {\n    return findPlaceFromText(request, this.axiosInstance);\n  }\n\n  placePhoto(request: PlacePhotoRequest): Promise<PlacePhotoResponse> {\n    return placePhoto(request, this.axiosInstance);\n  }\n\n  placesNearby(request: PlacesNearbyRequest): Promise<PlacesNearbyResponse> {\n    return placesNearby(request, this.axiosInstance);\n  }\n\n  placeQueryAutocomplete(\n    request: PlaceQueryAutocompleteRequest\n  ): Promise<PlaceQueryAutocompleteResponse> {\n    return placeQueryAutocomplete(request, this.axiosInstance);\n  }\n\n  textSearch(request: TextSearchRequest): Promise<TextSearchResponse> {\n    return textSearch(request, this.axiosInstance);\n  }\n  nearestRoads(request: NearestRoadsRequest): Promise<NearestRoadsResponse> {\n    return nearestRoads(request, this.axiosInstance);\n  }\n  snapToRoads(request: SnapToRoadsRequest): Promise<SnapToRoadsResponse> {\n    return snapToRoads(request, this.axiosInstance);\n  }\n}\n\nexport {\n  DirectionsRequest,\n  DirectionsResponse,\n  DistanceMatrixRequest,\n  DistanceMatrixResponse,\n  ElevationRequest,\n  ElevationResponse,\n  FindPlaceFromTextRequest,\n  FindPlaceFromTextResponse,\n  GeolocateRequest,\n  GeocodeRequest,\n  GeocodeResponse,\n  GeolocateResponse,\n  NearestRoadsRequest,\n  NearestRoadsResponse,\n  PlaceAutocompleteRequest,\n  PlaceAutocompleteResponse,\n  PlaceDetailsRequest,\n  PlaceDetailsResponse,\n  PlacePhotoRequest,\n  PlacePhotoResponse,\n  PlaceQueryAutocompleteRequest,\n  PlaceQueryAutocompleteResponse,\n  PlacesNearbyRequest,\n  PlacesNearbyResponse,\n  ReverseGeocodeRequest,\n  ReverseGeocodeResponse,\n  SnapToRoadsRequest,\n  SnapToRoadsResponse,\n  TextSearchRequest,\n  TextSearchResponse,\n  TimeZoneRequest,\n  TimeZoneResponse,\n};\n", "/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AxiosInstance, AxiosRequestConfig, AxiosResponse } from \"axios\";\nimport {\n  CellTower,\n  LatLngLiteral,\n  RadioType,\n  RequestParams,\n  ResponseData,\n  WifiAccessPoint\n} from \"./common\";\n\nimport { defaultAxiosInstance } from \"./client\";\n\nexport interface GeolocateRequest extends Partial<AxiosRequestConfig> {\n  data: {\n    /** The mobile country code (MCC) for the device's home network. */\n    homeMobileCountryCode?: number;\n    /** The mobile network code (MNC) for the device's home network. */\n    homeMobileNetworkCode?: number;\n    /** The mobile radio type. While this field is optional, it should be included if a value is available, for more accurate results. */\n    radioType?: RadioType;\n    /** The carrier name. */\n    carrier?: string;\n    /**\n     * Specifies whether to fall back to IP geolocation if wifi and cell tower signals are not available.\n     * Defaults to `true`. Set `considerIp` to `false` to disable fall back.\n     */\n    considerIp?: boolean;\n    /** An array of cell tower objects. */\n    cellTowers?: CellTower[];\n    /** An array of WiFi access point objects. */\n    wifiAccessPoints?: WifiAccessPoint[];\n  };\n  params: {} & RequestParams;\n}\n\nexport interface GeolocateResponseData extends ResponseData {\n  /** The user's estimated latitude and longitude, in degrees. Contains one `lat` and one `lng` subfield. */\n  location: LatLngLiteral;\n  /** The accuracy of the estimated location, in meters. This represents the radius of a circle around the given location. */\n  accuracy: number;\n}\nexport interface GeolocateResponseSuccess extends AxiosResponse {\n  data: GeolocateResponseData;\n}\n\n/**\n * In the case of an error, a standard format error response body will be returned\n * and the HTTP status code will be set to an error status.\n */\nexport interface GeolocateResponseError extends AxiosResponse {\n  data: {\n    error: {\n      /** This is the same as the HTTP status of the response. */\n      code: number;\n      /** A short description of the error. */\n      message: string;\n      /**\n       * A list of errors which occurred. Each error contains an identifier for the type of error (the `reason`)\n       * and a short description (the `message`).\n       */\n      errors: {\n        domain: string;\n        reason: GeolocateErrorReason;\n        message: string;\n      }[];\n    };\n  };\n}\n\nexport enum GeolocateErrorReason {\n  /**\n   * You have exceeded your daily limit.\n   * Domain: usageLimits\n   * Code: 403\n   */\n  dailyLimitExceeded = \"dailyLimitExceeded\",\n  /**\n   * Your API key is not valid for the Geolocate API. Please ensure that you've included the entire key,\n   * and that you've either purchased the API or have enabled billing and activated the API to obtain the free quota.\n   * Domain: usageLimits\n   * Code: 400\n   */\n  keyInvalid = \"keyInvalid\",\n  /**\n   * You have exceeded the requests per second per user limit that you configured in the Google Cloud Platform Console.\n   * This limit should be configured to prevent a single or small group of users from exhausting your daily quota,\n   * while still allowing reasonable access to all users.\n   * Domain: usageLimits\n   * Code: 403\n   */\n  userRateLimitExceeded = \"userRateLimitExceeded\",\n  /**\n   * The request was valid, but no results were returned.\n   * Domain: geolocation\n   * Code: 404\n   */\n  notFound = \"notFound\",\n  /**\n   * The request body is not valid JSON. Refer to the Request Body section for details on each field.\n   * Domain: global\n   * Code: 400\n   */\n  parseError = \"parseError\",\n}\n\nexport type GeolocateResponse =\n  | GeolocateResponseSuccess\n  | GeolocateResponseError;\n\nexport const defaultUrl = \"https://www.googleapis.com/geolocation/v1/geolocate\";\n\nexport function geolocate(\n  { params, method = \"post\", url = defaultUrl, ...config }: GeolocateRequest,\n  axiosInstance: AxiosInstance = defaultAxiosInstance\n): Promise<GeolocateResponse> {\n  return axiosInstance({\n    params,\n    method,\n    url,\n    ...config\n  }) as Promise<GeolocateResponse>;\n}\n", "/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport {\n  DirectionsRequest,\n  DirectionsResponse,\n  DirectionsResponseData,\n} from \"./directions\";\nexport {\n  DistanceMatrixRequest,\n  DistanceMatrixResponse,\n  DistanceMatrixResponseData,\n} from \"./distance\";\nexport {\n  ElevationRequest,\n  ElevationResponse,\n  PositionalElevationParams,\n  SampledPathElevationParams,\n  ElevationResponseData,\n} from \"./elevation\";\nexport {\n  FindPlaceFromTextRequest,\n  FindPlaceFromTextResponse,\n  FindPlaceFromTextResponseData,\n} from \"./places/findplacefromtext\";\nexport {\n  GeocodeRequest,\n  GeocodeResponse,\n  GeocodeResponseData,\n  GeocodeComponents,\n} from \"./geocode/geocode\";\nexport {\n  GeolocateRequest,\n  GeolocateResponse,\n  GeolocateResponseSuccess,\n  GeolocateResponseError,\n  GeolocateResponseData,\n  GeolocateErrorReason,\n} from \"./geolocate\";\nexport {\n  NearestRoadsRequest,\n  NearestRoadsResponse,\n} from \"./roads/nearestroads\";\nexport {\n  PlaceAutocompleteRequest,\n  PlaceAutocompleteResponse,\n  PlaceAutocompleteResult,\n  PlaceAutocompleteType,\n  PlaceAutocompleteResponseData,\n} from \"./places/autocomplete\";\nexport {\n  PlaceDetailsRequest,\n  PlaceDetailsResponse,\n  PlaceDetailsResponseData,\n} from \"./places/details\";\nexport { PlacePhotoRequest, PlacePhotoResponse } from \"./places/photo\";\nexport {\n  PlaceQueryAutocompleteRequest,\n  PlaceQueryAutocompleteResponse,\n  PlaceQueryAutocompleteResponseData,\n  PlaceQueryAutocompletePrediction,\n} from \"./places/queryautocomplete\";\nexport {\n  PlacesNearbyRequest,\n  PlacesNearbyResponse,\n  PlacesNearbyResponseData,\n  PlacesNearbyRanking,\n} from \"./places/placesnearby\";\nexport {\n  ReverseGeocodeRequest,\n  ReverseGeocodeResponse,\n  ReverseGeocodeResponseData,\n  ReverseGeocodingLocationType,\n} from \"./geocode/reversegeocode\";\nexport { SnapToRoadsRequest, SnapToRoadsResponse } from \"./roads/snaptoroads\";\nexport {\n  TextSearchRequest,\n  TextSearchResponse,\n  TextSearchResponseData,\n} from \"./places/textsearch\";\nexport {\n  TimeZoneRequest,\n  TimeZoneResponse,\n  TimeZoneResponseData,\n} from \"./timezone\";\n\nexport * from \"./common\";\nexport * from \"./client\";\n"],
  "mappings": "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IAAA,IAAA;AAEA,MAAAA,UAAA,IAAA,IAAA;AAEA,MAAAA,UAAA,IAAA,IAAA;AAEA,MAAAA,UAAA,IAAA,IAAA;AAEA,MAAAA,UAAA,IAAA,IAAA;AAEA,MAAAA,UAAA,IAAA,IAAA;AAEA,MAAAA,UAAA,IAAA,IAAA;AAEA,MAAAA,UAAA,IAAA,IAAA;AAEA,MAAAA,UAAA,OAAA,IAAA;AAEA,MAAAA,UAAA,OAAA,IAAA;AAEA,MAAAA,UAAA,IAAA,IAAA;AAEA,MAAAA,UAAA,IAAA,IAAA;AAEA,MAAAA,UAAA,IAAA,IAAA;AAEA,MAAAA,UAAA,IAAA,IAAA;AAEA,MAAAA,UAAA,KAAA,IAAA;AAEA,MAAAA,UAAA,IAAA,IAAA;AAEA,MAAAA,UAAA,IAAA,IAAA;AAEA,MAAAA,UAAA,IAAA,IAAA;AAEA,MAAAA,UAAA,IAAA,IAAA;AAEA,MAAAA,UAAA,IAAA,IAAA;AAEA,MAAAA,UAAA,IAAA,IAAA;AAEA,MAAAA,UAAA,IAAA,IAAA;AAEA,MAAAA,UAAA,IAAA,IAAA;AAEA,MAAAA,UAAA,IAAA,IAAA;AAEA,MAAAA,UAAA,IAAA,IAAA;AAEA,MAAAA,UAAA,IAAA,IAAA;AAEA,MAAAA,UAAA,IAAA,IAAA;AAEA,MAAAA,UAAA,IAAA,IAAA;AAEA,MAAAA,UAAA,IAAA,IAAA;AAEA,MAAAA,UAAA,IAAA,IAAA;AAEA,MAAAA,UAAA,IAAA,IAAA;AAEA,MAAAA,UAAA,IAAA,IAAA;AAEA,MAAAA,UAAA,IAAA,IAAA;AAEA,MAAAA,UAAA,IAAA,IAAA;AAEA,MAAAA,UAAA,IAAA,IAAA;AAEA,MAAAA,UAAA,IAAA,IAAA;AAEA,MAAAA,UAAA,IAAA,IAAA;AAEA,MAAAA,UAAA,IAAA,IAAA;AAEA,MAAAA,UAAA,IAAA,IAAA;AAEA,MAAAA,UAAA,IAAA,IAAA;AAEA,MAAAA,UAAA,OAAA,IAAA;AAEA,MAAAA,UAAA,OAAA,IAAA;AAEA,MAAAA,UAAA,IAAA,IAAA;AAEA,MAAAA,UAAA,IAAA,IAAA;AAEA,MAAAA,UAAA,IAAA,IAAA;AAEA,MAAAA,UAAA,IAAA,IAAA;AAEA,MAAAA,UAAA,IAAA,IAAA;AAEA,MAAAA,UAAA,IAAA,IAAA;AAEA,MAAAA,UAAA,IAAA,IAAA;AAEA,MAAAA,UAAA,IAAA,IAAA;AAEA,MAAAA,UAAA,IAAA,IAAA;AAEA,MAAAA,UAAA,IAAA,IAAA;AAEA,MAAAA,UAAA,IAAA,IAAA;AAEA,MAAAA,UAAA,IAAA,IAAA;AAEA,MAAAA,UAAA,IAAA,IAAA;AAEA,MAAAA,UAAA,IAAA,IAAA;AAEA,MAAAA,UAAA,IAAA,IAAA;AAEA,MAAAA,UAAA,OAAA,IAAA;AAEA,MAAAA,UAAA,OAAA,IAAA;IACF,GA3HY,WAAA,QAAA,aAAA,QAAA,WAAQ,CAAA,EAAA;AAoIpB,QAAY;AAAZ,KAAA,SAAYC,aAAU;AAEpB,MAAAA,YAAA,SAAA,IAAA;AAEA,MAAAA,YAAA,SAAA,IAAA;AAEA,MAAAA,YAAA,WAAA,IAAA;AAOA,MAAAA,YAAA,SAAA,IAAA;IACF,GAdY,aAAA,QAAA,eAAA,QAAA,aAAU,CAAA,EAAA;AAgBtB,QAAY;AAAZ,KAAA,SAAYC,oBAAiB;AAE3B,MAAAA,mBAAA,OAAA,IAAA;AAEA,MAAAA,mBAAA,UAAA,IAAA;AAEA,MAAAA,mBAAA,SAAA,IAAA;AAKA,MAAAA,mBAAA,QAAA,IAAA;IACF,GAZY,oBAAA,QAAA,sBAAA,QAAA,oBAAiB,CAAA,EAAA;AAkB7B,QAAY;AAAZ,KAAA,SAAYC,aAAU;AAEpB,MAAAA,YAAA,QAAA,IAAA;AAEA,MAAAA,YAAA,UAAA,IAAA;IACF,GALY,aAAA,QAAA,eAAA,QAAA,aAAU,CAAA,EAAA;AAOtB,QAAY;AAAZ,KAAA,SAAYC,eAAY;AAKtB,MAAAA,cAAA,YAAA,IAAA;AAKA,MAAAA,cAAA,aAAA,IAAA;AAKA,MAAAA,cAAA,YAAA,IAAA;IACF,GAhBY,eAAA,QAAA,iBAAA,QAAA,eAAY,CAAA,EAAA;AAiBxB,QAAY;AAAZ,KAAA,SAAYC,cAAW;AAErB,MAAAA,aAAA,KAAA,IAAA;AAEA,MAAAA,aAAA,QAAA,IAAA;AAEA,MAAAA,aAAA,OAAA,IAAA;AAEA,MAAAA,aAAA,MAAA,IAAA;AAKA,MAAAA,aAAA,MAAA,IAAA;IACF,GAdY,cAAA,QAAA,gBAAA,QAAA,cAAW,CAAA,EAAA;AAgBvB,QAAY;AAAZ,KAAA,SAAYC,2BAAwB;AAElC,MAAAA,0BAAA,cAAA,IAAA;AAEA,MAAAA,0BAAA,iBAAA,IAAA;IACF,GALY,2BAAA,QAAA,6BAAA,QAAA,2BAAwB,CAAA,EAAA;AAWpC,QAAY;AAAZ,KAAA,SAAYC,2BAAwB;AAElC,MAAAA,0BAAA,IAAA,IAAA;AAEA,MAAAA,0BAAA,WAAA,IAAA;AAEA,MAAAA,0BAAA,cAAA,IAAA;AAMA,MAAAA,0BAAA,wBAAA,IAAA;AAMA,MAAAA,0BAAA,2BAAA,IAAA;AAEA,MAAAA,0BAAA,iBAAA,IAAA;AASA,MAAAA,0BAAA,kBAAA,IAAA;AAEA,MAAAA,0BAAA,kBAAA,IAAA;AAEA,MAAAA,0BAAA,gBAAA,IAAA;AAEA,MAAAA,0BAAA,eAAA,IAAA;IACF,GApCY,2BAAA,QAAA,6BAAA,QAAA,2BAAwB,CAAA,EAAA;AA2CpC,QAAY;AAAZ,KAAA,SAAYC,0BAAuB;AAEjC,MAAAA,yBAAA,IAAA,IAAA;AAEA,MAAAA,yBAAA,WAAA,IAAA;AAEA,MAAAA,yBAAA,cAAA,IAAA;AAMA,MAAAA,yBAAA,wBAAA,IAAA;AAMA,MAAAA,yBAAA,2BAAA,IAAA;AAEA,MAAAA,yBAAA,iBAAA,IAAA;AASA,MAAAA,yBAAA,kBAAA,IAAA;AAEA,MAAAA,yBAAA,kBAAA,IAAA;AAEA,MAAAA,yBAAA,gBAAA,IAAA;AAEA,MAAAA,yBAAA,eAAA,IAAA;IACF,GApCY,0BAAA,QAAA,4BAAA,QAAA,0BAAuB,CAAA,EAAA;AAkEnC,QAAY;AAAZ,KAAA,SAAYC,yBAAsB;AAEhC,MAAAA,wBAAA,IAAA,IAAA;AAKA,MAAAA,wBAAA,cAAA,IAAA;IACF,GARY,yBAAA,QAAA,2BAAA,QAAA,yBAAsB,CAAA,EAAA;AAUrB,YAAA,cAAc,OAAO,OAAO,CAAA,GAAI,YAAY,UAAU;AA6MnE,QAAY;AAAZ,KAAA,SAAYC,WAAQ;AAClB,MAAAA,UAAA,kBAAA,IAAA;AACA,MAAAA,UAAA,iBAAA,IAAA;AACA,MAAAA,UAAA,YAAA,IAAA;AACA,MAAAA,UAAA,WAAA,IAAA;AACA,MAAAA,UAAA,mBAAA,IAAA;AACA,MAAAA,UAAA,kBAAA,IAAA;AACA,MAAAA,UAAA,aAAA,IAAA;AACA,MAAAA,UAAA,YAAA,IAAA;AACA,MAAAA,UAAA,UAAA,IAAA;AACA,MAAAA,UAAA,WAAA,IAAA;AACA,MAAAA,UAAA,YAAA,IAAA;AACA,MAAAA,UAAA,OAAA,IAAA;AACA,MAAAA,UAAA,WAAA,IAAA;AACA,MAAAA,UAAA,YAAA,IAAA;AACA,MAAAA,UAAA,OAAA,IAAA;AACA,MAAAA,UAAA,aAAA,IAAA;AACA,MAAAA,UAAA,iBAAA,IAAA;AACA,MAAAA,UAAA,kBAAA,IAAA;IACF,GAnBY,WAAA,QAAA,aAAA,QAAA,WAAQ,CAAA,EAAA;AA0GpB,QAAY;AAAZ,KAAA,SAAYC,cAAW;AAErB,MAAAA,aAAA,MAAA,IAAA;AAEA,MAAAA,aAAA,YAAA,IAAA;AAEA,MAAAA,aAAA,QAAA,IAAA;AAEA,MAAAA,aAAA,MAAA,IAAA;AAEA,MAAAA,aAAA,UAAA,IAAA;AAEA,MAAAA,aAAA,YAAA,IAAA;AAEA,MAAAA,aAAA,gBAAA,IAAA;AAEA,MAAAA,aAAA,kBAAA,IAAA;AAEA,MAAAA,aAAA,KAAA,IAAA;AAEA,MAAAA,aAAA,eAAA,IAAA;AAEA,MAAAA,aAAA,YAAA,IAAA;AAEA,MAAAA,aAAA,YAAA,IAAA;AAEA,MAAAA,aAAA,OAAA,IAAA;AAEA,MAAAA,aAAA,WAAA,IAAA;AAEA,MAAAA,aAAA,cAAA,IAAA;AAKA,MAAAA,aAAA,WAAA,IAAA;AAEA,MAAAA,aAAA,OAAA,IAAA;IACF,GAtCY,cAAA,QAAA,gBAAA,QAAA,cAAW,CAAA,EAAA;AAsMvB,QAAY;AAAZ,KAAA,SAAYC,gCAA6B;AAEvC,MAAAA,+BAAA,OAAA,IAAA;AAEA,MAAAA,+BAAA,eAAA,IAAA;AAEA,MAAAA,+BAAA,mBAAA,IAAA;AAEA,MAAAA,+BAAA,SAAA,IAAA;AAEA,MAAAA,+BAAA,UAAA,IAAA;AAEA,MAAAA,+BAAA,aAAA,IAAA;AAEA,MAAAA,+BAAA,MAAA,IAAA;AAEA,MAAAA,+BAAA,eAAA,IAAA;AAEA,MAAAA,+BAAA,aAAA,IAAA;AAEA,MAAAA,+BAAA,eAAA,IAAA;AAEA,MAAAA,+BAAA,iBAAA,IAAA;IACF,GAvBY,gCAAA,QAAA,kCAAA,QAAA,gCAA6B,CAAA,EAAA;AA0DzC,QAAY;AAAZ,KAAA,SAAYC,eAAY;AAKtB,MAAAA,cAAA,SAAA,IAAA;AAKA,MAAAA,cAAA,oBAAA,IAAA;AAKA,MAAAA,cAAA,kBAAA,IAAA;AAEA,MAAAA,cAAA,aAAA,IAAA;IACF,GAlBY,eAAA,QAAA,iBAAA,QAAA,eAAY,CAAA,EAAA;AA2BxB,QAAY;AAAZ,KAAA,SAAYC,YAAS;AACnB,MAAAA,WAAA,KAAA,IAAA;AACA,MAAAA,WAAA,KAAA,IAAA;AACA,MAAAA,WAAA,MAAA,IAAA;AACA,MAAAA,WAAA,OAAA,IAAA;IACF,GALY,YAAA,QAAA,cAAA,QAAA,YAAS,CAAA,EAAA;;;;;;;;;;ACn+CrB,QAAA,SAAA;AACA,QAAA,WAAA;AACA,QAAA,gBAAA;AACA,QAAA,WAAA;AAGA,aAAgB,aAAa,QAAc;AACzC,cAAQ,QAAQ;QACd,KAAK,SAAA,OAAO;QACZ,KAAK,SAAA,OAAO,cAAc;AACxB,iBAAO;;QAET,KAAK,SAAA,OAAO;QACZ,KAAK,SAAA,OAAO;QACZ,KAAK,SAAA,OAAO,wBAAwB;AAClC,iBAAO;;QAET,KAAK,SAAA,OAAO,gBAAgB;AAC1B,iBAAO;;QAET,KAAK,SAAA,OAAO,WAAW;AACrB,iBAAO;;QAET,KAAK,SAAA,OAAO;QACZ,KAAK,SAAA,OAAO,kBAAkB;AAC5B,iBAAO;;QAET,KAAK,SAAA,OAAO,eAAe;AACzB,iBAAO;;QAET,SAAS;AACP,iBAAO;;;IAGb;AA5BA,YAAA,eAAA;AA8BO,QAAM,gBAAgB,CAAC,WAC5B,IAAI,QAAQ,CAAC,SAAS,WAAU;AAC9B,eACG,QAAQ,MAAM,EACd,KAAK,CAACC,OAAoB;AAEzB,QAAAA,GAAE,OAAO,cAAcA,GAAE,MAAMA,GAAE,SAAS,OAAO,iBAAiB;AAClE,YAAIA,GAAE,WAAW,OAAOA,GAAE,KAAK,QAAQ;AACrC,UAAAA,GAAE,SAAS,aAAaA,GAAE,KAAK,MAAM;;AAEvC,eAAO,SAAS,QAAQA,EAAC;MAC3B,CAAC,EACA,MAAM,MAAM;IACjB,CAAC;AAbU,YAAA,gBAAa;;;;;ACpD1B;AAAA;AAAA;AAAA,MACE,MAAQ;AAAA,MACR,SAAW;AAAA,MACX,aAAe;AAAA,MACf,UAAY;AAAA,QACV;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAAA,MACA,UAAY;AAAA,MACZ,MAAQ;AAAA,QACN,KAAO;AAAA,MACT;AAAA,MACA,YAAc;AAAA,QACZ,MAAQ;AAAA,QACR,KAAO;AAAA,MACT;AAAA,MACA,SAAW;AAAA,MACX,QAAU;AAAA,MACV,cAAgB;AAAA,QACd;AAAA,UACE,MAAQ;AAAA,UACR,OAAS;AAAA,QACX;AAAA,MACF;AAAA,MACA,MAAQ;AAAA,MACR,OAAS;AAAA,QACP;AAAA,QACA;AAAA,MACF;AAAA,MACA,SAAW;AAAA,QACT,MAAQ;AAAA,QACR,SAAW;AAAA,QACX,MAAQ;AAAA,QACR,YAAY;AAAA,QACZ,YAAY;AAAA,MACd;AAAA,MACA,cAAgB;AAAA,QACd,6BAA6B;AAAA,QAC7B,gBAAkB;AAAA,QAClB,OAAS;AAAA,QACT,gBAAgB;AAAA,QAChB,eAAe;AAAA,MACjB;AAAA,MACA,iBAAmB;AAAA,QACjB,eAAe;AAAA,QACf,eAAe;AAAA,QACf,MAAQ;AAAA,QACR,MAAQ;AAAA,QACR,UAAY;AAAA,QACZ,WAAW;AAAA,QACX,SAAW;AAAA,QACX,YAAc;AAAA,MAChB;AAAA,MACA,eAAiB;AAAA,QACf,UAAY;AAAA,QACZ,QAAU;AAAA,MACZ;AAAA,IACF;AAAA;AAAA;;;;;;;;AClDA,QAAA,MAAA;AAEA,QAAA,eAAA;AAKA,QAAA,aAAA;AAKA,QAAA,cAAA;AACA,QAAA,sBAAA;AAKA,QAAA,YAAA;AACA,QAAA,cAAA;AACA,QAAA,iBAAA;AAKA,QAAA,iBAAA;AAKA,QAAA,YAAA;AAKA,QAAA,UAAA;AAKA,QAAA,sBAAA;AAKA,QAAA,iBAAA;AAKA,QAAA,mBAAA;AAKA,QAAA,gBAAA;AAKA,QAAA,eAAA;AAKA,QAAA,aAAA;AACA,QAAA,UAAA;AAEA,QAAA,mBAAA;AACA,QAAA,YAAA;AAGa,YAAA,UAAU,kBAA2B;AACrC,YAAA,oBAAoB,IAAI,iBAAA,WAAW,EAAE,WAAW,KAAI,CAAE;AACtD,YAAA,iBAAiB;AACjB,YAAA,YAAY,6BAA6B,QAAA;AACzC,YAAA,iBAAiB;AACjB,YAAA,4BAA4B;AAEzC,QAAM,gBAAoC;MACxC,SAAS,QAAA;MACT,YAAY,QAAA;MACZ,SAAS,UAAA;MACT,SAAS;QACP,cAAc,QAAA;QACd,mBAAmB,QAAA;;;AAIV,YAAA,uBAAuB,QAAA,QAAM,OAAO,aAAa;AAC9D,QAAI,OAAO,QAAA,oBAAoB;AAiC/B,QAAa,SAAb,MAAmB;MAIjB,YAAY,EAAE,eAAe,QAAQ,aAAY,IAAoB,CAAA,GAAE;AACrE,YAAI,iBAAiB,QAAQ;AAC3B,gBAAM,IAAI,MAAM,yCAAyC;;AAG3D,YAAI,eAAe;AACjB,eAAK,gBAAgB;AACrB,eAAK,cAAc,SAAS,UAAO,OAAA,OAAA,OAAA,OAAA,CAAA,GAC9B,cAAc,OAAO,GACrB,KAAK,cAAc,SAAS,OAAO;mBAE/B,QAAQ;AACjB,mBAAM,OAAA,OAAA,OAAA,OAAA,CAAA,GAAQ,aAAa,GAAK,MAAM;AACtC,iBAAO,UAAO,OAAA,OAAA,OAAA,OAAA,CAAA,GAAQ,cAAc,OAAO,GAAM,OAAO,WAAW,CAAA,CAAG;AACtE,eAAK,gBAAgB,QAAA,QAAM,OAAO,MAAM;AACxC,cAAI,OAAO,KAAK,aAAa;eACxB;AACL,eAAK,gBAAgB,QAAA;;AAGvB,YAAI,cAAc;AAChB,eAAK,gBAAgB,GAAG,YAAY;;MAExC;MAEA,mBAAmB,KAAa;AAC9B,aAAK,eAAe;AACpB,aAAK,cAAc,SAAS,QAAQ,QAAA,yBAAyB,IAAI,IAAI,KACnE,GAAG;MAEP;MAEA,oBAAiB;AACf,aAAK,eAAe;AACpB,aAAK,wBAAuB;MAC9B;MAEQ,0BAAuB;AAC7B,eAAO,KAAK,cAAc,SAAS,QAAQ,QAAA,yBAAyB;MACtE;MAEA,kBAAe;AACb,eAAO,KAAK;MACd;MAEA,WAAW,SAA0B;AACnC,gBAAO,GAAA,aAAA,YAAW,SAAS,KAAK,aAAa;MAC/C;MAEA,eACE,SAA8B;AAE9B,gBAAO,GAAA,WAAA,gBAAe,SAAS,KAAK,aAAa;MACnD;MAEA,UAAU,SAAyB;AACjC,gBAAO,GAAA,YAAA,WAAU,SAAS,KAAK,aAAa;MAC9C;MAEA,SAAS,SAAwB;AAC/B,gBAAO,GAAA,WAAA,UAAS,SAAS,KAAK,aAAa;MAC7C;MACA,UAAU,SAAyB;AACjC,gBAAO,GAAA,YAAA,WAAU,SAAS,KAAK,aAAa;MAC9C;;;;;;;;;;;;;;;;;;;;MAoBA,QAAQ,SAAuB;AAC7B,gBAAO,GAAA,UAAA,SAAQ,SAAS,KAAK,aAAa;MAC5C;MAEA,eACE,SAA8B;AAE9B,gBAAO,GAAA,iBAAA,gBAAe,SAAS,KAAK,aAAa;MACnD;MAEA,kBACE,SAAiC;AAEjC,gBAAO,GAAA,eAAA,mBAAkB,SAAS,KAAK,aAAa;MACtD;MAEA,aAAa,SAA4B;AACvC,gBAAO,GAAA,UAAA,cAAa,SAAS,KAAK,aAAa;MACjD;MAEA,kBACE,SAAiC;AAEjC,gBAAO,GAAA,oBAAA,mBAAkB,SAAS,KAAK,aAAa;MACtD;MAEA,WAAW,SAA0B;AACnC,gBAAO,GAAA,QAAA,YAAW,SAAS,KAAK,aAAa;MAC/C;MAEA,aAAa,SAA4B;AACvC,gBAAO,GAAA,eAAA,cAAa,SAAS,KAAK,aAAa;MACjD;MAEA,uBACE,SAAsC;AAEtC,gBAAO,GAAA,oBAAA,wBAAuB,SAAS,KAAK,aAAa;MAC3D;MAEA,WAAW,SAA0B;AACnC,gBAAO,GAAA,aAAA,YAAW,SAAS,KAAK,aAAa;MAC/C;MACA,aAAa,SAA4B;AACvC,gBAAO,GAAA,eAAA,cAAa,SAAS,KAAK,aAAa;MACjD;MACA,YAAY,SAA2B;AACrC,gBAAO,GAAA,cAAA,aAAY,SAAS,KAAK,aAAa;MAChD;;AAxIF,YAAA,SAAA;;;;;;;;;;;;;;;;;;;;;;ACjHA,QAAA,WAAA;AA2DA,QAAY;AAAZ,KAAA,SAAYC,uBAAoB;AAM9B,MAAAA,sBAAA,oBAAA,IAAA;AAOA,MAAAA,sBAAA,YAAA,IAAA;AAQA,MAAAA,sBAAA,uBAAA,IAAA;AAMA,MAAAA,sBAAA,UAAA,IAAA;AAMA,MAAAA,sBAAA,YAAA,IAAA;IACF,GAlCY,uBAAA,QAAA,yBAAA,QAAA,uBAAoB,CAAA,EAAA;AAwCnB,YAAA,aAAa;AAE1B,aAAgB,UACd,IACA,eAAmD;UADnD,EAAE,QAAQ,SAAS,QAAQ,MAAM,QAAA,WAAU,IAAA,IAAK,SAAM,OAAA,IAAtD,CAAA,UAAA,UAAA,KAAA,CAAwD;AACxD,UAAA,kBAAA,QAAA;AAAA,wBAA+B,SAAA;MAAoB;AAEnD,aAAO,cAAa,OAAA,OAAA;QAClB;QACA;QACA;MAAG,GACA,MAAM,CAAA;IAEb;AAVA,YAAA,YAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnFA,QAAA,cAAA;AAME,WAAA,eAAA,SAAA,wBAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,aAAA,YAAA;IAAoB,EAAA,CAAA;AAMtB,QAAA,iBAAA;AAIE,WAAA,eAAA,SAAA,yBAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,aAAA,eAAA;IAAqB,EAAA,CAAA;AAevB,QAAA,iBAAA;AAIE,WAAA,eAAA,SAAA,uBAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,aAAA,eAAA;IAAmB,EAAA,CAAA;AAErB,QAAA,mBAAA;AAIE,WAAA,eAAA,SAAA,gCAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,aAAA,iBAAA;IAA4B,EAAA,CAAA;AAc9B,iBAAA,kBAAA,OAAA;AACA,iBAAA,kBAAA,OAAA;;;",
  "names": ["attach", "instance", "axios", "interceptors", "response", "use", "onFulfilled", "onError", "detach", "interceptorId", "eject", "res", "normalizeArray", "obj", "arr", "Array", "isArray", "Object", "keys", "forEach", "key", "err", "isCancel", "Promise", "reject", "config", "getConfig", "currentRetryAttempt", "retry", "retryDelay", "backoffType", "httpMethodsToRetry", "noResponseRetries", "checkRetryAfter", "maxRetryAfter", "statusCodesToRetry", "raxConfig", "shouldRetry", "shouldRetryRequest", "onBackoffPromise", "resolve", "delay", "headers", "retryAfter", "header", "value", "Number", "isNaN", "dateTime", "Date", "parse", "now", "retrycount", "Math", "pow", "maxRetryDelay", "min", "setTimeout", "onRetryAttemptPromise", "onRetryAttempt", "then", "request", "method", "indexOf", "toUpperCase", "status", "isInRange", "n", "o", "const", "i", "Math", "undefined", "i", "e", "Base64", "i", "e", "i", "n", "t", "i", "HmacSHA1", "Base64", "i", "i", "o", "o", "o", "o", "o", "PlaceAutocompleteType", "PlacesNearbyRanking", "ReverseGeocodingLocationType", "o", "Status", "PlaceIdScope", "PlaceInputType", "PlaceType1", "PlaceType2", "AspectRatingType", "Language", "TravelMode", "TravelRestriction", "UnitSystem", "TrafficModel", "TransitMode", "TransitRoutingPreference", "DirectionsResponseStatus", "DirectionsReponseStatus", "GeocodedWaypointStatus", "Maneuver", "VehicleType", "GeocodingAddressComponentType", "LocationType", "RadioType", "r", "GeolocateErrorReason"]
}
